// $ANTLR 3.0 C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g 2007-09-02 17:33:52
namespace 
CodeReformatter.Generators.Core

{

using System.Text;
using System.IO;
using System.Diagnostics;
using System.Collections.Generic;
using System.Text.RegularExpressions;


using System;
using Antlr.Runtime;
using IList 		= System.Collections.IList;
using ArrayList 	= System.Collections.ArrayList;
using Stack 		= Antlr.Runtime.Collections.StackList;

using IDictionary	= System.Collections.IDictionary;
using Hashtable 	= System.Collections.Hashtable;



using Antlr.Runtime.Tree;

public class ASParser : Parser 
{
    public static readonly string[] tokenNames = new string[] 
	{
        "<invalid>", 
		"<EOR>", 
		"<DOWN>", 
		"<UP>", 
		"COMPILATION_UNIT", 
		"TYPE_BLOCK", 
		"METHOD_DEF", 
		"VAR_DEF", 
		"ANNOTATIONS", 
		"ANNOTATION", 
		"ANNOTATION_PARAMS", 
		"MODIFIERS", 
		"NAMESPACE_DEF", 
		"ACCESSOR_ROLE", 
		"CLASS_DEF", 
		"INTERFACE_DEF", 
		"PARAMS", 
		"PARAM", 
		"TYPE_SPEC", 
		"BLOCK", 
		"ELIST", 
		"CONDITION", 
		"ARGUMENTS", 
		"EXPR_STMNT", 
		"ENCPS_EXPR", 
		"VAR_INIT", 
		"METHOD_CALL", 
		"PROPERTY_OR_IDENTIFIER", 
		"PROPERTY_ACCESS", 
		"TYPE_NAME", 
		"ARRAY_ACC", 
		"UNARY_PLUS", 
		"UNARY_MINUS", 
		"POST_INC", 
		"POST_DEC", 
		"PRE_INC", 
		"PRE_DEC", 
		"ARRAY_LITERAL", 
		"ELEMENT", 
		"OBJECT_LITERAL", 
		"OBJECT_FIELD", 
		"FUNC_DEF", 
		"FOR_INIT", 
		"FOR_CONDITION", 
		"FOR_ITERATOR", 
		"FOR_EACH", 
		"FOR_IN", 
		"SWITCH_STATEMENT_LIST", 
		"IDENTIFIER", 
		"DEFAULT_XML_NAMESPACE", 
		"SINGLELINE_COMMENT", 
		"MULTILINE_COMMENT", 
		"COMMENT_LIST", 
		"COMMENT_ENTRY", 
		"VIRTUAL_PLACEHOLDER", 
		"ANNOTATION_ASSIGN", 
		"AS2_COMPILATION_UNIT", 
		"IMETHOD_DEF", 
		"IMPORT", 
		"SEMI", 
		"CLASS", 
		"INTERFACE", 
		"EXTENDS", 
		"COMMA", 
		"IMPLEMENTS", 
		"LCURLY", 
		"RCURLY", 
		"INCLUDE_DIRECTIVE", 
		"STRING_LITERAL", 
		"FUNCTION", 
		"GET", 
		"SET", 
		"VAR", 
		"CONST", 
		"ASSIGN", 
		"LPAREN", 
		"RPAREN", 
		"IF", 
		"ELSE", 
		"RETURN", 
		"CONTINUE", 
		"BREAK", 
		"SWITCH", 
		"CASE", 
		"COLON", 
		"DEFAULT", 
		"FOR", 
		"IN", 
		"WHILE", 
		"DO", 
		"WITH", 
		"VOID", 
		"STAR", 
		"DOT", 
		"IDENT", 
		"PUBLIC", 
		"PRIVATE", 
		"PROTECTED", 
		"INTERNAL", 
		"LBRACK", 
		"RBRACK", 
		"STATIC", 
		"DYNAMIC", 
		"STAR_ASSIGN", 
		"DIV_ASSIGN", 
		"MOD_ASSIGN", 
		"PLUS_ASSIGN", 
		"MINUS_ASSIGN", 
		"SL_ASSIGN", 
		"SR_ASSIGN", 
		"BSR_ASSIGN", 
		"BAND_ASSIGN", 
		"BXOR_ASSIGN", 
		"BOR_ASSIGN", 
		"LAND_ASSIGN", 
		"LOR_ASSIGN", 
		"QUESTION", 
		"LOR", 
		"LAND", 
		"BOR", 
		"BXOR", 
		"BAND", 
		"STRICT_EQUAL", 
		"STRICT_NOT_EQUAL", 
		"NOT_EQUAL", 
		"EQUAL", 
		"LT", 
		"GT", 
		"LE", 
		"GE", 
		"IS", 
		"AS", 
		"INSTANCEOF", 
		"SL", 
		"SR", 
		"BSR", 
		"PLUS", 
		"MINUS", 
		"DIV", 
		"MOD", 
		"INC", 
		"DEC", 
		"DELETE", 
		"TYPEOF", 
		"LNOT", 
		"BNOT", 
		"UNDEFINED", 
		"TRUE", 
		"FALSE", 
		"NULL", 
		"HEX_LITERAL", 
		"DECIMAL_LITERAL", 
		"OCTAL_LITERAL", 
		"FLOAT_LITERAL", 
		"NEW", 
		"SL_COMMENT", 
		"ML_COMMENT", 
		"USE", 
		"XML", 
		"PACKAGE", 
		"EACH", 
		"DBL_COLON", 
		"E4X_ATTRI", 
		"E4X_DESC", 
		"REST", 
		"ESC", 
		"HEX_DIGIT", 
		"EXPONENT", 
		"WS", 
		"NL", 
		"BOM", 
		"OCT_DIGIT", 
		"CTRLCHAR_ESC", 
		"UNICODE_ESC", 
		"OCTAL_ESC", 
		"'include'", 
		"'throw'", 
		"'try'", 
		"'catch'", 
		"'finally'", 
		"'final'", 
		"'enumerable'", 
		"'explicit'", 
		"'override'", 
		"'intrinsic'", 
		"'or'", 
		"'and'"
    };

    public const int INTERNAL = 98;
    public const int BLOCK = 19;
    public const int BOR_ASSIGN = 113;
    public const int STRING_LITERAL = 68;
    public const int GT = 127;
    public const int HEX_DIGIT = 166;
    public const int GET = 70;
    public const int UNDEFINED = 146;
    public const int SL_ASSIGN = 108;
    public const int PRE_DEC = 36;
    public const int LOR_ASSIGN = 115;
    public const int SR = 134;
    public const int IMPLEMENTS = 64;
    public const int GE = 129;
    public const int LBRACK = 99;
    public const int OCTAL_LITERAL = 152;
    public const int SL = 133;
    public const int PROPERTY_OR_IDENTIFIER = 27;
    public const int SINGLELINE_COMMENT = 50;
    public const int UNICODE_ESC = 173;
    public const int EXTENDS = 62;
    public const int NAMESPACE_DEF = 12;
    public const int FOR_IN = 46;
    public const int NOT_EQUAL = 124;
    public const int MOD_ASSIGN = 105;
    public const int LCURLY = 65;
    public const int UNARY_MINUS = 32;
    public const int LNOT = 144;
    public const int ANNOTATION_ASSIGN = 55;
    public const int ACCESSOR_ROLE = 13;
    public const int E4X_ATTRI = 162;
    public const int MULTILINE_COMMENT = 51;
    public const int DEFAULT = 85;
    public const int STATIC = 101;
    public const int ML_COMMENT = 156;
    public const int OCTAL_ESC = 174;
    public const int STRICT_NOT_EQUAL = 123;
    public const int OCT_DIGIT = 171;
    public const int ANNOTATIONS = 8;
    public const int E4X_DESC = 163;
    public const int POST_DEC = 34;
    public const int DECIMAL_LITERAL = 151;
    public const int MOD = 139;
    public const int INTERFACE_DEF = 15;
    public const int MODIFIERS = 11;
    public const int TYPE_SPEC = 18;
    public const int DIV = 138;
    public const int EACH = 160;
    public const int UNARY_PLUS = 31;
    public const int DEFAULT_XML_NAMESPACE = 49;
    public const int LAND_ASSIGN = 114;
    public const int CONDITION = 21;
    public const int ASSIGN = 74;
    public const int NULL = 149;
    public const int PRIVATE = 96;
    public const int DO = 89;
    public const int EOF = -1;
    public const int MINUS = 137;
    public const int SWITCH_STATEMENT_LIST = 47;
    public const int PARAM = 17;
    public const int TYPE_BLOCK = 5;
    public const int VIRTUAL_PLACEHOLDER = 54;
    public const int VAR_INIT = 25;
    public const int INSTANCEOF = 132;
    public const int VOID = 91;
    public const int FUNCTION = 69;
    public const int PROPERTY_ACCESS = 28;
    public const int TYPE_NAME = 29;
    public const int INC = 140;
    public const int RETURN = 79;
    public const int ELSE = 78;
    public const int EQUAL = 125;
    public const int BXOR_ASSIGN = 112;
    public const int CTRLCHAR_ESC = 172;
    public const int BSR_ASSIGN = 110;
    public const int TRUE = 147;
    public const int DBL_COLON = 161;
    public const int IDENTIFIER = 48;
    public const int COMMENT_ENTRY = 53;
    public const int COMMENT_LIST = 52;
    public const int SEMI = 59;
    public const int STRICT_EQUAL = 122;
    public const int PLUS_ASSIGN = 106;
    public const int BSR = 135;
    public const int OBJECT_FIELD = 40;
    public const int ELEMENT = 38;
    public const int NEW = 154;
    public const int DIV_ASSIGN = 104;
    public const int DELETE = 142;
    public const int NL = 169;
    public const int IDENT = 94;
    public const int BAND_ASSIGN = 111;
    public const int AS = 131;
    public const int AS2_COMPILATION_UNIT = 56;
    public const int CASE = 83;
    public const int OBJECT_LITERAL = 39;
    public const int RBRACK = 100;
    public const int LPAREN = 75;
    public const int PLUS = 136;
    public const int CLASS = 60;
    public const int FUNC_DEF = 41;
    public const int ARRAY_ACC = 30;
    public const int BREAK = 81;
    public const int WHILE = 88;
    public const int CONST = 73;
    public const int RCURLY = 66;
    public const int INTERFACE = 61;
    public const int PARAMS = 16;
    public const int FOR_INIT = 42;
    public const int DEC = 141;
    public const int COMMA = 63;
    public const int COMPILATION_UNIT = 4;
    public const int LT = 126;
    public const int FOR_ITERATOR = 44;
    public const int ARGUMENTS = 22;
    public const int LE = 128;
    public const int FOR_CONDITION = 43;
    public const int CLASS_DEF = 14;
    public const int MINUS_ASSIGN = 107;
    public const int ENCPS_EXPR = 24;
    public const int LOR = 117;
    public const int WITH = 90;
    public const int REST = 164;
    public const int INCLUDE_DIRECTIVE = 67;
    public const int BAND = 121;
    public const int STAR_ASSIGN = 103;
    public const int EXPONENT = 167;
    public const int SL_COMMENT = 155;
    public const int VAR = 72;
    public const int WS = 168;
    public const int PACKAGE = 159;
    public const int STAR = 92;
    public const int FOR = 86;
    public const int FALSE = 148;
    public const int IMPORT = 58;
    public const int XML = 158;
    public const int DOT = 93;
    public const int ANNOTATION = 9;
    public const int QUESTION = 116;
    public const int EXPR_STMNT = 23;
    public const int PRE_INC = 35;
    public const int BOR = 119;
    public const int BOM = 170;
    public const int SWITCH = 82;
    public const int CONTINUE = 80;
    public const int ARRAY_LITERAL = 37;
    public const int USE = 157;
    public const int SR_ASSIGN = 109;
    public const int IMETHOD_DEF = 57;
    public const int ANNOTATION_PARAMS = 10;
    public const int HEX_LITERAL = 150;
    public const int IS = 130;
    public const int METHOD_CALL = 26;
    public const int FOR_EACH = 45;
    public const int LAND = 118;
    public const int DYNAMIC = 102;
    public const int IN = 87;
    public const int BXOR = 120;
    public const int METHOD_DEF = 6;
    public const int VAR_DEF = 7;
    public const int IF = 77;
    public const int ELIST = 20;
    public const int TYPEOF = 143;
    public const int FLOAT_LITERAL = 153;
    public const int COLON = 84;
    public const int SET = 71;
    public const int PUBLIC = 95;
    public const int POST_INC = 33;
    public const int ESC = 165;
    public const int BNOT = 145;
    public const int RPAREN = 76;
    public const int PROTECTED = 97;
    protected class InOperator_scope 
    {
        protected internal Boolean allowed;
    }
    protected Stack InOperator_stack = new Stack();

    
    
        public ASParser(ITokenStream input) 
    		: base(input)
    	{
    		InitializeCyclicDFAs();
            ruleMemo = new IDictionary[307+1];
         }
        
    protected ITreeAdaptor adaptor = new CommonTreeAdaptor();
    
    public ITreeAdaptor TreeAdaptor
    {
        get { return this.adaptor; }
        set { this.adaptor = value; }
    }

    override public string[] TokenNames
	{
		get { return tokenNames; }
	}

    override public string GrammarFileName
	{
		get { return "C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g"; }
	}

    
    
    	#region Properties
    
    	private ReformatOptions options = new ReformatOptions();
    	private StringBuilder buffer;
    	private List<string> importList;
    	private int currentTab = 0;
        private String tabString = "\t";
        private String newline = "\n";
        private String tab = "";
        private Regex lineSplitterReg = new Regex("[\n\r]+", RegexOptions.Multiline);
    	private ASLexer lexer;
    	private ICharStream cs;
    	public static int CHANNEL_PLACEHOLDER = 999;
    	
    	
        public ASParser(ITokenStream input, ReformatOptions opt)
            : base(input)
        {
            options = opt;
            InitializeCyclicDFAs();
            ruleMemo = new IDictionary[307 + 1];
        }	
    	
        /// <summary>
        /// Get/Set the Tab Width
        /// </summary>
        public int CurrentTab
        {
            get { return this.currentTab; }
            set
            {
                this.currentTab = value;
                if (this.currentTab < 0) this.currentTab = 0;
                tab = "";
                for (int i = 0; i < currentTab; i++)
                {
                    tab += TabString;
                }
            }
        }
        
        public String TabString
        {
            get { return this.tabString; }
            set { this.tabString = value; }
        } 
        
        public String NewLine
        {
            get { return this.newline; }
            set { this.newline = value; }
        } 
    	
    	#endregion
    
    	#region Members
    
    	public void SetInput(ASLexer lexer, ICharStream cs) 
    	{
    		this.lexer = lexer;
    		this.cs = cs;
    	}
    	
    	public StringBuilder Buffer
    	{
    		get { return this.buffer; }
    	}
    	
        /// <summary>
        /// Return a dot separated identifier
        /// </summary>
        /// <param name="tree"></param>
        /// <returns></returns>
        protected static String fromIdentifier(ITree tree)
        {
            tree = (CommonTree)tree;
            if (tree.Type == ASLexer.IDENT || tree.Type == ASLexer.VOID || tree.Type == ASLexer.STAR) return tree.Text;
            string[] buff = new string[tree.ChildCount];
            for (int i = 0; i < tree.ChildCount; i++)
            {
                buff[i] = tree.GetChild(i).Text;
            }
            return String.Join(".", buff);
        }
        
        /// <summary>
        /// Compute the MODIFIER node and return a string representation
        /// </summary>
        /// <param name="tree"></param>
        /// <returns></returns>
        protected static String fromModifiers(ITree tree)
        {
            tree = (CommonTree)tree;
            List<string> mods = new List<string>();
            for (int i = 0; i < tree.ChildCount; i++)
            {
                mods.Add(tree.GetChild(i).Text);
            }
            mods.Sort();
            return String.Join(" ", mods.ToArray());
        }
        
        /// <summary>
        /// Insert a comment in the passed String builder
        /// </summary>
        /// <param name="tree"></param>    
                private void insertComment(ParserRuleReturnScope rule)
                {
            		CommonTree tree;
            		CommonTree comment;
            		
            		if(rule != null)
            		{
            			tree = (CommonTree)rule.Tree;   // COMMENT_LIST
            			for(int i = 0; i < tree.ChildCount; i++)
            			{
            				comment = (CommonTree)tree.GetChild(i); // COMMENT_ENTRY
            				if(comment.GetChild(0).Type == ASLexer.MULTILINE_COMMENT)
            				{
            					string[] lines = lineSplitterReg.Split(comment.GetChild(0).GetChild(0).Text);
            					Debug.WriteLine("total lines: " + lines.Length);
            					int k = 0;
            					foreach (string line in lines)
            					{
            						Debug.WriteLine(k + ": " + line);
            						buffer.Append((k > 0 ? " " : "") + line.Trim() + (k < lines.Length-1 ? NewLine + tab : ""));
            						k++;
            					}				
            				} else {
            					buffer.Append(comment.GetChild(0).GetChild(0).Text.TrimEnd());
            				}
                            if(i < tree.ChildCount - 1)
                                buffer.Append(NewLine + tab);
            			}
            		}
                }
        
    	/// <summary>
        /// Remove duplicates from a list of strings
        /// </summary>
        /// <param name="inputList"></param>
        /// <returns>List<string></returns>
    	protected static List<string> removeDuplicates(List<string> inputList)
    	{
    		Dictionary<string, int> uniqueStore = new Dictionary<string, int>();
    		List<string> finalList = new List<string>();
    		foreach (string currValue in inputList)
    		{
    			if (!uniqueStore.ContainsKey(currValue))
    			{
    				uniqueStore.Add(currValue, 0);
    				finalList.Add(currValue);
    			}
    		}
    		return finalList;
    	}
        
        
            
        /// <summay>
        /// Finalize the code generation
        /// </summary>
        /// <returns></returns>
        private void finalize()
        {
            // organize imports
            List<string>  importListUnique = removeDuplicates(importList);
            importListUnique.Sort();
            if(importListUnique.Count > 0)
            {
    			foreach (string item in importListUnique)
    			{
    				buffer.Insert(0, NewLine + "import " + item + ";");
    			}
            }
            
            // newline at the end of file
            buffer.Append(NewLine);
        }
        
        
    	#endregion


    public class compilationUnit_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start compilationUnit
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:307:1: compilationUnit[StringBuilder ret] : as2CompilationUnit -> ^( COMPILATION_UNIT as2CompilationUnit ) ;
    public compilationUnit_return compilationUnit(StringBuilder ret) // throws RecognitionException [1]
    {   
        compilationUnit_return retval = new compilationUnit_return();
        retval.start = input.LT(1);
        int compilationUnit_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        as2CompilationUnit_return as2CompilationUnit1 = null;
        
        
        RewriteRuleSubtreeStream stream_as2CompilationUnit = new RewriteRuleSubtreeStream(adaptor,"rule as2CompilationUnit");
        
        	buffer = ret;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 1) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:314:4: ( as2CompilationUnit -> ^( COMPILATION_UNIT as2CompilationUnit ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:314:4: as2CompilationUnit
            {
            	PushFollow(FOLLOW_as2CompilationUnit_in_compilationUnit437);
            	as2CompilationUnit1 = as2CompilationUnit();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_as2CompilationUnit.Add(as2CompilationUnit1.Tree);
            	
            	// AST REWRITE
            	// elements:          as2CompilationUnit
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 314:23: -> ^( COMPILATION_UNIT as2CompilationUnit )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:314:26: ^( COMPILATION_UNIT as2CompilationUnit )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(COMPILATION_UNIT, "COMPILATION_UNIT"), root_1);
            	    
            	    adaptor.AddChild(root_1, stream_as2CompilationUnit.Next());
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
            if ( backtracking == 0 ) 
            {
              
              	finalize();
            
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 1, compilationUnit_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end compilationUnit

    public class as2CompilationUnit_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start as2CompilationUnit
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:318:1: as2CompilationUnit : ( importDefinition | annotations | c= comments )* as2Type ;
    public as2CompilationUnit_return as2CompilationUnit() // throws RecognitionException [1]
    {   
        as2CompilationUnit_return retval = new as2CompilationUnit_return();
        retval.start = input.LT(1);
        int as2CompilationUnit_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        comments_return c = null;

        importDefinition_return importDefinition2 = null;

        annotations_return annotations3 = null;

        as2Type_return as2Type4 = null;
        
        
    
        
        	importList = new List<string>();
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 2) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:322:4: ( ( importDefinition | annotations | c= comments )* as2Type )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:322:4: ( importDefinition | annotations | c= comments )* as2Type
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:322:4: ( importDefinition | annotations | c= comments )*
            	do 
            	{
            	    int alt1 = 4;
            	    switch ( input.LA(1) ) 
            	    {
            	    case IMPORT:
            	    	{
            	        alt1 = 1;
            	        }
            	        break;
            	    case LBRACK:
            	    case 175:
            	    	{
            	        alt1 = 2;
            	        }
            	        break;
            	    case SL_COMMENT:
            	    case ML_COMMENT:
            	    	{
            	        alt1 = 3;
            	        }
            	        break;
            	    
            	    }
            	
            	    switch (alt1) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:323:4: importDefinition
            			    {
            			    	PushFollow(FOLLOW_importDefinition_in_as2CompilationUnit468);
            			    	importDefinition2 = importDefinition();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) adaptor.AddChild(root_0, importDefinition2.Tree);
            			    
            			    }
            			    break;
            			case 2 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:324:5: annotations
            			    {
            			    	PushFollow(FOLLOW_annotations_in_as2CompilationUnit474);
            			    	annotations3 = annotations();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) adaptor.AddChild(root_0, annotations3.Tree);
            			    
            			    }
            			    break;
            			case 3 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:325:5: c= comments
            			    {
            			    	if ( backtracking == 0 ) 
            			    	{
            			    	   buffer.Append(NewLine + tab + NewLine + tab); 
            			    	}
            			    	PushFollow(FOLLOW_comments_in_as2CompilationUnit484);
            			    	c = comments();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) adaptor.AddChild(root_0, c.Tree);
            			    	if ( backtracking == 0 ) 
            			    	{
            			    	   insertComment(c); 
            			    	}
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop1;
            	    }
            	} while (true);
            	
            	loop1:
            		;	// Stops C# compiler whinging that label 'loop1' has no statements

            	PushFollow(FOLLOW_as2Type_in_as2CompilationUnit495);
            	as2Type4 = as2Type();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, as2Type4.Tree);
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 2, as2CompilationUnit_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end as2CompilationUnit

    public class as2Type_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start as2Type
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:330:1: as2Type : mods= modifiers ( as2ClassDefinition[$mods.tree] | as2InterfaceDefinition[$mods.tree] ) ;
    public as2Type_return as2Type() // throws RecognitionException [1]
    {   
        as2Type_return retval = new as2Type_return();
        retval.start = input.LT(1);
        int as2Type_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        modifiers_return mods = null;

        as2ClassDefinition_return as2ClassDefinition5 = null;

        as2InterfaceDefinition_return as2InterfaceDefinition6 = null;
        
        
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 3) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:331:4: (mods= modifiers ( as2ClassDefinition[$mods.tree] | as2InterfaceDefinition[$mods.tree] ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:331:4: mods= modifiers ( as2ClassDefinition[$mods.tree] | as2InterfaceDefinition[$mods.tree] )
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	PushFollow(FOLLOW_modifiers_in_as2Type508);
            	mods = modifiers();
            	followingStackPointer_--;
            	if (failed) return retval;
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:332:2: ( as2ClassDefinition[$mods.tree] | as2InterfaceDefinition[$mods.tree] )
            	int alt2 = 2;
            	int LA2_0 = input.LA(1);
            	
            	if ( (LA2_0 == CLASS) )
            	{
            	    alt2 = 1;
            	}
            	else if ( (LA2_0 == INTERFACE) )
            	{
            	    alt2 = 2;
            	}
            	else 
            	{
            	    if ( backtracking > 0 ) {failed = true; return retval;}
            	    NoViableAltException nvae_d2s0 =
            	        new NoViableAltException("332:2: ( as2ClassDefinition[$mods.tree] | as2InterfaceDefinition[$mods.tree] )", 2, 0, input);
            	
            	    throw nvae_d2s0;
            	}
            	switch (alt2) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:332:4: as2ClassDefinition[$mods.tree]
            	        {
            	        	PushFollow(FOLLOW_as2ClassDefinition_in_as2Type514);
            	        	as2ClassDefinition5 = as2ClassDefinition(((CommonTree)mods.tree));
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) adaptor.AddChild(root_0, as2ClassDefinition5.Tree);
            	        
            	        }
            	        break;
            	    case 2 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:333:4: as2InterfaceDefinition[$mods.tree]
            	        {
            	        	PushFollow(FOLLOW_as2InterfaceDefinition_in_as2Type520);
            	        	as2InterfaceDefinition6 = as2InterfaceDefinition(((CommonTree)mods.tree));
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) adaptor.AddChild(root_0, as2InterfaceDefinition6.Tree);
            	        
            	        }
            	        break;
            	
            	}

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 3, as2Type_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end as2Type

    public class endOfFile_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start endOfFile
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:338:1: endOfFile : EOF ;
    public endOfFile_return endOfFile() // throws RecognitionException [1]
    {   
        endOfFile_return retval = new endOfFile_return();
        retval.start = input.LT(1);
        int endOfFile_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken EOF7 = null;
        
        CommonTree EOF7_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 4) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:339:4: ( EOF )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:339:4: EOF
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	EOF7 = (CommonToken)input.LT(1);
            	Match(input,EOF,FOLLOW_EOF_in_endOfFile537); if (failed) return retval;
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 4, endOfFile_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end endOfFile

    public class importDefinition_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start importDefinition
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:342:1: importDefinition : IMPORT ide= identifierStar semi ;
    public importDefinition_return importDefinition() // throws RecognitionException [1]
    {   
        importDefinition_return retval = new importDefinition_return();
        retval.start = input.LT(1);
        int importDefinition_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken IMPORT8 = null;
        identifierStar_return ide = null;

        semi_return semi9 = null;
        
        
        CommonTree IMPORT8_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 5) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:343:4: ( IMPORT ide= identifierStar semi )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:343:4: IMPORT ide= identifierStar semi
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	IMPORT8 = (CommonToken)input.LT(1);
            	Match(input,IMPORT,FOLLOW_IMPORT_in_importDefinition549); if (failed) return retval;
            	if ( backtracking==0 ) {
            	IMPORT8_tree = (CommonTree)adaptor.Create(IMPORT8);
            	root_0 = (CommonTree)adaptor.BecomeRoot(IMPORT8_tree, root_0);
            	}
            	PushFollow(FOLLOW_identifierStar_in_importDefinition556);
            	ide = identifierStar();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, ide.Tree);
            	if ( backtracking == 0 ) 
            	{
            	   importList.Add(fromIdentifier((CommonTree)ide.Tree)); 
            	}
            	PushFollow(FOLLOW_semi_in_importDefinition564);
            	semi9 = semi();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, semi9.Tree);
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 5, importDefinition_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end importDefinition

    public class semi_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start semi
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:348:1: semi : ( SEMI | );
    public semi_return semi() // throws RecognitionException [1]
    {   
        semi_return retval = new semi_return();
        retval.start = input.LT(1);
        int semi_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken SEMI10 = null;
        
        CommonTree SEMI10_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 6) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:349:4: ( SEMI | )
            int alt3 = 2;
            int LA3_0 = input.LA(1);
            
            if ( (LA3_0 == SEMI) )
            {
                int LA3_1 = input.LA(2);
                
                if ( (synpred5()) )
                {
                    alt3 = 1;
                }
                else if ( (true) )
                {
                    alt3 = 2;
                }
                else 
                {
                    if ( backtracking > 0 ) {failed = true; return retval;}
                    NoViableAltException nvae_d3s1 =
                        new NoViableAltException("348:1: semi : ( SEMI | );", 3, 1, input);
                
                    throw nvae_d3s1;
                }
            }
            else if ( (LA3_0 == EOF || LA3_0 == IMPORT || (LA3_0 >= CLASS && LA3_0 <= INTERFACE) || (LA3_0 >= LCURLY && LA3_0 <= CONST) || LA3_0 == LPAREN || (LA3_0 >= IF && LA3_0 <= CASE) || (LA3_0 >= DEFAULT && LA3_0 <= FOR) || (LA3_0 >= WHILE && LA3_0 <= VOID) || (LA3_0 >= IDENT && LA3_0 <= LBRACK) || (LA3_0 >= STATIC && LA3_0 <= DYNAMIC) || (LA3_0 >= IS && LA3_0 <= AS) || (LA3_0 >= PLUS && LA3_0 <= MINUS) || (LA3_0 >= INC && LA3_0 <= XML) || (LA3_0 >= 175 && LA3_0 <= 177) || (LA3_0 >= 180 && LA3_0 <= 184)) )
            {
                alt3 = 2;
            }
            else 
            {
                if ( backtracking > 0 ) {failed = true; return retval;}
                NoViableAltException nvae_d3s0 =
                    new NoViableAltException("348:1: semi : ( SEMI | );", 3, 0, input);
            
                throw nvae_d3s0;
            }
            switch (alt3) 
            {
                case 1 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:349:4: SEMI
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	SEMI10 = (CommonToken)input.LT(1);
                    	Match(input,SEMI,FOLLOW_SEMI_in_semi575); if (failed) return retval;
                    
                    }
                    break;
                case 2 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:351:2: 
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    }
                    break;
            
            }
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 6, semi_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end semi

    public class as2ClassDefinition_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start as2ClassDefinition
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:353:1: as2ClassDefinition[CommonTree mods] : cl= CLASS ide= identifier ext= classExtendsClause imp= implementsClause typeBlock -> ^( CLASS_DEF identifier classExtendsClause implementsClause typeBlock ) ;
    public as2ClassDefinition_return as2ClassDefinition(CommonTree mods) // throws RecognitionException [1]
    {   
        as2ClassDefinition_return retval = new as2ClassDefinition_return();
        retval.start = input.LT(1);
        int as2ClassDefinition_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken cl = null;
        identifier_return ide = null;

        classExtendsClause_return ext = null;

        implementsClause_return imp = null;

        typeBlock_return typeBlock11 = null;
        
        
        CommonTree cl_tree=null;
        RewriteRuleTokenStream stream_CLASS = new RewriteRuleTokenStream(adaptor,"token CLASS");
        RewriteRuleSubtreeStream stream_classExtendsClause = new RewriteRuleSubtreeStream(adaptor,"rule classExtendsClause");
        RewriteRuleSubtreeStream stream_implementsClause = new RewriteRuleSubtreeStream(adaptor,"rule implementsClause");
        RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_typeBlock = new RewriteRuleSubtreeStream(adaptor,"rule typeBlock");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 7) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:354:4: (cl= CLASS ide= identifier ext= classExtendsClause imp= implementsClause typeBlock -> ^( CLASS_DEF identifier classExtendsClause implementsClause typeBlock ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:354:4: cl= CLASS ide= identifier ext= classExtendsClause imp= implementsClause typeBlock
            {
            	cl = (CommonToken)input.LT(1);
            	Match(input,CLASS,FOLLOW_CLASS_in_as2ClassDefinition594); if (failed) return retval;
            	if ( backtracking==0 ) stream_CLASS.Add(cl);

            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append(NewLine + tab + cl.Text + " "); 
            	}
            	PushFollow(FOLLOW_identifier_in_as2ClassDefinition606);
            	ide = identifier();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_identifier.Add(ide.Tree);
            	PushFollow(FOLLOW_classExtendsClause_in_as2ClassDefinition612);
            	ext = classExtendsClause();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_classExtendsClause.Add(ext.Tree);
            	PushFollow(FOLLOW_implementsClause_in_as2ClassDefinition619);
            	imp = implementsClause();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_implementsClause.Add(imp.Tree);
            	if ( backtracking == 0 ) 
            	{
            	  
            	  									buffer.Append(options.NewlineAfterMethod ? NewLine + tab : " ");
            	  									buffer.Append("{");
            	  									CurrentTab++; 
            	  								
            	}
            	PushFollow(FOLLOW_typeBlock_in_as2ClassDefinition625);
            	typeBlock11 = typeBlock();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_typeBlock.Add(typeBlock11.Tree);
            	if ( backtracking == 0 ) 
            	{
            	   
            	  									CurrentTab--;
            	  									buffer.Append(NewLine + tab);
            	  									buffer.Append("}");
            	  								
            	}
            	
            	// AST REWRITE
            	// elements:          implementsClause, typeBlock, identifier, classExtendsClause
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 368:3: -> ^( CLASS_DEF identifier classExtendsClause implementsClause typeBlock )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:368:6: ^( CLASS_DEF identifier classExtendsClause implementsClause typeBlock )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(CLASS_DEF, "CLASS_DEF"), root_1);
            	    
            	    adaptor.AddChild(root_1, mods);
            	    adaptor.AddChild(root_1, stream_identifier.Next());
            	    adaptor.AddChild(root_1, stream_classExtendsClause.Next());
            	    adaptor.AddChild(root_1, stream_implementsClause.Next());
            	    adaptor.AddChild(root_1, stream_typeBlock.Next());
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 7, as2ClassDefinition_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end as2ClassDefinition

    public class interfaceDefinition_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start interfaceDefinition
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:372:1: interfaceDefinition[CommonTree mods] : tk= INTERFACE ide= ident interfaceExtendsClause interfaceTypeBlock -> ^( INTERFACE_DEF ident interfaceExtendsClause interfaceTypeBlock ) ;
    public interfaceDefinition_return interfaceDefinition(CommonTree mods) // throws RecognitionException [1]
    {   
        interfaceDefinition_return retval = new interfaceDefinition_return();
        retval.start = input.LT(1);
        int interfaceDefinition_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken tk = null;
        ident_return ide = null;

        interfaceExtendsClause_return interfaceExtendsClause12 = null;

        interfaceTypeBlock_return interfaceTypeBlock13 = null;
        
        
        CommonTree tk_tree=null;
        RewriteRuleTokenStream stream_INTERFACE = new RewriteRuleTokenStream(adaptor,"token INTERFACE");
        RewriteRuleSubtreeStream stream_interfaceTypeBlock = new RewriteRuleSubtreeStream(adaptor,"rule interfaceTypeBlock");
        RewriteRuleSubtreeStream stream_interfaceExtendsClause = new RewriteRuleSubtreeStream(adaptor,"rule interfaceExtendsClause");
        RewriteRuleSubtreeStream stream_ident = new RewriteRuleSubtreeStream(adaptor,"rule ident");
         CommonTree annos = null; 
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 8) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:374:4: (tk= INTERFACE ide= ident interfaceExtendsClause interfaceTypeBlock -> ^( INTERFACE_DEF ident interfaceExtendsClause interfaceTypeBlock ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:374:4: tk= INTERFACE ide= ident interfaceExtendsClause interfaceTypeBlock
            {
            	tk = (CommonToken)input.LT(1);
            	Match(input,INTERFACE,FOLLOW_INTERFACE_in_interfaceDefinition672); if (failed) return retval;
            	if ( backtracking==0 ) stream_INTERFACE.Add(tk);

            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append(NewLine + tab + NewLine + tab + tk.Text + " "); 
            	}
            	PushFollow(FOLLOW_ident_in_interfaceDefinition683);
            	ide = ident();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_ident.Add(ide.Tree);
            	PushFollow(FOLLOW_interfaceExtendsClause_in_interfaceDefinition687);
            	interfaceExtendsClause12 = interfaceExtendsClause();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_interfaceExtendsClause.Add(interfaceExtendsClause12.Tree);
            	if ( backtracking == 0 ) 
            	{
            	  
            	  									buffer.Append(options.NewlineAfterMethod ? NewLine + tab : "");
            	  									buffer.Append("{");
            	  									CurrentTab++; 
            	  								
            	}
            	PushFollow(FOLLOW_interfaceTypeBlock_in_interfaceDefinition693);
            	interfaceTypeBlock13 = interfaceTypeBlock();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_interfaceTypeBlock.Add(interfaceTypeBlock13.Tree);
            	if ( backtracking == 0 ) 
            	{
            	   
            	  									CurrentTab--;
            	  									buffer.Append(NewLine + tab);
            	  									buffer.Append("}");
            	  								
            	}
            	
            	// AST REWRITE
            	// elements:          interfaceTypeBlock, ident, interfaceExtendsClause
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 386:3: -> ^( INTERFACE_DEF ident interfaceExtendsClause interfaceTypeBlock )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:386:6: ^( INTERFACE_DEF ident interfaceExtendsClause interfaceTypeBlock )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(INTERFACE_DEF, "INTERFACE_DEF"), root_1);
            	    
            	    adaptor.AddChild(root_1, mods);
            	    adaptor.AddChild(root_1, stream_ident.Next());
            	    adaptor.AddChild(root_1, stream_interfaceExtendsClause.Next());
            	    adaptor.AddChild(root_1, stream_interfaceTypeBlock.Next());
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 8, interfaceDefinition_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end interfaceDefinition

    public class as2InterfaceDefinition_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start as2InterfaceDefinition
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:389:1: as2InterfaceDefinition[CommonTree mods] : INTERFACE identifier interfaceExtendsClause interfaceTypeBlock -> ^( INTERFACE_DEF identifier interfaceExtendsClause interfaceTypeBlock ) ;
    public as2InterfaceDefinition_return as2InterfaceDefinition(CommonTree mods) // throws RecognitionException [1]
    {   
        as2InterfaceDefinition_return retval = new as2InterfaceDefinition_return();
        retval.start = input.LT(1);
        int as2InterfaceDefinition_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken INTERFACE14 = null;
        identifier_return identifier15 = null;

        interfaceExtendsClause_return interfaceExtendsClause16 = null;

        interfaceTypeBlock_return interfaceTypeBlock17 = null;
        
        
        CommonTree INTERFACE14_tree=null;
        RewriteRuleTokenStream stream_INTERFACE = new RewriteRuleTokenStream(adaptor,"token INTERFACE");
        RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        RewriteRuleSubtreeStream stream_interfaceTypeBlock = new RewriteRuleSubtreeStream(adaptor,"rule interfaceTypeBlock");
        RewriteRuleSubtreeStream stream_interfaceExtendsClause = new RewriteRuleSubtreeStream(adaptor,"rule interfaceExtendsClause");
         CommonTree annos = null; 
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 9) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:391:4: ( INTERFACE identifier interfaceExtendsClause interfaceTypeBlock -> ^( INTERFACE_DEF identifier interfaceExtendsClause interfaceTypeBlock ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:391:4: INTERFACE identifier interfaceExtendsClause interfaceTypeBlock
            {
            	INTERFACE14 = (CommonToken)input.LT(1);
            	Match(input,INTERFACE,FOLLOW_INTERFACE_in_as2InterfaceDefinition729); if (failed) return retval;
            	if ( backtracking==0 ) stream_INTERFACE.Add(INTERFACE14);

            	PushFollow(FOLLOW_identifier_in_as2InterfaceDefinition731);
            	identifier15 = identifier();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_identifier.Add(identifier15.Tree);
            	PushFollow(FOLLOW_interfaceExtendsClause_in_as2InterfaceDefinition735);
            	interfaceExtendsClause16 = interfaceExtendsClause();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_interfaceExtendsClause.Add(interfaceExtendsClause16.Tree);
            	PushFollow(FOLLOW_interfaceTypeBlock_in_as2InterfaceDefinition739);
            	interfaceTypeBlock17 = interfaceTypeBlock();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_interfaceTypeBlock.Add(interfaceTypeBlock17.Tree);
            	
            	// AST REWRITE
            	// elements:          identifier, interfaceTypeBlock, interfaceExtendsClause
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 394:3: -> ^( INTERFACE_DEF identifier interfaceExtendsClause interfaceTypeBlock )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:394:6: ^( INTERFACE_DEF identifier interfaceExtendsClause interfaceTypeBlock )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(INTERFACE_DEF, "INTERFACE_DEF"), root_1);
            	    
            	    adaptor.AddChild(root_1, mods);
            	    adaptor.AddChild(root_1, stream_identifier.Next());
            	    adaptor.AddChild(root_1, stream_interfaceExtendsClause.Next());
            	    adaptor.AddChild(root_1, stream_interfaceTypeBlock.Next());
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 9, as2InterfaceDefinition_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end as2InterfaceDefinition

    public class classExtendsClause_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start classExtendsClause
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:397:1: classExtendsClause : (tk= EXTENDS ide= identifier )? ;
    public classExtendsClause_return classExtendsClause() // throws RecognitionException [1]
    {   
        classExtendsClause_return retval = new classExtendsClause_return();
        retval.start = input.LT(1);
        int classExtendsClause_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken tk = null;
        identifier_return ide = null;
        
        
        CommonTree tk_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 10) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:398:4: ( (tk= EXTENDS ide= identifier )? )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:398:4: (tk= EXTENDS ide= identifier )?
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:398:4: (tk= EXTENDS ide= identifier )?
            	int alt4 = 2;
            	int LA4_0 = input.LA(1);
            	
            	if ( (LA4_0 == EXTENDS) )
            	{
            	    alt4 = 1;
            	}
            	switch (alt4) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:399:4: tk= EXTENDS ide= identifier
            	        {
            	        	tk = (CommonToken)input.LT(1);
            	        	Match(input,EXTENDS,FOLLOW_EXTENDS_in_classExtendsClause773); if (failed) return retval;
            	        	if ( backtracking==0 ) {
            	        	tk_tree = (CommonTree)adaptor.Create(tk);
            	        	root_0 = (CommonTree)adaptor.BecomeRoot(tk_tree, root_0);
            	        	}
            	        	if ( backtracking == 0 ) 
            	        	{
            	        	   buffer.Append(" " + tk.Text + " "); 
            	        	}
            	        	PushFollow(FOLLOW_identifier_in_classExtendsClause785);
            	        	ide = identifier();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) adaptor.AddChild(root_0, ide.Tree);
            	        
            	        }
            	        break;
            	
            	}

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 10, classExtendsClause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end classExtendsClause

    public class interfaceExtendsClause_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start interfaceExtendsClause
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:403:1: interfaceExtendsClause : (tk= EXTENDS ide= identifier ( COMMA ide2= identifier )* )? ;
    public interfaceExtendsClause_return interfaceExtendsClause() // throws RecognitionException [1]
    {   
        interfaceExtendsClause_return retval = new interfaceExtendsClause_return();
        retval.start = input.LT(1);
        int interfaceExtendsClause_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken tk = null;
        CommonToken COMMA18 = null;
        identifier_return ide = null;

        identifier_return ide2 = null;
        
        
        CommonTree tk_tree=null;
        CommonTree COMMA18_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 11) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:404:4: ( (tk= EXTENDS ide= identifier ( COMMA ide2= identifier )* )? )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:404:4: (tk= EXTENDS ide= identifier ( COMMA ide2= identifier )* )?
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:404:4: (tk= EXTENDS ide= identifier ( COMMA ide2= identifier )* )?
            	int alt6 = 2;
            	int LA6_0 = input.LA(1);
            	
            	if ( (LA6_0 == EXTENDS) )
            	{
            	    alt6 = 1;
            	}
            	switch (alt6) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:405:4: tk= EXTENDS ide= identifier ( COMMA ide2= identifier )*
            	        {
            	        	tk = (CommonToken)input.LT(1);
            	        	Match(input,EXTENDS,FOLLOW_EXTENDS_in_interfaceExtendsClause808); if (failed) return retval;
            	        	if ( backtracking==0 ) {
            	        	tk_tree = (CommonTree)adaptor.Create(tk);
            	        	root_0 = (CommonTree)adaptor.BecomeRoot(tk_tree, root_0);
            	        	}
            	        	if ( backtracking == 0 ) 
            	        	{
            	        	   buffer.Append(tk.Text + " "); 
            	        	}
            	        	PushFollow(FOLLOW_identifier_in_interfaceExtendsClause820);
            	        	ide = identifier();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) adaptor.AddChild(root_0, ide.Tree);
            	        	if ( backtracking == 0 ) 
            	        	{
            	        	   buffer.Append(" "); 
            	        	}
            	        	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:407:4: ( COMMA ide2= identifier )*
            	        	do 
            	        	{
            	        	    int alt5 = 2;
            	        	    int LA5_0 = input.LA(1);
            	        	    
            	        	    if ( (LA5_0 == COMMA) )
            	        	    {
            	        	        alt5 = 1;
            	        	    }
            	        	    
            	        	
            	        	    switch (alt5) 
            	        		{
            	        			case 1 :
            	        			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:408:5: COMMA ide2= identifier
            	        			    {
            	        			    	COMMA18 = (CommonToken)input.LT(1);
            	        			    	Match(input,COMMA,FOLLOW_COMMA_in_interfaceExtendsClause834); if (failed) return retval;
            	        			    	if ( backtracking == 0 ) 
            	        			    	{
            	        			    	   buffer.Append(", "); 
            	        			    	}
            	        			    	PushFollow(FOLLOW_identifier_in_interfaceExtendsClause848);
            	        			    	ide2 = identifier();
            	        			    	followingStackPointer_--;
            	        			    	if (failed) return retval;
            	        			    	if ( backtracking==0 ) adaptor.AddChild(root_0, ide2.Tree);
            	        			    	if ( backtracking == 0 ) 
            	        			    	{
            	        			    	   buffer.Append(" "); 
            	        			    	}
            	        			    
            	        			    }
            	        			    break;
            	        	
            	        			default:
            	        			    goto loop5;
            	        	    }
            	        	} while (true);
            	        	
            	        	loop5:
            	        		;	// Stops C# compiler whinging that label 'loop5' has no statements

            	        
            	        }
            	        break;
            	
            	}

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 11, interfaceExtendsClause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end interfaceExtendsClause

    public class implementsClause_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start implementsClause
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:414:1: implementsClause : ( IMPLEMENTS ide= identifier ( COMMA ide= identifier )* )? ;
    public implementsClause_return implementsClause() // throws RecognitionException [1]
    {   
        implementsClause_return retval = new implementsClause_return();
        retval.start = input.LT(1);
        int implementsClause_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken IMPLEMENTS19 = null;
        CommonToken COMMA20 = null;
        identifier_return ide = null;
        
        
        CommonTree IMPLEMENTS19_tree=null;
        CommonTree COMMA20_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 12) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:415:4: ( ( IMPLEMENTS ide= identifier ( COMMA ide= identifier )* )? )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:415:4: ( IMPLEMENTS ide= identifier ( COMMA ide= identifier )* )?
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:415:4: ( IMPLEMENTS ide= identifier ( COMMA ide= identifier )* )?
            	int alt8 = 2;
            	int LA8_0 = input.LA(1);
            	
            	if ( (LA8_0 == IMPLEMENTS) )
            	{
            	    alt8 = 1;
            	}
            	switch (alt8) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:415:5: IMPLEMENTS ide= identifier ( COMMA ide= identifier )*
            	        {
            	        	IMPLEMENTS19 = (CommonToken)input.LT(1);
            	        	Match(input,IMPLEMENTS,FOLLOW_IMPLEMENTS_in_implementsClause875); if (failed) return retval;
            	        	if ( backtracking==0 ) {
            	        	IMPLEMENTS19_tree = (CommonTree)adaptor.Create(IMPLEMENTS19);
            	        	root_0 = (CommonTree)adaptor.BecomeRoot(IMPLEMENTS19_tree, root_0);
            	        	}
            	        	if ( backtracking == 0 ) 
            	        	{
            	        	   buffer.Append(" implements "); 
            	        	}
            	        	PushFollow(FOLLOW_identifier_in_implementsClause886);
            	        	ide = identifier();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) adaptor.AddChild(root_0, ide.Tree);
            	        	if ( backtracking == 0 ) 
            	        	{
            	        	   
            	        	}
            	        	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:417:4: ( COMMA ide= identifier )*
            	        	do 
            	        	{
            	        	    int alt7 = 2;
            	        	    int LA7_0 = input.LA(1);
            	        	    
            	        	    if ( (LA7_0 == COMMA) )
            	        	    {
            	        	        alt7 = 1;
            	        	    }
            	        	    
            	        	
            	        	    switch (alt7) 
            	        		{
            	        			case 1 :
            	        			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:418:5: COMMA ide= identifier
            	        			    {
            	        			    	COMMA20 = (CommonToken)input.LT(1);
            	        			    	Match(input,COMMA,FOLLOW_COMMA_in_implementsClause900); if (failed) return retval;
            	        			    	if ( backtracking == 0 ) 
            	        			    	{
            	        			    	   buffer.Append(", "); 
            	        			    	}
            	        			    	PushFollow(FOLLOW_identifier_in_implementsClause913);
            	        			    	ide = identifier();
            	        			    	followingStackPointer_--;
            	        			    	if (failed) return retval;
            	        			    	if ( backtracking==0 ) adaptor.AddChild(root_0, ide.Tree);
            	        			    	if ( backtracking == 0 ) 
            	        			    	{
            	        			    	    
            	        			    	}
            	        			    
            	        			    }
            	        			    break;
            	        	
            	        			default:
            	        			    goto loop7;
            	        	    }
            	        	} while (true);
            	        	
            	        	loop7:
            	        		;	// Stops C# compiler whinging that label 'loop7' has no statements

            	        
            	        }
            	        break;
            	
            	}

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 12, implementsClause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end implementsClause

    public class interfaceTypeBlock_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start interfaceTypeBlock
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:424:1: interfaceTypeBlock : LCURLY ( interfaceTypeBlockEntry )* RCURLY -> ^( TYPE_BLOCK ( interfaceTypeBlockEntry )* ) ;
    public interfaceTypeBlock_return interfaceTypeBlock() // throws RecognitionException [1]
    {   
        interfaceTypeBlock_return retval = new interfaceTypeBlock_return();
        retval.start = input.LT(1);
        int interfaceTypeBlock_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken LCURLY21 = null;
        CommonToken RCURLY23 = null;
        interfaceTypeBlockEntry_return interfaceTypeBlockEntry22 = null;
        
        
        CommonTree LCURLY21_tree=null;
        CommonTree RCURLY23_tree=null;
        RewriteRuleTokenStream stream_LCURLY = new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY = new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_interfaceTypeBlockEntry = new RewriteRuleSubtreeStream(adaptor,"rule interfaceTypeBlockEntry");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 13) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:425:4: ( LCURLY ( interfaceTypeBlockEntry )* RCURLY -> ^( TYPE_BLOCK ( interfaceTypeBlockEntry )* ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:425:4: LCURLY ( interfaceTypeBlockEntry )* RCURLY
            {
            	LCURLY21 = (CommonToken)input.LT(1);
            	Match(input,LCURLY,FOLLOW_LCURLY_in_interfaceTypeBlock939); if (failed) return retval;
            	if ( backtracking==0 ) stream_LCURLY.Add(LCURLY21);

            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:426:3: ( interfaceTypeBlockEntry )*
            	do 
            	{
            	    int alt9 = 2;
            	    int LA9_0 = input.LA(1);
            	    
            	    if ( (LA9_0 == IMPORT || LA9_0 == INCLUDE_DIRECTIVE || LA9_0 == FUNCTION || (LA9_0 >= IDENT && LA9_0 <= LBRACK) || (LA9_0 >= STATIC && LA9_0 <= DYNAMIC) || LA9_0 == 175 || (LA9_0 >= 180 && LA9_0 <= 184)) )
            	    {
            	        alt9 = 1;
            	    }
            	    
            	
            	    switch (alt9) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:426:4: interfaceTypeBlockEntry
            			    {
            			    	PushFollow(FOLLOW_interfaceTypeBlockEntry_in_interfaceTypeBlock944);
            			    	interfaceTypeBlockEntry22 = interfaceTypeBlockEntry();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) stream_interfaceTypeBlockEntry.Add(interfaceTypeBlockEntry22.Tree);
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop9;
            	    }
            	} while (true);
            	
            	loop9:
            		;	// Stops C# compiler whinging that label 'loop9' has no statements

            	RCURLY23 = (CommonToken)input.LT(1);
            	Match(input,RCURLY,FOLLOW_RCURLY_in_interfaceTypeBlock950); if (failed) return retval;
            	if ( backtracking==0 ) stream_RCURLY.Add(RCURLY23);

            	
            	// AST REWRITE
            	// elements:          interfaceTypeBlockEntry
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 428:3: -> ^( TYPE_BLOCK ( interfaceTypeBlockEntry )* )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:428:6: ^( TYPE_BLOCK ( interfaceTypeBlockEntry )* )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(TYPE_BLOCK, "TYPE_BLOCK"), root_1);
            	    
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:428:19: ( interfaceTypeBlockEntry )*
            	    while ( stream_interfaceTypeBlockEntry.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_interfaceTypeBlockEntry.Next());
            	    
            	    }
            	    stream_interfaceTypeBlockEntry.Reset();
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 13, interfaceTypeBlock_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end interfaceTypeBlock

    public class typeBlock_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start typeBlock
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:431:1: typeBlock : LCURLY ( typeBlockEntry )* RCURLY -> ^( TYPE_BLOCK ( typeBlockEntry )* ) ;
    public typeBlock_return typeBlock() // throws RecognitionException [1]
    {   
        typeBlock_return retval = new typeBlock_return();
        retval.start = input.LT(1);
        int typeBlock_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken LCURLY24 = null;
        CommonToken RCURLY26 = null;
        typeBlockEntry_return typeBlockEntry25 = null;
        
        
        CommonTree LCURLY24_tree=null;
        CommonTree RCURLY26_tree=null;
        RewriteRuleTokenStream stream_LCURLY = new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY = new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_typeBlockEntry = new RewriteRuleSubtreeStream(adaptor,"rule typeBlockEntry");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 14) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:432:4: ( LCURLY ( typeBlockEntry )* RCURLY -> ^( TYPE_BLOCK ( typeBlockEntry )* ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:432:4: LCURLY ( typeBlockEntry )* RCURLY
            {
            	LCURLY24 = (CommonToken)input.LT(1);
            	Match(input,LCURLY,FOLLOW_LCURLY_in_typeBlock973); if (failed) return retval;
            	if ( backtracking==0 ) stream_LCURLY.Add(LCURLY24);

            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:433:3: ( typeBlockEntry )*
            	do 
            	{
            	    int alt10 = 2;
            	    int LA10_0 = input.LA(1);
            	    
            	    if ( (LA10_0 == IMPORT || LA10_0 == INCLUDE_DIRECTIVE || LA10_0 == FUNCTION || (LA10_0 >= VAR && LA10_0 <= CONST) || (LA10_0 >= IDENT && LA10_0 <= LBRACK) || (LA10_0 >= STATIC && LA10_0 <= DYNAMIC) || (LA10_0 >= SL_COMMENT && LA10_0 <= ML_COMMENT) || LA10_0 == 175 || (LA10_0 >= 180 && LA10_0 <= 184)) )
            	    {
            	        alt10 = 1;
            	    }
            	    
            	
            	    switch (alt10) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:433:4: typeBlockEntry
            			    {
            			    	PushFollow(FOLLOW_typeBlockEntry_in_typeBlock978);
            			    	typeBlockEntry25 = typeBlockEntry();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) stream_typeBlockEntry.Add(typeBlockEntry25.Tree);
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop10;
            	    }
            	} while (true);
            	
            	loop10:
            		;	// Stops C# compiler whinging that label 'loop10' has no statements

            	RCURLY26 = (CommonToken)input.LT(1);
            	Match(input,RCURLY,FOLLOW_RCURLY_in_typeBlock984); if (failed) return retval;
            	if ( backtracking==0 ) stream_RCURLY.Add(RCURLY26);

            	
            	// AST REWRITE
            	// elements:          typeBlockEntry
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 435:3: -> ^( TYPE_BLOCK ( typeBlockEntry )* )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:435:6: ^( TYPE_BLOCK ( typeBlockEntry )* )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(TYPE_BLOCK, "TYPE_BLOCK"), root_1);
            	    
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:435:19: ( typeBlockEntry )*
            	    while ( stream_typeBlockEntry.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_typeBlockEntry.Next());
            	    
            	    }
            	    stream_typeBlockEntry.Reset();
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 14, typeBlock_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end typeBlock

    public class interfaceTypeBlockEntry_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start interfaceTypeBlockEntry
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:438:1: interfaceTypeBlockEntry : (m= modifiers ( interfaceMethodDefinition[$m.tree] ) | importDefinition | as2IncludeDirective | annotations );
    public interfaceTypeBlockEntry_return interfaceTypeBlockEntry() // throws RecognitionException [1]
    {   
        interfaceTypeBlockEntry_return retval = new interfaceTypeBlockEntry_return();
        retval.start = input.LT(1);
        int interfaceTypeBlockEntry_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        modifiers_return m = null;

        interfaceMethodDefinition_return interfaceMethodDefinition27 = null;

        importDefinition_return importDefinition28 = null;

        as2IncludeDirective_return as2IncludeDirective29 = null;

        annotations_return annotations30 = null;
        
        
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 15) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:439:4: (m= modifiers ( interfaceMethodDefinition[$m.tree] ) | importDefinition | as2IncludeDirective | annotations )
            int alt11 = 4;
            switch ( input.LA(1) ) 
            {
            case FUNCTION:
            case IDENT:
            case PUBLIC:
            case PRIVATE:
            case PROTECTED:
            case INTERNAL:
            case STATIC:
            case DYNAMIC:
            case 180:
            case 181:
            case 182:
            case 183:
            case 184:
            	{
                alt11 = 1;
                }
                break;
            case IMPORT:
            	{
                alt11 = 2;
                }
                break;
            case INCLUDE_DIRECTIVE:
            	{
                alt11 = 3;
                }
                break;
            case LBRACK:
            case 175:
            	{
                alt11 = 4;
                }
                break;
            	default:
            	    if ( backtracking > 0 ) {failed = true; return retval;}
            	    NoViableAltException nvae_d11s0 =
            	        new NoViableAltException("438:1: interfaceTypeBlockEntry : (m= modifiers ( interfaceMethodDefinition[$m.tree] ) | importDefinition | as2IncludeDirective | annotations );", 11, 0, input);
            
            	    throw nvae_d11s0;
            }
            
            switch (alt11) 
            {
                case 1 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:439:4: m= modifiers ( interfaceMethodDefinition[$m.tree] )
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(NewLine + tab); 
                    	}
                    	PushFollow(FOLLOW_modifiers_in_interfaceTypeBlockEntry1012);
                    	m = modifiers();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:441:3: ( interfaceMethodDefinition[$m.tree] )
                    	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:442:4: interfaceMethodDefinition[$m.tree]
                    	{
                    		PushFollow(FOLLOW_interfaceMethodDefinition_in_interfaceTypeBlockEntry1023);
                    		interfaceMethodDefinition27 = interfaceMethodDefinition(((CommonTree)m.tree));
                    		followingStackPointer_--;
                    		if (failed) return retval;
                    		if ( backtracking==0 ) adaptor.AddChild(root_0, interfaceMethodDefinition27.Tree);
                    	
                    	}

                    
                    }
                    break;
                case 2 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:444:4: importDefinition
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_importDefinition_in_interfaceTypeBlockEntry1033);
                    	importDefinition28 = importDefinition();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, importDefinition28.Tree);
                    
                    }
                    break;
                case 3 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:445:4: as2IncludeDirective
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(NewLine + tab); 
                    	}
                    	PushFollow(FOLLOW_as2IncludeDirective_in_interfaceTypeBlockEntry1040);
                    	as2IncludeDirective29 = as2IncludeDirective();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, as2IncludeDirective29.Tree);
                    
                    }
                    break;
                case 4 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:446:4: annotations
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(NewLine + tab); 
                    	}
                    	PushFollow(FOLLOW_annotations_in_interfaceTypeBlockEntry1047);
                    	annotations30 = annotations();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, annotations30.Tree);
                    
                    }
                    break;
            
            }
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 15, interfaceTypeBlockEntry_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end interfaceTypeBlockEntry

    public class typeBlockEntry_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start typeBlockEntry
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:449:1: typeBlockEntry : (m= modifiers ( variableDefinition[$m.tree] | methodDefinition[$m.tree] ) | importDefinition | as2IncludeDirective | annotations | c= comments );
    public typeBlockEntry_return typeBlockEntry() // throws RecognitionException [1]
    {   
        typeBlockEntry_return retval = new typeBlockEntry_return();
        retval.start = input.LT(1);
        int typeBlockEntry_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        modifiers_return m = null;

        comments_return c = null;

        variableDefinition_return variableDefinition31 = null;

        methodDefinition_return methodDefinition32 = null;

        importDefinition_return importDefinition33 = null;

        as2IncludeDirective_return as2IncludeDirective34 = null;

        annotations_return annotations35 = null;
        
        
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 16) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:450:4: (m= modifiers ( variableDefinition[$m.tree] | methodDefinition[$m.tree] ) | importDefinition | as2IncludeDirective | annotations | c= comments )
            int alt13 = 5;
            switch ( input.LA(1) ) 
            {
            case FUNCTION:
            case VAR:
            case CONST:
            case IDENT:
            case PUBLIC:
            case PRIVATE:
            case PROTECTED:
            case INTERNAL:
            case STATIC:
            case DYNAMIC:
            case 180:
            case 181:
            case 182:
            case 183:
            case 184:
            	{
                alt13 = 1;
                }
                break;
            case IMPORT:
            	{
                alt13 = 2;
                }
                break;
            case INCLUDE_DIRECTIVE:
            	{
                alt13 = 3;
                }
                break;
            case LBRACK:
            case 175:
            	{
                alt13 = 4;
                }
                break;
            case SL_COMMENT:
            case ML_COMMENT:
            	{
                alt13 = 5;
                }
                break;
            	default:
            	    if ( backtracking > 0 ) {failed = true; return retval;}
            	    NoViableAltException nvae_d13s0 =
            	        new NoViableAltException("449:1: typeBlockEntry : (m= modifiers ( variableDefinition[$m.tree] | methodDefinition[$m.tree] ) | importDefinition | as2IncludeDirective | annotations | c= comments );", 13, 0, input);
            
            	    throw nvae_d13s0;
            }
            
            switch (alt13) 
            {
                case 1 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:450:4: m= modifiers ( variableDefinition[$m.tree] | methodDefinition[$m.tree] )
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(NewLine + tab); 
                    	}
                    	PushFollow(FOLLOW_modifiers_in_typeBlockEntry1064);
                    	m = modifiers();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:452:3: ( variableDefinition[$m.tree] | methodDefinition[$m.tree] )
                    	int alt12 = 2;
                    	int LA12_0 = input.LA(1);
                    	
                    	if ( ((LA12_0 >= VAR && LA12_0 <= CONST)) )
                    	{
                    	    alt12 = 1;
                    	}
                    	else if ( (LA12_0 == FUNCTION) )
                    	{
                    	    alt12 = 2;
                    	}
                    	else 
                    	{
                    	    if ( backtracking > 0 ) {failed = true; return retval;}
                    	    NoViableAltException nvae_d12s0 =
                    	        new NoViableAltException("452:3: ( variableDefinition[$m.tree] | methodDefinition[$m.tree] )", 12, 0, input);
                    	
                    	    throw nvae_d12s0;
                    	}
                    	switch (alt12) 
                    	{
                    	    case 1 :
                    	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:452:5: variableDefinition[$m.tree]
                    	        {
                    	        	PushFollow(FOLLOW_variableDefinition_in_typeBlockEntry1071);
                    	        	variableDefinition31 = variableDefinition(((CommonTree)m.tree));
                    	        	followingStackPointer_--;
                    	        	if (failed) return retval;
                    	        	if ( backtracking==0 ) adaptor.AddChild(root_0, variableDefinition31.Tree);
                    	        	if ( backtracking == 0 ) 
                    	        	{
                    	        	   buffer.Append(";"); 
                    	        	}
                    	        
                    	        }
                    	        break;
                    	    case 2 :
                    	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:453:5: methodDefinition[$m.tree]
                    	        {
                    	        	PushFollow(FOLLOW_methodDefinition_in_typeBlockEntry1081);
                    	        	methodDefinition32 = methodDefinition(((CommonTree)m.tree));
                    	        	followingStackPointer_--;
                    	        	if (failed) return retval;
                    	        	if ( backtracking==0 ) adaptor.AddChild(root_0, methodDefinition32.Tree);
                    	        
                    	        }
                    	        break;
                    	
                    	}

                    
                    }
                    break;
                case 2 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:455:4: importDefinition
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_importDefinition_in_typeBlockEntry1091);
                    	importDefinition33 = importDefinition();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, importDefinition33.Tree);
                    
                    }
                    break;
                case 3 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:456:4: as2IncludeDirective
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(NewLine + tab); 
                    	}
                    	PushFollow(FOLLOW_as2IncludeDirective_in_typeBlockEntry1098);
                    	as2IncludeDirective34 = as2IncludeDirective();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, as2IncludeDirective34.Tree);
                    
                    }
                    break;
                case 4 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:457:4: annotations
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(NewLine + tab); 
                    	}
                    	PushFollow(FOLLOW_annotations_in_typeBlockEntry1105);
                    	annotations35 = annotations();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, annotations35.Tree);
                    
                    }
                    break;
                case 5 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:458:4: c= comments
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(NewLine + tab + NewLine + tab); 
                    	}
                    	PushFollow(FOLLOW_comments_in_typeBlockEntry1114);
                    	c = comments();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, c.Tree);
                    	if ( backtracking == 0 ) 
                    	{
                    	   insertComment(c); 
                    	}
                    
                    }
                    break;
            
            }
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 16, typeBlockEntry_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end typeBlockEntry

    public class as2IncludeDirective_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start as2IncludeDirective
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:461:1: as2IncludeDirective : INCLUDE_DIRECTIVE st= STRING_LITERAL -> ^( INCLUDE_DIRECTIVE STRING_LITERAL ) ;
    public as2IncludeDirective_return as2IncludeDirective() // throws RecognitionException [1]
    {   
        as2IncludeDirective_return retval = new as2IncludeDirective_return();
        retval.start = input.LT(1);
        int as2IncludeDirective_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken st = null;
        CommonToken INCLUDE_DIRECTIVE36 = null;
        
        CommonTree st_tree=null;
        CommonTree INCLUDE_DIRECTIVE36_tree=null;
        RewriteRuleTokenStream stream_INCLUDE_DIRECTIVE = new RewriteRuleTokenStream(adaptor,"token INCLUDE_DIRECTIVE");
        RewriteRuleTokenStream stream_STRING_LITERAL = new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 17) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:462:4: ( INCLUDE_DIRECTIVE st= STRING_LITERAL -> ^( INCLUDE_DIRECTIVE STRING_LITERAL ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:462:4: INCLUDE_DIRECTIVE st= STRING_LITERAL
            {
            	INCLUDE_DIRECTIVE36 = (CommonToken)input.LT(1);
            	Match(input,INCLUDE_DIRECTIVE,FOLLOW_INCLUDE_DIRECTIVE_in_as2IncludeDirective1127); if (failed) return retval;
            	if ( backtracking==0 ) stream_INCLUDE_DIRECTIVE.Add(INCLUDE_DIRECTIVE36);

            	st = (CommonToken)input.LT(1);
            	Match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_as2IncludeDirective1131); if (failed) return retval;
            	if ( backtracking==0 ) stream_STRING_LITERAL.Add(st);

            	if ( backtracking == 0 ) 
            	{
            	  	buffer.Append("#include " + ((CommonToken)st).Text); 
            	}
            	
            	// AST REWRITE
            	// elements:          STRING_LITERAL, INCLUDE_DIRECTIVE
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 463:3: -> ^( INCLUDE_DIRECTIVE STRING_LITERAL )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:463:6: ^( INCLUDE_DIRECTIVE STRING_LITERAL )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_INCLUDE_DIRECTIVE.Next(), root_1);
            	    
            	    adaptor.AddChild(root_1, stream_STRING_LITERAL.Next());
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 17, as2IncludeDirective_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end as2IncludeDirective

    public class includeDirective_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start includeDirective
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:466:1: includeDirective : 'include' STRING_LITERAL semi ;
    public includeDirective_return includeDirective() // throws RecognitionException [1]
    {   
        includeDirective_return retval = new includeDirective_return();
        retval.start = input.LT(1);
        int includeDirective_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken string_literal37 = null;
        CommonToken STRING_LITERAL38 = null;
        semi_return semi39 = null;
        
        
        CommonTree string_literal37_tree=null;
        CommonTree STRING_LITERAL38_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 18) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:467:4: ( 'include' STRING_LITERAL semi )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:467:4: 'include' STRING_LITERAL semi
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	string_literal37 = (CommonToken)input.LT(1);
            	Match(input,175,FOLLOW_175_in_includeDirective1154); if (failed) return retval;
            	if ( backtracking==0 ) {
            	string_literal37_tree = (CommonTree)adaptor.Create(string_literal37);
            	adaptor.AddChild(root_0, string_literal37_tree);
            	}
            	STRING_LITERAL38 = (CommonToken)input.LT(1);
            	Match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_includeDirective1156); if (failed) return retval;
            	if ( backtracking==0 ) {
            	STRING_LITERAL38_tree = (CommonTree)adaptor.Create(STRING_LITERAL38);
            	adaptor.AddChild(root_0, STRING_LITERAL38_tree);
            	}
            	PushFollow(FOLLOW_semi_in_includeDirective1158);
            	semi39 = semi();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, semi39.Tree);
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 18, includeDirective_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end includeDirective

    public class interfaceMethodDefinition_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start interfaceMethodDefinition
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:470:1: interfaceMethodDefinition[CommonTree mods] : FUNCTION r= optionalAccessorRole ide= ident parameterDeclarationList (type_exp= typeExpression )? ( semi ) -> ^( IMETHOD_DEF optionalAccessorRole ident parameterDeclarationList ( typeExpression )? ) ;
    public interfaceMethodDefinition_return interfaceMethodDefinition(CommonTree mods) // throws RecognitionException [1]
    {   
        interfaceMethodDefinition_return retval = new interfaceMethodDefinition_return();
        retval.start = input.LT(1);
        int interfaceMethodDefinition_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken FUNCTION40 = null;
        optionalAccessorRole_return r = null;

        ident_return ide = null;

        typeExpression_return type_exp = null;

        parameterDeclarationList_return parameterDeclarationList41 = null;

        semi_return semi42 = null;
        
        
        CommonTree FUNCTION40_tree=null;
        RewriteRuleTokenStream stream_FUNCTION = new RewriteRuleTokenStream(adaptor,"token FUNCTION");
        RewriteRuleSubtreeStream stream_optionalAccessorRole = new RewriteRuleSubtreeStream(adaptor,"rule optionalAccessorRole");
        RewriteRuleSubtreeStream stream_semi = new RewriteRuleSubtreeStream(adaptor,"rule semi");
        RewriteRuleSubtreeStream stream_parameterDeclarationList = new RewriteRuleSubtreeStream(adaptor,"rule parameterDeclarationList");
        RewriteRuleSubtreeStream stream_ident = new RewriteRuleSubtreeStream(adaptor,"rule ident");
        RewriteRuleSubtreeStream stream_typeExpression = new RewriteRuleSubtreeStream(adaptor,"rule typeExpression");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 19) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:471:4: ( FUNCTION r= optionalAccessorRole ide= ident parameterDeclarationList (type_exp= typeExpression )? ( semi ) -> ^( IMETHOD_DEF optionalAccessorRole ident parameterDeclarationList ( typeExpression )? ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:471:4: FUNCTION r= optionalAccessorRole ide= ident parameterDeclarationList (type_exp= typeExpression )? ( semi )
            {
            	FUNCTION40 = (CommonToken)input.LT(1);
            	Match(input,FUNCTION,FOLLOW_FUNCTION_in_interfaceMethodDefinition1170); if (failed) return retval;
            	if ( backtracking==0 ) stream_FUNCTION.Add(FUNCTION40);

            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append("function "); 
            	}
            	PushFollow(FOLLOW_optionalAccessorRole_in_interfaceMethodDefinition1182);
            	r = optionalAccessorRole();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_optionalAccessorRole.Add(r.Tree);
            	PushFollow(FOLLOW_ident_in_interfaceMethodDefinition1188);
            	ide = ident();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_ident.Add(ide.Tree);
            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append(((CommonTree)ide.Tree).Text); 
            	}
            	PushFollow(FOLLOW_parameterDeclarationList_in_interfaceMethodDefinition1198);
            	parameterDeclarationList41 = parameterDeclarationList();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_parameterDeclarationList.Add(parameterDeclarationList41.Tree);
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:475:11: (type_exp= typeExpression )?
            	int alt14 = 2;
            	int LA14_0 = input.LA(1);
            	
            	if ( (LA14_0 == COLON) )
            	{
            	    alt14 = 1;
            	}
            	switch (alt14) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:0:0: type_exp= typeExpression
            	        {
            	        	PushFollow(FOLLOW_typeExpression_in_interfaceMethodDefinition1204);
            	        	type_exp = typeExpression();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) stream_typeExpression.Add(type_exp.Tree);
            	        
            	        }
            	        break;
            	
            	}

            	if ( backtracking == 0 ) 
            	{
            	  
            	  										if(options.NewlineAfterMethod) buffer.Append(NewLine + tab);
            	  										buffer.Append("{");
            	  										CurrentTab++;
            	  									
            	}
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:480:3: ( semi )
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:480:4: semi
            	{
            		PushFollow(FOLLOW_semi_in_interfaceMethodDefinition1212);
            		semi42 = semi();
            		followingStackPointer_--;
            		if (failed) return retval;
            		if ( backtracking==0 ) stream_semi.Add(semi42.Tree);
            	
            	}

            	
            	// AST REWRITE
            	// elements:          typeExpression, parameterDeclarationList, ident, optionalAccessorRole
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 481:3: -> ^( IMETHOD_DEF optionalAccessorRole ident parameterDeclarationList ( typeExpression )? )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:481:6: ^( IMETHOD_DEF optionalAccessorRole ident parameterDeclarationList ( typeExpression )? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(IMETHOD_DEF, "IMETHOD_DEF"), root_1);
            	    
            	    adaptor.AddChild(root_1, mods);
            	    adaptor.AddChild(root_1, stream_optionalAccessorRole.Next());
            	    adaptor.AddChild(root_1, stream_ident.Next());
            	    adaptor.AddChild(root_1, stream_parameterDeclarationList.Next());
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:484:7: ( typeExpression )?
            	    if ( stream_typeExpression.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_typeExpression.Next());
            	    
            	    }
            	    stream_typeExpression.Reset();
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 19, interfaceMethodDefinition_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end interfaceMethodDefinition

    public class methodDefinition_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start methodDefinition
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:489:1: methodDefinition[CommonTree mods] : FUNCTION r= optionalAccessorRole ide= ident parameterDeclarationList (type_exp= typeExpression )? block -> ^( METHOD_DEF optionalAccessorRole ident parameterDeclarationList ( typeExpression )? block ) ;
    public methodDefinition_return methodDefinition(CommonTree mods) // throws RecognitionException [1]
    {   
        methodDefinition_return retval = new methodDefinition_return();
        retval.start = input.LT(1);
        int methodDefinition_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken FUNCTION43 = null;
        optionalAccessorRole_return r = null;

        ident_return ide = null;

        typeExpression_return type_exp = null;

        parameterDeclarationList_return parameterDeclarationList44 = null;

        block_return block45 = null;
        
        
        CommonTree FUNCTION43_tree=null;
        RewriteRuleTokenStream stream_FUNCTION = new RewriteRuleTokenStream(adaptor,"token FUNCTION");
        RewriteRuleSubtreeStream stream_optionalAccessorRole = new RewriteRuleSubtreeStream(adaptor,"rule optionalAccessorRole");
        RewriteRuleSubtreeStream stream_parameterDeclarationList = new RewriteRuleSubtreeStream(adaptor,"rule parameterDeclarationList");
        RewriteRuleSubtreeStream stream_ident = new RewriteRuleSubtreeStream(adaptor,"rule ident");
        RewriteRuleSubtreeStream stream_block = new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_typeExpression = new RewriteRuleSubtreeStream(adaptor,"rule typeExpression");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 20) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:490:4: ( FUNCTION r= optionalAccessorRole ide= ident parameterDeclarationList (type_exp= typeExpression )? block -> ^( METHOD_DEF optionalAccessorRole ident parameterDeclarationList ( typeExpression )? block ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:490:4: FUNCTION r= optionalAccessorRole ide= ident parameterDeclarationList (type_exp= typeExpression )? block
            {
            	if ( backtracking == 0 ) 
            	{
            	   
            	  			if(mods.ChildCount > 0)
            	  				buffer.Append(fromModifiers(mods) + " ");
            	  		
            	}
            	FUNCTION43 = (CommonToken)input.LT(1);
            	Match(input,FUNCTION,FOLLOW_FUNCTION_in_methodDefinition1283); if (failed) return retval;
            	if ( backtracking==0 ) stream_FUNCTION.Add(FUNCTION43);

            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append("function "); 
            	}
            	PushFollow(FOLLOW_optionalAccessorRole_in_methodDefinition1295);
            	r = optionalAccessorRole();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_optionalAccessorRole.Add(r.Tree);
            	PushFollow(FOLLOW_ident_in_methodDefinition1301);
            	ide = ident();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_ident.Add(ide.Tree);
            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append(((CommonTree)ide.Tree).Text); 
            	}
            	PushFollow(FOLLOW_parameterDeclarationList_in_methodDefinition1319);
            	parameterDeclarationList44 = parameterDeclarationList();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_parameterDeclarationList.Add(parameterDeclarationList44.Tree);
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:500:11: (type_exp= typeExpression )?
            	int alt15 = 2;
            	int LA15_0 = input.LA(1);
            	
            	if ( (LA15_0 == COLON) )
            	{
            	    alt15 = 1;
            	}
            	switch (alt15) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:0:0: type_exp= typeExpression
            	        {
            	        	PushFollow(FOLLOW_typeExpression_in_methodDefinition1325);
            	        	type_exp = typeExpression();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) stream_typeExpression.Add(type_exp.Tree);
            	        
            	        }
            	        break;
            	
            	}

            	if ( backtracking == 0 ) 
            	{
            	  
            	  										if(options.NewlineAfterMethod) buffer.Append(NewLine + tab);
            	  										buffer.Append("{");
            	  										CurrentTab++;
            	  									
            	}
            	PushFollow(FOLLOW_block_in_methodDefinition1341);
            	block45 = block();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_block.Add(block45.Tree);
            	if ( backtracking == 0 ) 
            	{
            	  
            	  										CurrentTab--;
            	  										buffer.Append(NewLine + tab);
            	  										buffer.Append("}");
            	  										buffer.Append(NewLine + tab);
            	  									
            	}
            	
            	// AST REWRITE
            	// elements:          block, parameterDeclarationList, typeExpression, optionalAccessorRole, ident
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 513:3: -> ^( METHOD_DEF optionalAccessorRole ident parameterDeclarationList ( typeExpression )? block )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:513:6: ^( METHOD_DEF optionalAccessorRole ident parameterDeclarationList ( typeExpression )? block )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(METHOD_DEF, "METHOD_DEF"), root_1);
            	    
            	    adaptor.AddChild(root_1, mods);
            	    adaptor.AddChild(root_1, stream_optionalAccessorRole.Next());
            	    adaptor.AddChild(root_1, stream_ident.Next());
            	    adaptor.AddChild(root_1, stream_parameterDeclarationList.Next());
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:516:7: ( typeExpression )?
            	    if ( stream_typeExpression.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_typeExpression.Next());
            	    
            	    }
            	    stream_typeExpression.Reset();
            	    adaptor.AddChild(root_1, stream_block.Next());
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 20, methodDefinition_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end methodDefinition

    public class optionalAccessorRole_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start optionalAccessorRole
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:521:1: optionalAccessorRole : ( accessorRole )? -> ^( ACCESSOR_ROLE ( accessorRole )? ) ;
    public optionalAccessorRole_return optionalAccessorRole() // throws RecognitionException [1]
    {   
        optionalAccessorRole_return retval = new optionalAccessorRole_return();
        retval.start = input.LT(1);
        int optionalAccessorRole_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        accessorRole_return accessorRole46 = null;
        
        
        RewriteRuleSubtreeStream stream_accessorRole = new RewriteRuleSubtreeStream(adaptor,"rule accessorRole");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 21) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:522:4: ( ( accessorRole )? -> ^( ACCESSOR_ROLE ( accessorRole )? ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:522:4: ( accessorRole )?
            {
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:522:4: ( accessorRole )?
            	int alt16 = 2;
            	int LA16_0 = input.LA(1);
            	
            	if ( (LA16_0 == GET) )
            	{
            	    int LA16_1 = input.LA(2);
            	    
            	    if ( ((LA16_1 >= GET && LA16_1 <= SET) || LA16_1 == IDENT || LA16_1 == DYNAMIC || (LA16_1 >= IS && LA16_1 <= AS) || (LA16_1 >= USE && LA16_1 <= XML)) )
            	    {
            	        alt16 = 1;
            	    }
            	}
            	else if ( (LA16_0 == SET) )
            	{
            	    int LA16_2 = input.LA(2);
            	    
            	    if ( ((LA16_2 >= GET && LA16_2 <= SET) || LA16_2 == IDENT || LA16_2 == DYNAMIC || (LA16_2 >= IS && LA16_2 <= AS) || (LA16_2 >= USE && LA16_2 <= XML)) )
            	    {
            	        alt16 = 1;
            	    }
            	}
            	switch (alt16) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:0:0: accessorRole
            	        {
            	        	PushFollow(FOLLOW_accessorRole_in_optionalAccessorRole1424);
            	        	accessorRole46 = accessorRole();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) stream_accessorRole.Add(accessorRole46.Tree);
            	        
            	        }
            	        break;
            	
            	}

            	
            	// AST REWRITE
            	// elements:          accessorRole
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 523:3: -> ^( ACCESSOR_ROLE ( accessorRole )? )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:523:6: ^( ACCESSOR_ROLE ( accessorRole )? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(ACCESSOR_ROLE, "ACCESSOR_ROLE"), root_1);
            	    
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:523:22: ( accessorRole )?
            	    if ( stream_accessorRole.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_accessorRole.Next());
            	    
            	    }
            	    stream_accessorRole.Reset();
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 21, optionalAccessorRole_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end optionalAccessorRole

    public class accessorRole_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start accessorRole
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:526:1: accessorRole : ( GET | SET );
    public accessorRole_return accessorRole() // throws RecognitionException [1]
    {   
        accessorRole_return retval = new accessorRole_return();
        retval.start = input.LT(1);
        int accessorRole_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken GET47 = null;
        CommonToken SET48 = null;
        
        CommonTree GET47_tree=null;
        CommonTree SET48_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 22) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:527:4: ( GET | SET )
            int alt17 = 2;
            int LA17_0 = input.LA(1);
            
            if ( (LA17_0 == GET) )
            {
                alt17 = 1;
            }
            else if ( (LA17_0 == SET) )
            {
                alt17 = 2;
            }
            else 
            {
                if ( backtracking > 0 ) {failed = true; return retval;}
                NoViableAltException nvae_d17s0 =
                    new NoViableAltException("526:1: accessorRole : ( GET | SET );", 17, 0, input);
            
                throw nvae_d17s0;
            }
            switch (alt17) 
            {
                case 1 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:527:4: GET
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	GET47 = (CommonToken)input.LT(1);
                    	Match(input,GET,FOLLOW_GET_in_accessorRole1447); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	GET47_tree = (CommonTree)adaptor.Create(GET47);
                    	adaptor.AddChild(root_0, GET47_tree);
                    	}
                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append("get "); 
                    	}
                    
                    }
                    break;
                case 2 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:528:4: SET
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	SET48 = (CommonToken)input.LT(1);
                    	Match(input,SET,FOLLOW_SET_in_accessorRole1455); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	SET48_tree = (CommonTree)adaptor.Create(SET48);
                    	adaptor.AddChild(root_0, SET48_tree);
                    	}
                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append("set "); 
                    	}
                    
                    }
                    break;
            
            }
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 22, accessorRole_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end accessorRole

    public class variableDefinition_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start variableDefinition
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:531:1: variableDefinition[CommonTree mods] : decl= varOrConst variableDeclarator ( COMMA variableDeclarator )* semi -> ^( VAR_DEF $decl ( variableDeclarator )+ ) ;
    public variableDefinition_return variableDefinition(CommonTree mods) // throws RecognitionException [1]
    {   
        InOperator_stack.Push(new InOperator_scope());
    
        variableDefinition_return retval = new variableDefinition_return();
        retval.start = input.LT(1);
        int variableDefinition_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken COMMA50 = null;
        varOrConst_return decl = null;

        variableDeclarator_return variableDeclarator49 = null;

        variableDeclarator_return variableDeclarator51 = null;

        semi_return semi52 = null;
        
        
        CommonTree COMMA50_tree=null;
        RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_semi = new RewriteRuleSubtreeStream(adaptor,"rule semi");
        RewriteRuleSubtreeStream stream_varOrConst = new RewriteRuleSubtreeStream(adaptor,"rule varOrConst");
        RewriteRuleSubtreeStream stream_variableDeclarator = new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarator");
        
        	((InOperator_scope)InOperator_stack.Peek()).allowed =  true;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 23) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:536:4: (decl= varOrConst variableDeclarator ( COMMA variableDeclarator )* semi -> ^( VAR_DEF $decl ( variableDeclarator )+ ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:536:4: decl= varOrConst variableDeclarator ( COMMA variableDeclarator )* semi
            {
            	if ( backtracking == 0 ) 
            	{
            	   
            	  			if(mods.ChildCount > 0) buffer.Append(fromModifiers(mods) + " ");
            	  		
            	}
            	PushFollow(FOLLOW_varOrConst_in_variableDefinition1486);
            	decl = varOrConst();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_varOrConst.Add(decl.Tree);
            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append(((CommonTree)decl.Tree).Text + " "); 
            	}
            	PushFollow(FOLLOW_variableDeclarator_in_variableDefinition1495);
            	variableDeclarator49 = variableDeclarator();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_variableDeclarator.Add(variableDeclarator49.Tree);
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:541:3: ( COMMA variableDeclarator )*
            	do 
            	{
            	    int alt18 = 2;
            	    int LA18_0 = input.LA(1);
            	    
            	    if ( (LA18_0 == COMMA) )
            	    {
            	        alt18 = 1;
            	    }
            	    
            	
            	    switch (alt18) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:542:10: COMMA variableDeclarator
            			    {
            			    	if ( backtracking == 0 ) 
            			    	{
            			    	  	buffer.Append(";"); 
            			    	}
            			    	COMMA50 = (CommonToken)input.LT(1);
            			    	Match(input,COMMA,FOLLOW_COMMA_in_variableDefinition1515); if (failed) return retval;
            			    	if ( backtracking==0 ) stream_COMMA.Add(COMMA50);

            			    	if ( backtracking == 0 ) 
            			    	{
            			    	   
            			    	  										buffer.Append(NewLine + tab); 
            			    	  										if(mods.ChildCount > 0) buffer.Append(fromModifiers(mods) + " ");
            			    	  										buffer.Append(((CommonTree)decl.Tree).Text + " ");
            			    	  									
            			    	}
            			    	PushFollow(FOLLOW_variableDeclarator_in_variableDefinition1526);
            			    	variableDeclarator51 = variableDeclarator();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) stream_variableDeclarator.Add(variableDeclarator51.Tree);
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop18;
            	    }
            	} while (true);
            	
            	loop18:
            		;	// Stops C# compiler whinging that label 'loop18' has no statements

            	PushFollow(FOLLOW_semi_in_variableDefinition1535);
            	semi52 = semi();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_semi.Add(semi52.Tree);
            	
            	// AST REWRITE
            	// elements:          decl, variableDeclarator
            	// token labels:      
            	// rule labels:       decl, retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_decl = new RewriteRuleSubtreeStream(adaptor, "token decl", (decl!=null ? decl.Tree : null));
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 551:3: -> ^( VAR_DEF $decl ( variableDeclarator )+ )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:551:6: ^( VAR_DEF $decl ( variableDeclarator )+ )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(VAR_DEF, "VAR_DEF"), root_1);
            	    
            	    adaptor.AddChild(root_1, mods);
            	    adaptor.AddChild(root_1, stream_decl.Next());
            	    if ( !(stream_variableDeclarator.HasNext()) ) {
            	        throw new RewriteEarlyExitException();
            	    }
            	    while ( stream_variableDeclarator.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_variableDeclarator.Next());
            	    
            	    }
            	    stream_variableDeclarator.Reset();
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 23, variableDefinition_StartIndex); 
            }
            InOperator_stack.Pop();
    
        }
        return retval;
    }
    // $ANTLR end variableDefinition

    public class varOrConst_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start varOrConst
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:554:1: varOrConst : ( VAR | CONST );
    public varOrConst_return varOrConst() // throws RecognitionException [1]
    {   
        varOrConst_return retval = new varOrConst_return();
        retval.start = input.LT(1);
        int varOrConst_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken set53 = null;
        
        CommonTree set53_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 24) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:555:4: ( VAR | CONST )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	set53 = (CommonToken)input.LT(1);
            	if ( (input.LA(1) >= VAR && input.LA(1) <= CONST) ) 
            	{
            	    input.Consume();
            	    if ( backtracking==0 ) adaptor.AddChild(root_0, adaptor.Create(set53));
            	    errorRecovery = false;failed = false;
            	}
            	else 
            	{
            	    if ( backtracking > 0 ) {failed = true; return retval;}
            	    MismatchedSetException mse =
            	        new MismatchedSetException(null,input);
            	    RecoverFromMismatchedSet(input,mse,FOLLOW_set_in_varOrConst0);    throw mse;
            	}

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 24, varOrConst_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end varOrConst

    public class variableDeclarator_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start variableDeclarator
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:558:1: variableDeclarator : ide= ident (type_exp= typeExpression )? ( variableInitializer )? ;
    public variableDeclarator_return variableDeclarator() // throws RecognitionException [1]
    {   
        variableDeclarator_return retval = new variableDeclarator_return();
        retval.start = input.LT(1);
        int variableDeclarator_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        ident_return ide = null;

        typeExpression_return type_exp = null;

        variableInitializer_return variableInitializer54 = null;
        
        
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 25) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:559:4: (ide= ident (type_exp= typeExpression )? ( variableInitializer )? )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:559:4: ide= ident (type_exp= typeExpression )? ( variableInitializer )?
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	PushFollow(FOLLOW_ident_in_variableDeclarator1579);
            	ide = ident();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) root_0 = (CommonTree)adaptor.BecomeRoot(ide.Tree, root_0);
            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append(((CommonTree)ide.Tree).Text);  
            	}
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:560:11: (type_exp= typeExpression )?
            	int alt19 = 2;
            	int LA19_0 = input.LA(1);
            	
            	if ( (LA19_0 == COLON) )
            	{
            	    alt19 = 1;
            	}
            	switch (alt19) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:0:0: type_exp= typeExpression
            	        {
            	        	PushFollow(FOLLOW_typeExpression_in_variableDeclarator1592);
            	        	type_exp = typeExpression();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) adaptor.AddChild(root_0, type_exp.Tree);
            	        
            	        }
            	        break;
            	
            	}

            	if ( backtracking == 0 ) 
            	{
            	  
            	  									
            	}
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:562:3: ( variableInitializer )?
            	int alt20 = 2;
            	int LA20_0 = input.LA(1);
            	
            	if ( (LA20_0 == ASSIGN) )
            	{
            	    alt20 = 1;
            	}
            	switch (alt20) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:0:0: variableInitializer
            	        {
            	        	PushFollow(FOLLOW_variableInitializer_in_variableDeclarator1599);
            	        	variableInitializer54 = variableInitializer();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) adaptor.AddChild(root_0, variableInitializer54.Tree);
            	        
            	        }
            	        break;
            	
            	}

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 25, variableDeclarator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end variableDeclarator

    public class declaration_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start declaration
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:565:1: declaration : decl= varOrConst variableDeclarator declarationTail ;
    public declaration_return declaration() // throws RecognitionException [1]
    {   
        declaration_return retval = new declaration_return();
        retval.start = input.LT(1);
        int declaration_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        varOrConst_return decl = null;

        variableDeclarator_return variableDeclarator55 = null;

        declarationTail_return declarationTail56 = null;
        
        
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 26) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:566:4: (decl= varOrConst variableDeclarator declarationTail )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:566:4: decl= varOrConst variableDeclarator declarationTail
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	PushFollow(FOLLOW_varOrConst_in_declaration1614);
            	decl = varOrConst();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) root_0 = (CommonTree)adaptor.BecomeRoot(decl.Tree, root_0);
            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append(((CommonTree)decl.Tree).Text + " "); 
            	}
            	PushFollow(FOLLOW_variableDeclarator_in_declaration1624);
            	variableDeclarator55 = variableDeclarator();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, variableDeclarator55.Tree);
            	PushFollow(FOLLOW_declarationTail_in_declaration1628);
            	declarationTail56 = declarationTail();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, declarationTail56.Tree);
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 26, declaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end declaration

    public class declarationTail_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start declarationTail
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:571:1: declarationTail : ( COMMA variableDeclarator )* ;
    public declarationTail_return declarationTail() // throws RecognitionException [1]
    {   
        InOperator_stack.Push(new InOperator_scope());
    
        declarationTail_return retval = new declarationTail_return();
        retval.start = input.LT(1);
        int declarationTail_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken COMMA57 = null;
        variableDeclarator_return variableDeclarator58 = null;
        
        
        CommonTree COMMA57_tree=null;
    
        
        	((InOperator_scope)InOperator_stack.Peek()).allowed =  true;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 27) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:576:4: ( ( COMMA variableDeclarator )* )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:576:4: ( COMMA variableDeclarator )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:576:4: ( COMMA variableDeclarator )*
            	do 
            	{
            	    int alt21 = 2;
            	    int LA21_0 = input.LA(1);
            	    
            	    if ( (LA21_0 == COMMA) )
            	    {
            	        alt21 = 1;
            	    }
            	    
            	
            	    switch (alt21) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:577:4: COMMA variableDeclarator
            			    {
            			    	COMMA57 = (CommonToken)input.LT(1);
            			    	Match(input,COMMA,FOLLOW_COMMA_in_declarationTail1654); if (failed) return retval;
            			    	if ( backtracking == 0 ) 
            			    	{
            			    	   buffer.Append(options.SpaceBetweenArguments ? ", " : ","); 
            			    	}
            			    	PushFollow(FOLLOW_variableDeclarator_in_declarationTail1662);
            			    	variableDeclarator58 = variableDeclarator();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) adaptor.AddChild(root_0, variableDeclarator58.Tree);
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop21;
            	    }
            	} while (true);
            	
            	loop21:
            		;	// Stops C# compiler whinging that label 'loop21' has no statements

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 27, declarationTail_StartIndex); 
            }
            InOperator_stack.Pop();
    
        }
        return retval;
    }
    // $ANTLR end declarationTail

    public class variableInitializer_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start variableInitializer
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:582:1: variableInitializer : ASSIGN assignmentExpression ;
    public variableInitializer_return variableInitializer() // throws RecognitionException [1]
    {   
        variableInitializer_return retval = new variableInitializer_return();
        retval.start = input.LT(1);
        int variableInitializer_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken ASSIGN59 = null;
        assignmentExpression_return assignmentExpression60 = null;
        
        
        CommonTree ASSIGN59_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 28) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:583:4: ( ASSIGN assignmentExpression )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:583:4: ASSIGN assignmentExpression
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	ASSIGN59 = (CommonToken)input.LT(1);
            	Match(input,ASSIGN,FOLLOW_ASSIGN_in_variableInitializer1678); if (failed) return retval;
            	if ( backtracking==0 ) {
            	ASSIGN59_tree = (CommonTree)adaptor.Create(ASSIGN59);
            	root_0 = (CommonTree)adaptor.BecomeRoot(ASSIGN59_tree, root_0);
            	}
            	if ( backtracking == 0 ) 
            	{
            	   
            	  								if(options.SpaceBetweenAssign) buffer.Append(" ");
            	  								buffer.Append("=");
            	  								if(options.SpaceBetweenAssign) buffer.Append(" ");
            	  							
            	}
            	PushFollow(FOLLOW_assignmentExpression_in_variableInitializer1688);
            	assignmentExpression60 = assignmentExpression();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, assignmentExpression60.Tree);
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 28, variableInitializer_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end variableInitializer

    public class parameterDeclarationList_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start parameterDeclarationList
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:593:1: parameterDeclarationList : LPAREN ( parameterDeclaration ( COMMA parameterDeclaration )* )? RPAREN -> ^( PARAMS ( parameterDeclaration )* ) ;
    public parameterDeclarationList_return parameterDeclarationList() // throws RecognitionException [1]
    {   
        parameterDeclarationList_return retval = new parameterDeclarationList_return();
        retval.start = input.LT(1);
        int parameterDeclarationList_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken LPAREN61 = null;
        CommonToken COMMA63 = null;
        CommonToken RPAREN65 = null;
        parameterDeclaration_return parameterDeclaration62 = null;

        parameterDeclaration_return parameterDeclaration64 = null;
        
        
        CommonTree LPAREN61_tree=null;
        CommonTree COMMA63_tree=null;
        CommonTree RPAREN65_tree=null;
        RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_parameterDeclaration = new RewriteRuleSubtreeStream(adaptor,"rule parameterDeclaration");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 29) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:594:4: ( LPAREN ( parameterDeclaration ( COMMA parameterDeclaration )* )? RPAREN -> ^( PARAMS ( parameterDeclaration )* ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:594:4: LPAREN ( parameterDeclaration ( COMMA parameterDeclaration )* )? RPAREN
            {
            	LPAREN61 = (CommonToken)input.LT(1);
            	Match(input,LPAREN,FOLLOW_LPAREN_in_parameterDeclarationList1701); if (failed) return retval;
            	if ( backtracking==0 ) stream_LPAREN.Add(LPAREN61);

            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append(options.SpaceBeforeMethodDef ? " (" : "("); 
            	}
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:595:3: ( parameterDeclaration ( COMMA parameterDeclaration )* )?
            	int alt23 = 2;
            	int LA23_0 = input.LA(1);
            	
            	if ( ((LA23_0 >= GET && LA23_0 <= SET) || LA23_0 == CONST || LA23_0 == IDENT || LA23_0 == DYNAMIC || (LA23_0 >= IS && LA23_0 <= AS) || (LA23_0 >= USE && LA23_0 <= XML)) )
            	{
            	    alt23 = 1;
            	}
            	switch (alt23) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:595:5: parameterDeclaration ( COMMA parameterDeclaration )*
            	        {
            	        	PushFollow(FOLLOW_parameterDeclaration_in_parameterDeclarationList1711);
            	        	parameterDeclaration62 = parameterDeclaration();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) stream_parameterDeclaration.Add(parameterDeclaration62.Tree);
            	        	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:596:4: ( COMMA parameterDeclaration )*
            	        	do 
            	        	{
            	        	    int alt22 = 2;
            	        	    int LA22_0 = input.LA(1);
            	        	    
            	        	    if ( (LA22_0 == COMMA) )
            	        	    {
            	        	        alt22 = 1;
            	        	    }
            	        	    
            	        	
            	        	    switch (alt22) 
            	        		{
            	        			case 1 :
            	        			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:597:5: COMMA parameterDeclaration
            	        			    {
            	        			    	COMMA63 = (CommonToken)input.LT(1);
            	        			    	Match(input,COMMA,FOLLOW_COMMA_in_parameterDeclarationList1722); if (failed) return retval;
            	        			    	if ( backtracking==0 ) stream_COMMA.Add(COMMA63);

            	        			    	if ( backtracking == 0 ) 
            	        			    	{
            	        			    	   buffer.Append(options.SpaceBetweenArguments ? ", " : ","); 
            	        			    	}
            	        			    	PushFollow(FOLLOW_parameterDeclaration_in_parameterDeclarationList1731);
            	        			    	parameterDeclaration64 = parameterDeclaration();
            	        			    	followingStackPointer_--;
            	        			    	if (failed) return retval;
            	        			    	if ( backtracking==0 ) stream_parameterDeclaration.Add(parameterDeclaration64.Tree);
            	        			    
            	        			    }
            	        			    break;
            	        	
            	        			default:
            	        			    goto loop22;
            	        	    }
            	        	} while (true);
            	        	
            	        	loop22:
            	        		;	// Stops C# compiler whinging that label 'loop22' has no statements

            	        
            	        }
            	        break;
            	
            	}

            	RPAREN65 = (CommonToken)input.LT(1);
            	Match(input,RPAREN,FOLLOW_RPAREN_in_parameterDeclarationList1746); if (failed) return retval;
            	if ( backtracking==0 ) stream_RPAREN.Add(RPAREN65);

            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append(")"); 
            	}
            	
            	// AST REWRITE
            	// elements:          parameterDeclaration
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 602:3: -> ^( PARAMS ( parameterDeclaration )* )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:602:6: ^( PARAMS ( parameterDeclaration )* )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(PARAMS, "PARAMS"), root_1);
            	    
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:602:15: ( parameterDeclaration )*
            	    while ( stream_parameterDeclaration.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_parameterDeclaration.Next());
            	    
            	    }
            	    stream_parameterDeclaration.Reset();
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 29, parameterDeclarationList_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end parameterDeclarationList

    public class parameterDeclaration_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start parameterDeclaration
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:606:1: parameterDeclaration : basicParameterDeclaration ;
    public parameterDeclaration_return parameterDeclaration() // throws RecognitionException [1]
    {   
        parameterDeclaration_return retval = new parameterDeclaration_return();
        retval.start = input.LT(1);
        int parameterDeclaration_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        basicParameterDeclaration_return basicParameterDeclaration66 = null;
        
        
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 30) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:607:4: ( basicParameterDeclaration )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:607:4: basicParameterDeclaration
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	PushFollow(FOLLOW_basicParameterDeclaration_in_parameterDeclaration1773);
            	basicParameterDeclaration66 = basicParameterDeclaration();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, basicParameterDeclaration66.Tree);
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 30, parameterDeclaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end parameterDeclaration

    public class basicParameterDeclaration_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start basicParameterDeclaration
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:610:1: basicParameterDeclaration : ( CONST )? ide= ident (type_exp= typeExpression )? ( parameterDefault )? -> ^( PARAM ( CONST )? ident ( typeExpression )? ( parameterDefault )? ) ;
    public basicParameterDeclaration_return basicParameterDeclaration() // throws RecognitionException [1]
    {   
        basicParameterDeclaration_return retval = new basicParameterDeclaration_return();
        retval.start = input.LT(1);
        int basicParameterDeclaration_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken CONST67 = null;
        ident_return ide = null;

        typeExpression_return type_exp = null;

        parameterDefault_return parameterDefault68 = null;
        
        
        CommonTree CONST67_tree=null;
        RewriteRuleTokenStream stream_CONST = new RewriteRuleTokenStream(adaptor,"token CONST");
        RewriteRuleSubtreeStream stream_parameterDefault = new RewriteRuleSubtreeStream(adaptor,"rule parameterDefault");
        RewriteRuleSubtreeStream stream_ident = new RewriteRuleSubtreeStream(adaptor,"rule ident");
        RewriteRuleSubtreeStream stream_typeExpression = new RewriteRuleSubtreeStream(adaptor,"rule typeExpression");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 31) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:611:4: ( ( CONST )? ide= ident (type_exp= typeExpression )? ( parameterDefault )? -> ^( PARAM ( CONST )? ident ( typeExpression )? ( parameterDefault )? ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:611:4: ( CONST )? ide= ident (type_exp= typeExpression )? ( parameterDefault )?
            {
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:611:4: ( CONST )?
            	int alt24 = 2;
            	int LA24_0 = input.LA(1);
            	
            	if ( (LA24_0 == CONST) )
            	{
            	    alt24 = 1;
            	}
            	switch (alt24) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:0:0: CONST
            	        {
            	        	CONST67 = (CommonToken)input.LT(1);
            	        	Match(input,CONST,FOLLOW_CONST_in_basicParameterDeclaration1784); if (failed) return retval;
            	        	if ( backtracking==0 ) stream_CONST.Add(CONST67);

            	        
            	        }
            	        break;
            	
            	}

            	PushFollow(FOLLOW_ident_in_basicParameterDeclaration1792);
            	ide = ident();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_ident.Add(ide.Tree);
            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append(((CommonTree)ide.Tree).Text); 
            	}
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:613:11: (type_exp= typeExpression )?
            	int alt25 = 2;
            	int LA25_0 = input.LA(1);
            	
            	if ( (LA25_0 == COLON) )
            	{
            	    alt25 = 1;
            	}
            	switch (alt25) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:0:0: type_exp= typeExpression
            	        {
            	        	PushFollow(FOLLOW_typeExpression_in_basicParameterDeclaration1804);
            	        	type_exp = typeExpression();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) stream_typeExpression.Add(type_exp.Tree);
            	        
            	        }
            	        break;
            	
            	}

            	if ( backtracking == 0 ) 
            	{
            	    
            	}
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:614:3: ( parameterDefault )?
            	int alt26 = 2;
            	int LA26_0 = input.LA(1);
            	
            	if ( (LA26_0 == ASSIGN) )
            	{
            	    alt26 = 1;
            	}
            	switch (alt26) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:0:0: parameterDefault
            	        {
            	        	PushFollow(FOLLOW_parameterDefault_in_basicParameterDeclaration1811);
            	        	parameterDefault68 = parameterDefault();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) stream_parameterDefault.Add(parameterDefault68.Tree);
            	        
            	        }
            	        break;
            	
            	}

            	
            	// AST REWRITE
            	// elements:          CONST, parameterDefault, typeExpression, ident
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 615:3: -> ^( PARAM ( CONST )? ident ( typeExpression )? ( parameterDefault )? )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:615:6: ^( PARAM ( CONST )? ident ( typeExpression )? ( parameterDefault )? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(PARAM, "PARAM"), root_1);
            	    
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:615:14: ( CONST )?
            	    if ( stream_CONST.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_CONST.Next());
            	    
            	    }
            	    stream_CONST.Reset();
            	    adaptor.AddChild(root_1, stream_ident.Next());
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:615:27: ( typeExpression )?
            	    if ( stream_typeExpression.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_typeExpression.Next());
            	    
            	    }
            	    stream_typeExpression.Reset();
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:615:43: ( parameterDefault )?
            	    if ( stream_parameterDefault.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_parameterDefault.Next());
            	    
            	    }
            	    stream_parameterDefault.Reset();
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 31, basicParameterDeclaration_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end basicParameterDeclaration

    public class parameterDefault_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start parameterDefault
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:618:1: parameterDefault : ASSIGN assignmentExpression ;
    public parameterDefault_return parameterDefault() // throws RecognitionException [1]
    {   
        InOperator_stack.Push(new InOperator_scope());
    
        parameterDefault_return retval = new parameterDefault_return();
        retval.start = input.LT(1);
        int parameterDefault_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken ASSIGN69 = null;
        assignmentExpression_return assignmentExpression70 = null;
        
        
        CommonTree ASSIGN69_tree=null;
    
        
        	((InOperator_scope)InOperator_stack.Peek()).allowed =  true;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 32) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:624:4: ( ASSIGN assignmentExpression )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:624:4: ASSIGN assignmentExpression
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	ASSIGN69 = (CommonToken)input.LT(1);
            	Match(input,ASSIGN,FOLLOW_ASSIGN_in_parameterDefault1855); if (failed) return retval;
            	if ( backtracking==0 ) {
            	ASSIGN69_tree = (CommonTree)adaptor.Create(ASSIGN69);
            	root_0 = (CommonTree)adaptor.BecomeRoot(ASSIGN69_tree, root_0);
            	}
            	PushFollow(FOLLOW_assignmentExpression_in_parameterDefault1858);
            	assignmentExpression70 = assignmentExpression();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, assignmentExpression70.Tree);
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 32, parameterDefault_StartIndex); 
            }
            InOperator_stack.Pop();
    
        }
        return retval;
    }
    // $ANTLR end parameterDefault

    public class block_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start block
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:627:1: block : LCURLY ( blockEntry )* RCURLY -> ^( BLOCK ( blockEntry )* ) ;
    public block_return block() // throws RecognitionException [1]
    {   
        block_return retval = new block_return();
        retval.start = input.LT(1);
        int block_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken LCURLY71 = null;
        CommonToken RCURLY73 = null;
        blockEntry_return blockEntry72 = null;
        
        
        CommonTree LCURLY71_tree=null;
        CommonTree RCURLY73_tree=null;
        RewriteRuleTokenStream stream_LCURLY = new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY = new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_blockEntry = new RewriteRuleSubtreeStream(adaptor,"rule blockEntry");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 33) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:628:4: ( LCURLY ( blockEntry )* RCURLY -> ^( BLOCK ( blockEntry )* ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:628:4: LCURLY ( blockEntry )* RCURLY
            {
            	LCURLY71 = (CommonToken)input.LT(1);
            	Match(input,LCURLY,FOLLOW_LCURLY_in_block1869); if (failed) return retval;
            	if ( backtracking==0 ) stream_LCURLY.Add(LCURLY71);

            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:629:3: ( blockEntry )*
            	do 
            	{
            	    int alt27 = 2;
            	    int LA27_0 = input.LA(1);
            	    
            	    if ( (LA27_0 == SEMI || LA27_0 == LCURLY || (LA27_0 >= STRING_LITERAL && LA27_0 <= CONST) || LA27_0 == LPAREN || LA27_0 == IF || (LA27_0 >= RETURN && LA27_0 <= SWITCH) || LA27_0 == FOR || (LA27_0 >= WHILE && LA27_0 <= VOID) || LA27_0 == IDENT || LA27_0 == LBRACK || LA27_0 == DYNAMIC || (LA27_0 >= IS && LA27_0 <= AS) || (LA27_0 >= PLUS && LA27_0 <= MINUS) || (LA27_0 >= INC && LA27_0 <= XML) || (LA27_0 >= 176 && LA27_0 <= 177)) )
            	    {
            	        alt27 = 1;
            	    }
            	    
            	
            	    switch (alt27) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:0:0: blockEntry
            			    {
            			    	PushFollow(FOLLOW_blockEntry_in_block1873);
            			    	blockEntry72 = blockEntry();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) stream_blockEntry.Add(blockEntry72.Tree);
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop27;
            	    }
            	} while (true);
            	
            	loop27:
            		;	// Stops C# compiler whinging that label 'loop27' has no statements

            	RCURLY73 = (CommonToken)input.LT(1);
            	Match(input,RCURLY,FOLLOW_RCURLY_in_block1879); if (failed) return retval;
            	if ( backtracking==0 ) stream_RCURLY.Add(RCURLY73);

            	
            	// AST REWRITE
            	// elements:          blockEntry
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 631:3: -> ^( BLOCK ( blockEntry )* )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:631:6: ^( BLOCK ( blockEntry )* )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(BLOCK, "BLOCK"), root_1);
            	    
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:631:14: ( blockEntry )*
            	    while ( stream_blockEntry.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_blockEntry.Next());
            	    
            	    }
            	    stream_blockEntry.Reset();
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 33, block_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end block

    public class blockEntry_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start blockEntry
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:634:1: blockEntry : statement ;
    public blockEntry_return blockEntry() // throws RecognitionException [1]
    {   
        blockEntry_return retval = new blockEntry_return();
        retval.start = input.LT(1);
        int blockEntry_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        statement_return statement74 = null;
        
        
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 34) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:635:4: ( statement )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:635:4: statement
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append(NewLine + tab); 
            	}
            	PushFollow(FOLLOW_statement_in_blockEntry1903);
            	statement74 = statement();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, statement74.Tree);
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 34, blockEntry_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end blockEntry

    public class condition_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start condition
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:638:1: condition : LPAREN expression RPAREN -> ^( CONDITION expression ) ;
    public condition_return condition() // throws RecognitionException [1]
    {   
        condition_return retval = new condition_return();
        retval.start = input.LT(1);
        int condition_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken LPAREN75 = null;
        CommonToken RPAREN77 = null;
        expression_return expression76 = null;
        
        
        CommonTree LPAREN75_tree=null;
        CommonTree RPAREN77_tree=null;
        RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 35) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:639:4: ( LPAREN expression RPAREN -> ^( CONDITION expression ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:639:4: LPAREN expression RPAREN
            {
            	LPAREN75 = (CommonToken)input.LT(1);
            	Match(input,LPAREN,FOLLOW_LPAREN_in_condition1914); if (failed) return retval;
            	if ( backtracking==0 ) stream_LPAREN.Add(LPAREN75);

            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append(options.SpaceBeforeMethodDef ? " (" : "("); 
            	}
            	PushFollow(FOLLOW_expression_in_condition1922);
            	expression76 = expression();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_expression.Add(expression76.Tree);
            	RPAREN77 = (CommonToken)input.LT(1);
            	Match(input,RPAREN,FOLLOW_RPAREN_in_condition1927); if (failed) return retval;
            	if ( backtracking==0 ) stream_RPAREN.Add(RPAREN77);

            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append(")"); 
            	}
            	
            	// AST REWRITE
            	// elements:          expression
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 642:3: -> ^( CONDITION expression )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:642:6: ^( CONDITION expression )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(CONDITION, "CONDITION"), root_1);
            	    
            	    adaptor.AddChild(root_1, stream_expression.Next());
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 35, condition_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end condition

    public class statement_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start statement
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:645:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | SEMI | c= comments );
    public statement_return statement() // throws RecognitionException [1]
    {   
        statement_return retval = new statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken SEMI92 = null;
        comments_return c = null;

        block_return block78 = null;

        declarationStatement_return declarationStatement79 = null;

        expressionStatement_return expressionStatement80 = null;

        ifStatement_return ifStatement81 = null;

        forStatement_return forStatement82 = null;

        whileStatement_return whileStatement83 = null;

        doWhileStatement_return doWhileStatement84 = null;

        withStatement_return withStatement85 = null;

        switchStatement_return switchStatement86 = null;

        breakStatement_return breakStatement87 = null;

        continueStatement_return continueStatement88 = null;

        returnStatement_return returnStatement89 = null;

        throwStatement_return throwStatement90 = null;

        tryStatement_return tryStatement91 = null;
        
        
        CommonTree SEMI92_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 36) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:646:4: ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | SEMI | c= comments )
            int alt28 = 16;
            switch ( input.LA(1) ) 
            {
            case LCURLY:
            	{
                int LA28_1 = input.LA(2);
                
                if ( (LA28_1 == IDENT) )
                {
                    int LA28_44 = input.LA(3);
                    
                    if ( (synpred36()) )
                    {
                        alt28 = 1;
                    }
                    else if ( (synpred38()) )
                    {
                        alt28 = 3;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d28s44 =
                            new NoViableAltException("645:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | SEMI | c= comments );", 28, 44, input);
                    
                        throw nvae_d28s44;
                    }
                }
                else if ( (LA28_1 == USE) )
                {
                    int LA28_45 = input.LA(3);
                    
                    if ( (synpred36()) )
                    {
                        alt28 = 1;
                    }
                    else if ( (synpred38()) )
                    {
                        alt28 = 3;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d28s45 =
                            new NoViableAltException("645:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | SEMI | c= comments );", 28, 45, input);
                    
                        throw nvae_d28s45;
                    }
                }
                else if ( (LA28_1 == XML) )
                {
                    int LA28_46 = input.LA(3);
                    
                    if ( (synpred36()) )
                    {
                        alt28 = 1;
                    }
                    else if ( (synpred38()) )
                    {
                        alt28 = 3;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d28s46 =
                            new NoViableAltException("645:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | SEMI | c= comments );", 28, 46, input);
                    
                        throw nvae_d28s46;
                    }
                }
                else if ( (LA28_1 == DYNAMIC) )
                {
                    int LA28_47 = input.LA(3);
                    
                    if ( (synpred36()) )
                    {
                        alt28 = 1;
                    }
                    else if ( (synpred38()) )
                    {
                        alt28 = 3;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d28s47 =
                            new NoViableAltException("645:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | SEMI | c= comments );", 28, 47, input);
                    
                        throw nvae_d28s47;
                    }
                }
                else if ( (LA28_1 == IS) )
                {
                    int LA28_48 = input.LA(3);
                    
                    if ( (synpred36()) )
                    {
                        alt28 = 1;
                    }
                    else if ( (synpred38()) )
                    {
                        alt28 = 3;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d28s48 =
                            new NoViableAltException("645:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | SEMI | c= comments );", 28, 48, input);
                    
                        throw nvae_d28s48;
                    }
                }
                else if ( (LA28_1 == AS) )
                {
                    int LA28_49 = input.LA(3);
                    
                    if ( (synpred36()) )
                    {
                        alt28 = 1;
                    }
                    else if ( (synpred38()) )
                    {
                        alt28 = 3;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d28s49 =
                            new NoViableAltException("645:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | SEMI | c= comments );", 28, 49, input);
                    
                        throw nvae_d28s49;
                    }
                }
                else if ( (LA28_1 == GET) )
                {
                    int LA28_50 = input.LA(3);
                    
                    if ( (synpred36()) )
                    {
                        alt28 = 1;
                    }
                    else if ( (synpred38()) )
                    {
                        alt28 = 3;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d28s50 =
                            new NoViableAltException("645:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | SEMI | c= comments );", 28, 50, input);
                    
                        throw nvae_d28s50;
                    }
                }
                else if ( (LA28_1 == SET) )
                {
                    int LA28_51 = input.LA(3);
                    
                    if ( (synpred36()) )
                    {
                        alt28 = 1;
                    }
                    else if ( (synpred38()) )
                    {
                        alt28 = 3;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d28s51 =
                            new NoViableAltException("645:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | SEMI | c= comments );", 28, 51, input);
                    
                        throw nvae_d28s51;
                    }
                }
                else if ( ((LA28_1 >= HEX_LITERAL && LA28_1 <= FLOAT_LITERAL)) )
                {
                    int LA28_52 = input.LA(3);
                    
                    if ( (synpred36()) )
                    {
                        alt28 = 1;
                    }
                    else if ( (synpred38()) )
                    {
                        alt28 = 3;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d28s52 =
                            new NoViableAltException("645:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | SEMI | c= comments );", 28, 52, input);
                    
                        throw nvae_d28s52;
                    }
                }
                else if ( (LA28_1 == RCURLY) )
                {
                    int LA28_53 = input.LA(3);
                    
                    if ( (synpred36()) )
                    {
                        alt28 = 1;
                    }
                    else if ( (synpred38()) )
                    {
                        alt28 = 3;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d28s53 =
                            new NoViableAltException("645:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | SEMI | c= comments );", 28, 53, input);
                    
                        throw nvae_d28s53;
                    }
                }
                else if ( (LA28_1 == LCURLY) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( ((LA28_1 >= VAR && LA28_1 <= CONST)) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == INC) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == DEC) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == MINUS) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == PLUS) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == DELETE) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == VOID) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == TYPEOF) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == LNOT) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == BNOT) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == UNDEFINED) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == STRING_LITERAL) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == TRUE) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == FALSE) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == NULL) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == LBRACK) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == FUNCTION) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == NEW) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == LPAREN) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == IF) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == FOR) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == WHILE) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == DO) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == WITH) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == SWITCH) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == BREAK) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == CONTINUE) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == RETURN) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == 176) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == 177) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == SEMI) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == SL_COMMENT) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else if ( (LA28_1 == ML_COMMENT) && (synpred36()) )
                {
                    alt28 = 1;
                }
                else 
                {
                    if ( backtracking > 0 ) {failed = true; return retval;}
                    NoViableAltException nvae_d28s1 =
                        new NoViableAltException("645:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | SEMI | c= comments );", 28, 1, input);
                
                    throw nvae_d28s1;
                }
                }
                break;
            case VAR:
            case CONST:
            	{
                alt28 = 2;
                }
                break;
            case STRING_LITERAL:
            case FUNCTION:
            case GET:
            case SET:
            case LPAREN:
            case VOID:
            case IDENT:
            case LBRACK:
            case DYNAMIC:
            case IS:
            case AS:
            case PLUS:
            case MINUS:
            case INC:
            case DEC:
            case DELETE:
            case TYPEOF:
            case LNOT:
            case BNOT:
            case UNDEFINED:
            case TRUE:
            case FALSE:
            case NULL:
            case HEX_LITERAL:
            case DECIMAL_LITERAL:
            case OCTAL_LITERAL:
            case FLOAT_LITERAL:
            case NEW:
            case USE:
            case XML:
            	{
                alt28 = 3;
                }
                break;
            case IF:
            	{
                alt28 = 4;
                }
                break;
            case FOR:
            	{
                alt28 = 5;
                }
                break;
            case WHILE:
            	{
                alt28 = 6;
                }
                break;
            case DO:
            	{
                alt28 = 7;
                }
                break;
            case WITH:
            	{
                alt28 = 8;
                }
                break;
            case SWITCH:
            	{
                alt28 = 9;
                }
                break;
            case BREAK:
            	{
                alt28 = 10;
                }
                break;
            case CONTINUE:
            	{
                alt28 = 11;
                }
                break;
            case RETURN:
            	{
                alt28 = 12;
                }
                break;
            case 176:
            	{
                alt28 = 13;
                }
                break;
            case 177:
            	{
                alt28 = 14;
                }
                break;
            case SEMI:
            	{
                alt28 = 15;
                }
                break;
            case SL_COMMENT:
            case ML_COMMENT:
            	{
                alt28 = 16;
                }
                break;
            	default:
            	    if ( backtracking > 0 ) {failed = true; return retval;}
            	    NoViableAltException nvae_d28s0 =
            	        new NoViableAltException("645:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | SEMI | c= comments );", 28, 0, input);
            
            	    throw nvae_d28s0;
            }
            
            switch (alt28) 
            {
                case 1 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:646:4: ( LCURLY )=> block
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_block_in_statement1957);
                    	block78 = block();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, block78.Tree);
                    
                    }
                    break;
                case 2 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:647:4: declarationStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_declarationStatement_in_statement1962);
                    	declarationStatement79 = declarationStatement();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, declarationStatement79.Tree);
                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(";"); 
                    	}
                    
                    }
                    break;
                case 3 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:648:4: expressionStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_expressionStatement_in_statement1970);
                    	expressionStatement80 = expressionStatement();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, expressionStatement80.Tree);
                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(";"); 
                    	}
                    
                    }
                    break;
                case 4 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:649:4: ifStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_ifStatement_in_statement1979);
                    	ifStatement81 = ifStatement();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, ifStatement81.Tree);
                    
                    }
                    break;
                case 5 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:650:4: forStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_forStatement_in_statement1984);
                    	forStatement82 = forStatement();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, forStatement82.Tree);
                    
                    }
                    break;
                case 6 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:651:4: whileStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_whileStatement_in_statement1989);
                    	whileStatement83 = whileStatement();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, whileStatement83.Tree);
                    
                    }
                    break;
                case 7 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:652:4: doWhileStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_doWhileStatement_in_statement1994);
                    	doWhileStatement84 = doWhileStatement();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, doWhileStatement84.Tree);
                    
                    }
                    break;
                case 8 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:653:4: withStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_withStatement_in_statement1999);
                    	withStatement85 = withStatement();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, withStatement85.Tree);
                    
                    }
                    break;
                case 9 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:654:4: switchStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_switchStatement_in_statement2004);
                    	switchStatement86 = switchStatement();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, switchStatement86.Tree);
                    
                    }
                    break;
                case 10 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:655:4: breakStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_breakStatement_in_statement2009);
                    	breakStatement87 = breakStatement();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, breakStatement87.Tree);
                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(";"); 
                    	}
                    
                    }
                    break;
                case 11 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:656:4: continueStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_continueStatement_in_statement2019);
                    	continueStatement88 = continueStatement();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, continueStatement88.Tree);
                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(";"); 
                    	}
                    
                    }
                    break;
                case 12 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:657:4: returnStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_returnStatement_in_statement2028);
                    	returnStatement89 = returnStatement();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, returnStatement89.Tree);
                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(";"); 
                    	}
                    
                    }
                    break;
                case 13 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:658:4: throwStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_throwStatement_in_statement2038);
                    	throwStatement90 = throwStatement();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, throwStatement90.Tree);
                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(";"); 
                    	}
                    
                    }
                    break;
                case 14 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:659:4: tryStatement
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_tryStatement_in_statement2048);
                    	tryStatement91 = tryStatement();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, tryStatement91.Tree);
                    
                    }
                    break;
                case 15 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:660:4: SEMI
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	SEMI92 = (CommonToken)input.LT(1);
                    	Match(input,SEMI,FOLLOW_SEMI_in_statement2053); if (failed) return retval;
                    
                    }
                    break;
                case 16 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:661:4: c= comments
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_comments_in_statement2061);
                    	c = comments();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, c.Tree);
                    	if ( backtracking == 0 ) 
                    	{
                    	   insertComment(c); 
                    	}
                    
                    }
                    break;
            
            }
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 36, statement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end statement

    public class declarationStatement_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start declarationStatement
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:664:1: declarationStatement : declaration semi ;
    public declarationStatement_return declarationStatement() // throws RecognitionException [1]
    {   
        InOperator_stack.Push(new InOperator_scope());
    
        declarationStatement_return retval = new declarationStatement_return();
        retval.start = input.LT(1);
        int declarationStatement_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        declaration_return declaration93 = null;

        semi_return semi94 = null;
        
        
    
        
        	((InOperator_scope)InOperator_stack.Peek()).allowed =  true;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 37) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:669:4: ( declaration semi )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:669:4: declaration semi
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	PushFollow(FOLLOW_declaration_in_declarationStatement2088);
            	declaration93 = declaration();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, declaration93.Tree);
            	PushFollow(FOLLOW_semi_in_declarationStatement2093);
            	semi94 = semi();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, semi94.Tree);
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 37, declarationStatement_StartIndex); 
            }
            InOperator_stack.Pop();
    
        }
        return retval;
    }
    // $ANTLR end declarationStatement

    public class expressionStatement_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start expressionStatement
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:673:1: expressionStatement : expressionList semi -> ^( EXPR_STMNT expressionList ) ;
    public expressionStatement_return expressionStatement() // throws RecognitionException [1]
    {   
        InOperator_stack.Push(new InOperator_scope());
    
        expressionStatement_return retval = new expressionStatement_return();
        retval.start = input.LT(1);
        int expressionStatement_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        expressionList_return expressionList95 = null;

        semi_return semi96 = null;
        
        
        RewriteRuleSubtreeStream stream_semi = new RewriteRuleSubtreeStream(adaptor,"rule semi");
        RewriteRuleSubtreeStream stream_expressionList = new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        
        	((InOperator_scope)InOperator_stack.Peek()).allowed =  true;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 38) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:678:4: ( expressionList semi -> ^( EXPR_STMNT expressionList ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:678:4: expressionList semi
            {
            	PushFollow(FOLLOW_expressionList_in_expressionStatement2114);
            	expressionList95 = expressionList();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_expressionList.Add(expressionList95.Tree);
            	PushFollow(FOLLOW_semi_in_expressionStatement2116);
            	semi96 = semi();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_semi.Add(semi96.Tree);
            	
            	// AST REWRITE
            	// elements:          expressionList
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 679:3: -> ^( EXPR_STMNT expressionList )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:679:6: ^( EXPR_STMNT expressionList )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(EXPR_STMNT, "EXPR_STMNT"), root_1);
            	    
            	    adaptor.AddChild(root_1, stream_expressionList.Next());
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 38, expressionStatement_StartIndex); 
            }
            InOperator_stack.Pop();
    
        }
        return retval;
    }
    // $ANTLR end expressionStatement

    public class ifStatement_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start ifStatement
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:682:1: ifStatement : IF condition statement ( ( ELSE )=> elseClause )? ;
    public ifStatement_return ifStatement() // throws RecognitionException [1]
    {   
        ifStatement_return retval = new ifStatement_return();
        retval.start = input.LT(1);
        int ifStatement_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken IF97 = null;
        condition_return condition98 = null;

        statement_return statement99 = null;

        elseClause_return elseClause100 = null;
        
        
        CommonTree IF97_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 39) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:683:4: ( IF condition statement ( ( ELSE )=> elseClause )? )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:683:4: IF condition statement ( ( ELSE )=> elseClause )?
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	IF97 = (CommonToken)input.LT(1);
            	Match(input,IF,FOLLOW_IF_in_ifStatement2138); if (failed) return retval;
            	if ( backtracking==0 ) {
            	IF97_tree = (CommonTree)adaptor.Create(IF97);
            	root_0 = (CommonTree)adaptor.BecomeRoot(IF97_tree, root_0);
            	}
            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append("if");
            	}
            	PushFollow(FOLLOW_condition_in_ifStatement2150);
            	condition98 = condition();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, condition98.Tree);
            	if ( backtracking == 0 ) 
            	{
            	   
            	}
            	if ( backtracking == 0 ) 
            	{
            	  
            	  									buffer.Append( (options.NewlineAfterCondition ? NewLine + tab : "") + "{"); 
            	  									CurrentTab++;
            	  									int next_test = input.LA(1);
            	  									if(next_test != ASLexer.LCURLY)	buffer.Append(NewLine + tab);
            	  								
            	}
            	PushFollow(FOLLOW_statement_in_ifStatement2169);
            	statement99 = statement();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, statement99.Tree);
            	if ( backtracking == 0 ) 
            	{
            	  
            	  									CurrentTab--;
            	  									buffer.Append(NewLine + tab);
            	  									buffer.Append("}");
            	  								
            	}
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:697:3: ( ( ELSE )=> elseClause )?
            	int alt29 = 2;
            	int LA29_0 = input.LA(1);
            	
            	if ( (LA29_0 == ELSE) )
            	{
            	    int LA29_1 = input.LA(2);
            	    
            	    if ( (synpred51()) )
            	    {
            	        alt29 = 1;
            	    }
            	}
            	switch (alt29) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:698:4: ( ELSE )=> elseClause
            	        {
            	        	PushFollow(FOLLOW_elseClause_in_ifStatement2192);
            	        	elseClause100 = elseClause();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) adaptor.AddChild(root_0, elseClause100.Tree);
            	        
            	        }
            	        break;
            	
            	}

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 39, ifStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end ifStatement

    public class elseClause_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start elseClause
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:702:1: elseClause : ELSE statement ;
    public elseClause_return elseClause() // throws RecognitionException [1]
    {   
        elseClause_return retval = new elseClause_return();
        retval.start = input.LT(1);
        int elseClause_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken ELSE101 = null;
        statement_return statement102 = null;
        
        
        CommonTree ELSE101_tree=null;
    
        
        	int next_test   = -1;
        	int next_test_2 = -1;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 40) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:707:4: ( ELSE statement )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:707:4: ELSE statement
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	ELSE101 = (CommonToken)input.LT(1);
            	Match(input,ELSE,FOLLOW_ELSE_in_elseClause2212); if (failed) return retval;
            	if ( backtracking==0 ) {
            	ELSE101_tree = (CommonTree)adaptor.Create(ELSE101);
            	root_0 = (CommonTree)adaptor.BecomeRoot(ELSE101_tree, root_0);
            	}
            	if ( backtracking == 0 ) 
            	{
            	  
            	  									buffer.Append(options.NewlineBeforeElse ? NewLine + tab : " ");
            	  									buffer.Append("else");
            	  									
            	  									next_test = input.LA(1);
            	  									if(next_test == ASLexer.IF) {
            	  										buffer.Append(" ");
            	  									} else {
            	  										buffer.Append( (options.NewlineAfterCondition ? NewLine + tab : " ") + "{"); 
            	  										next_test_2 = input.LA(1);
            	  										CurrentTab++;
            	  										if(next_test_2 != ASLexer.LCURLY) buffer.Append(NewLine + tab);										
            	  									}
            	  								
            	}
            	PushFollow(FOLLOW_statement_in_elseClause2223);
            	statement102 = statement();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, statement102.Tree);
            	if ( backtracking == 0 ) 
            	{
            	  
            	  									if(next_test != ASLexer.IF) {
            	  										CurrentTab--;
            	  										buffer.Append(NewLine + tab);
            	  										buffer.Append("}");
            	  									} else {
            	  									}
            	  								
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 40, elseClause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end elseClause

    public class throwStatement_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start throwStatement
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:731:1: throwStatement : 'throw' expression semi ;
    public throwStatement_return throwStatement() // throws RecognitionException [1]
    {   
        throwStatement_return retval = new throwStatement_return();
        retval.start = input.LT(1);
        int throwStatement_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken string_literal103 = null;
        expression_return expression104 = null;

        semi_return semi105 = null;
        
        
        CommonTree string_literal103_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 41) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:732:4: ( 'throw' expression semi )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:732:4: 'throw' expression semi
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	string_literal103 = (CommonToken)input.LT(1);
            	Match(input,176,FOLLOW_176_in_throwStatement2239); if (failed) return retval;
            	if ( backtracking==0 ) {
            	string_literal103_tree = (CommonTree)adaptor.Create(string_literal103);
            	root_0 = (CommonTree)adaptor.BecomeRoot(string_literal103_tree, root_0);
            	}
            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append("throw "); 
            	}
            	PushFollow(FOLLOW_expression_in_throwStatement2244);
            	expression104 = expression();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, expression104.Tree);
            	PushFollow(FOLLOW_semi_in_throwStatement2246);
            	semi105 = semi();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, semi105.Tree);
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 41, throwStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end throwStatement

    public class tryStatement_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start tryStatement
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:735:1: tryStatement : 'try' block ( catchBlock )* ( finallyBlock )? ;
    public tryStatement_return tryStatement() // throws RecognitionException [1]
    {   
        tryStatement_return retval = new tryStatement_return();
        retval.start = input.LT(1);
        int tryStatement_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken string_literal106 = null;
        block_return block107 = null;

        catchBlock_return catchBlock108 = null;

        finallyBlock_return finallyBlock109 = null;
        
        
        CommonTree string_literal106_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 42) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:736:4: ( 'try' block ( catchBlock )* ( finallyBlock )? )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:736:4: 'try' block ( catchBlock )* ( finallyBlock )?
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	string_literal106 = (CommonToken)input.LT(1);
            	Match(input,177,FOLLOW_177_in_tryStatement2257); if (failed) return retval;
            	if ( backtracking==0 ) {
            	string_literal106_tree = (CommonTree)adaptor.Create(string_literal106);
            	adaptor.AddChild(root_0, string_literal106_tree);
            	}
            	if ( backtracking == 0 ) 
            	{
            	   
            	  							buffer.Append("try");
            	  							buffer.Append((options.NewlineAfterCondition ? NewLine + tab : "") + "{"); 
            	  							CurrentTab++;
            	  						
            	}
            	PushFollow(FOLLOW_block_in_tryStatement2265);
            	block107 = block();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, block107.Tree);
            	if ( backtracking == 0 ) 
            	{
            	  
            	  							CurrentTab--;
            	  							buffer.Append(NewLine + tab);
            	  							buffer.Append("}");
            	  						
            	}
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:746:3: ( catchBlock )*
            	do 
            	{
            	    int alt30 = 2;
            	    int LA30_0 = input.LA(1);
            	    
            	    if ( (LA30_0 == 178) )
            	    {
            	        alt30 = 1;
            	    }
            	    
            	
            	    switch (alt30) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:746:5: catchBlock
            			    {
            			    	if ( backtracking == 0 ) 
            			    	{
            			    	   buffer.Append((options.NewlineBeforeElse ? NewLine + tab : " ")); 
            			    	}
            			    	PushFollow(FOLLOW_catchBlock_in_tryStatement2278);
            			    	catchBlock108 = catchBlock();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) adaptor.AddChild(root_0, catchBlock108.Tree);
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop30;
            	    }
            	} while (true);
            	
            	loop30:
            		;	// Stops C# compiler whinging that label 'loop30' has no statements

            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:747:3: ( finallyBlock )?
            	int alt31 = 2;
            	int LA31_0 = input.LA(1);
            	
            	if ( (LA31_0 == 179) )
            	{
            	    alt31 = 1;
            	}
            	switch (alt31) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:747:5: finallyBlock
            	        {
            	        	if ( backtracking == 0 ) 
            	        	{
            	        	   buffer.Append((options.NewlineBeforeElse ? NewLine + tab : " ")); 
            	        	}
            	        	PushFollow(FOLLOW_finallyBlock_in_tryStatement2288);
            	        	finallyBlock109 = finallyBlock();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) adaptor.AddChild(root_0, finallyBlock109.Tree);
            	        
            	        }
            	        break;
            	
            	}

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 42, tryStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end tryStatement

    public class catchBlock_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start catchBlock
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:750:1: catchBlock : 'catch' LPAREN ide= ident ( typeExpression )? RPAREN block ;
    public catchBlock_return catchBlock() // throws RecognitionException [1]
    {   
        catchBlock_return retval = new catchBlock_return();
        retval.start = input.LT(1);
        int catchBlock_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken string_literal110 = null;
        CommonToken LPAREN111 = null;
        CommonToken RPAREN113 = null;
        ident_return ide = null;

        typeExpression_return typeExpression112 = null;

        block_return block114 = null;
        
        
        CommonTree string_literal110_tree=null;
        CommonTree LPAREN111_tree=null;
        CommonTree RPAREN113_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 43) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:751:4: ( 'catch' LPAREN ide= ident ( typeExpression )? RPAREN block )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:751:4: 'catch' LPAREN ide= ident ( typeExpression )? RPAREN block
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	string_literal110 = (CommonToken)input.LT(1);
            	Match(input,178,FOLLOW_178_in_catchBlock2301); if (failed) return retval;
            	if ( backtracking==0 ) {
            	string_literal110_tree = (CommonTree)adaptor.Create(string_literal110);
            	adaptor.AddChild(root_0, string_literal110_tree);
            	}
            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append("catch"); 
            	}
            	LPAREN111 = (CommonToken)input.LT(1);
            	Match(input,LPAREN,FOLLOW_LPAREN_in_catchBlock2308); if (failed) return retval;
            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append("("); 
            	}
            	PushFollow(FOLLOW_ident_in_catchBlock2318);
            	ide = ident();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, ide.Tree);
            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append( ((CommonTree)ide.Tree).Text ); 
            	}
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:754:3: ( typeExpression )?
            	int alt32 = 2;
            	int LA32_0 = input.LA(1);
            	
            	if ( (LA32_0 == COLON) )
            	{
            	    alt32 = 1;
            	}
            	switch (alt32) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:0:0: typeExpression
            	        {
            	        	PushFollow(FOLLOW_typeExpression_in_catchBlock2324);
            	        	typeExpression112 = typeExpression();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) adaptor.AddChild(root_0, typeExpression112.Tree);
            	        
            	        }
            	        break;
            	
            	}

            	RPAREN113 = (CommonToken)input.LT(1);
            	Match(input,RPAREN,FOLLOW_RPAREN_in_catchBlock2330); if (failed) return retval;
            	if ( backtracking == 0 ) 
            	{
            	   
            	  						buffer.Append(")"); 
            	  						buffer.Append((options.NewlineAfterCondition ? NewLine + tab : "") + "{"); 
            	  						CurrentTab++;
            	  					
            	}
            	PushFollow(FOLLOW_block_in_catchBlock2338);
            	block114 = block();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, block114.Tree);
            	if ( backtracking == 0 ) 
            	{
            	  
            	  						CurrentTab--;
            	  						buffer.Append(NewLine + tab);
            	  						buffer.Append("}");
            	  					
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 43, catchBlock_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end catchBlock

    public class finallyBlock_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start finallyBlock
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:767:1: finallyBlock : 'finally' block ;
    public finallyBlock_return finallyBlock() // throws RecognitionException [1]
    {   
        finallyBlock_return retval = new finallyBlock_return();
        retval.start = input.LT(1);
        int finallyBlock_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken string_literal115 = null;
        block_return block116 = null;
        
        
        CommonTree string_literal115_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 44) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:768:4: ( 'finally' block )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:768:4: 'finally' block
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	string_literal115 = (CommonToken)input.LT(1);
            	Match(input,179,FOLLOW_179_in_finallyBlock2352); if (failed) return retval;
            	if ( backtracking==0 ) {
            	string_literal115_tree = (CommonTree)adaptor.Create(string_literal115);
            	adaptor.AddChild(root_0, string_literal115_tree);
            	}
            	if ( backtracking == 0 ) 
            	{
            	   
            	  						buffer.Append("finally"); 
            	  						buffer.Append((options.NewlineAfterCondition ? NewLine + tab : "") + "{"); 
            	  						CurrentTab++;
            	  					
            	}
            	PushFollow(FOLLOW_block_in_finallyBlock2358);
            	block116 = block();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, block116.Tree);
            	if ( backtracking == 0 ) 
            	{
            	  
            	  						CurrentTab--;
            	  						buffer.Append(NewLine + tab);
            	  						buffer.Append("}");
            	  					
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 44, finallyBlock_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end finallyBlock

    public class returnStatement_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start returnStatement
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:780:1: returnStatement : ( RETURN expression semi | RETURN semi );
    public returnStatement_return returnStatement() // throws RecognitionException [1]
    {   
        returnStatement_return retval = new returnStatement_return();
        retval.start = input.LT(1);
        int returnStatement_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken RETURN117 = null;
        CommonToken RETURN120 = null;
        expression_return expression118 = null;

        semi_return semi119 = null;

        semi_return semi121 = null;
        
        
        CommonTree RETURN117_tree=null;
        CommonTree RETURN120_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 45) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:781:4: ( RETURN expression semi | RETURN semi )
            int alt33 = 2;
            int LA33_0 = input.LA(1);
            
            if ( (LA33_0 == RETURN) )
            {
                switch ( input.LA(2) ) 
                {
                case INC:
                	{
                    int LA33_2 = input.LA(3);
                    
                    if ( (synpred55()) )
                    {
                        alt33 = 1;
                    }
                    else if ( (true) )
                    {
                        alt33 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d33s2 =
                            new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 2, input);
                    
                        throw nvae_d33s2;
                    }
                    }
                    break;
                case DEC:
                	{
                    int LA33_3 = input.LA(3);
                    
                    if ( (synpred55()) )
                    {
                        alt33 = 1;
                    }
                    else if ( (true) )
                    {
                        alt33 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d33s3 =
                            new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 3, input);
                    
                        throw nvae_d33s3;
                    }
                    }
                    break;
                case MINUS:
                	{
                    int LA33_4 = input.LA(3);
                    
                    if ( (synpred55()) )
                    {
                        alt33 = 1;
                    }
                    else if ( (true) )
                    {
                        alt33 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d33s4 =
                            new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 4, input);
                    
                        throw nvae_d33s4;
                    }
                    }
                    break;
                case PLUS:
                	{
                    int LA33_5 = input.LA(3);
                    
                    if ( (synpred55()) )
                    {
                        alt33 = 1;
                    }
                    else if ( (true) )
                    {
                        alt33 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d33s5 =
                            new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 5, input);
                    
                        throw nvae_d33s5;
                    }
                    }
                    break;
                case DELETE:
                	{
                    int LA33_6 = input.LA(3);
                    
                    if ( (synpred55()) )
                    {
                        alt33 = 1;
                    }
                    else if ( (true) )
                    {
                        alt33 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d33s6 =
                            new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 6, input);
                    
                        throw nvae_d33s6;
                    }
                    }
                    break;
                case VOID:
                	{
                    int LA33_7 = input.LA(3);
                    
                    if ( (synpred55()) )
                    {
                        alt33 = 1;
                    }
                    else if ( (true) )
                    {
                        alt33 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d33s7 =
                            new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 7, input);
                    
                        throw nvae_d33s7;
                    }
                    }
                    break;
                case TYPEOF:
                	{
                    int LA33_8 = input.LA(3);
                    
                    if ( (synpred55()) )
                    {
                        alt33 = 1;
                    }
                    else if ( (true) )
                    {
                        alt33 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d33s8 =
                            new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 8, input);
                    
                        throw nvae_d33s8;
                    }
                    }
                    break;
                case LNOT:
                	{
                    int LA33_9 = input.LA(3);
                    
                    if ( (synpred55()) )
                    {
                        alt33 = 1;
                    }
                    else if ( (true) )
                    {
                        alt33 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d33s9 =
                            new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 9, input);
                    
                        throw nvae_d33s9;
                    }
                    }
                    break;
                case BNOT:
                	{
                    int LA33_10 = input.LA(3);
                    
                    if ( (synpred55()) )
                    {
                        alt33 = 1;
                    }
                    else if ( (true) )
                    {
                        alt33 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d33s10 =
                            new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 10, input);
                    
                        throw nvae_d33s10;
                    }
                    }
                    break;
                case UNDEFINED:
                	{
                    int LA33_11 = input.LA(3);
                    
                    if ( (synpred55()) )
                    {
                        alt33 = 1;
                    }
                    else if ( (true) )
                    {
                        alt33 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d33s11 =
                            new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 11, input);
                    
                        throw nvae_d33s11;
                    }
                    }
                    break;
                case HEX_LITERAL:
                case DECIMAL_LITERAL:
                case OCTAL_LITERAL:
                case FLOAT_LITERAL:
                	{
                    int LA33_12 = input.LA(3);
                    
                    if ( (synpred55()) )
                    {
                        alt33 = 1;
                    }
                    else if ( (true) )
                    {
                        alt33 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d33s12 =
                            new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 12, input);
                    
                        throw nvae_d33s12;
                    }
                    }
                    break;
                case STRING_LITERAL:
                	{
                    int LA33_13 = input.LA(3);
                    
                    if ( (synpred55()) )
                    {
                        alt33 = 1;
                    }
                    else if ( (true) )
                    {
                        alt33 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d33s13 =
                            new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 13, input);
                    
                        throw nvae_d33s13;
                    }
                    }
                    break;
                case TRUE:
                	{
                    int LA33_14 = input.LA(3);
                    
                    if ( (synpred55()) )
                    {
                        alt33 = 1;
                    }
                    else if ( (true) )
                    {
                        alt33 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d33s14 =
                            new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 14, input);
                    
                        throw nvae_d33s14;
                    }
                    }
                    break;
                case FALSE:
                	{
                    int LA33_15 = input.LA(3);
                    
                    if ( (synpred55()) )
                    {
                        alt33 = 1;
                    }
                    else if ( (true) )
                    {
                        alt33 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d33s15 =
                            new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 15, input);
                    
                        throw nvae_d33s15;
                    }
                    }
                    break;
                case NULL:
                	{
                    int LA33_16 = input.LA(3);
                    
                    if ( (synpred55()) )
                    {
                        alt33 = 1;
                    }
                    else if ( (true) )
                    {
                        alt33 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d33s16 =
                            new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 16, input);
                    
                        throw nvae_d33s16;
                    }
                    }
                    break;
                case LBRACK:
                	{
                    int LA33_17 = input.LA(3);
                    
                    if ( (synpred55()) )
                    {
                        alt33 = 1;
                    }
                    else if ( (true) )
                    {
                        alt33 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d33s17 =
                            new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 17, input);
                    
                        throw nvae_d33s17;
                    }
                    }
                    break;
                case LCURLY:
                	{
                    int LA33_18 = input.LA(3);
                    
                    if ( (synpred55()) )
                    {
                        alt33 = 1;
                    }
                    else if ( (true) )
                    {
                        alt33 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d33s18 =
                            new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 18, input);
                    
                        throw nvae_d33s18;
                    }
                    }
                    break;
                case FUNCTION:
                	{
                    int LA33_19 = input.LA(3);
                    
                    if ( (synpred55()) )
                    {
                        alt33 = 1;
                    }
                    else if ( (true) )
                    {
                        alt33 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d33s19 =
                            new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 19, input);
                    
                        throw nvae_d33s19;
                    }
                    }
                    break;
                case NEW:
                	{
                    int LA33_20 = input.LA(3);
                    
                    if ( (synpred55()) )
                    {
                        alt33 = 1;
                    }
                    else if ( (true) )
                    {
                        alt33 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d33s20 =
                            new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 20, input);
                    
                        throw nvae_d33s20;
                    }
                    }
                    break;
                case LPAREN:
                	{
                    int LA33_21 = input.LA(3);
                    
                    if ( (synpred55()) )
                    {
                        alt33 = 1;
                    }
                    else if ( (true) )
                    {
                        alt33 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d33s21 =
                            new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 21, input);
                    
                        throw nvae_d33s21;
                    }
                    }
                    break;
                case IDENT:
                	{
                    int LA33_22 = input.LA(3);
                    
                    if ( (synpred55()) )
                    {
                        alt33 = 1;
                    }
                    else if ( (true) )
                    {
                        alt33 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d33s22 =
                            new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 22, input);
                    
                        throw nvae_d33s22;
                    }
                    }
                    break;
                case USE:
                	{
                    int LA33_23 = input.LA(3);
                    
                    if ( (synpred55()) )
                    {
                        alt33 = 1;
                    }
                    else if ( (true) )
                    {
                        alt33 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d33s23 =
                            new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 23, input);
                    
                        throw nvae_d33s23;
                    }
                    }
                    break;
                case XML:
                	{
                    int LA33_24 = input.LA(3);
                    
                    if ( (synpred55()) )
                    {
                        alt33 = 1;
                    }
                    else if ( (true) )
                    {
                        alt33 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d33s24 =
                            new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 24, input);
                    
                        throw nvae_d33s24;
                    }
                    }
                    break;
                case DYNAMIC:
                	{
                    int LA33_25 = input.LA(3);
                    
                    if ( (synpred55()) )
                    {
                        alt33 = 1;
                    }
                    else if ( (true) )
                    {
                        alt33 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d33s25 =
                            new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 25, input);
                    
                        throw nvae_d33s25;
                    }
                    }
                    break;
                case IS:
                	{
                    int LA33_26 = input.LA(3);
                    
                    if ( (synpred55()) )
                    {
                        alt33 = 1;
                    }
                    else if ( (true) )
                    {
                        alt33 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d33s26 =
                            new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 26, input);
                    
                        throw nvae_d33s26;
                    }
                    }
                    break;
                case AS:
                	{
                    int LA33_27 = input.LA(3);
                    
                    if ( (synpred55()) )
                    {
                        alt33 = 1;
                    }
                    else if ( (true) )
                    {
                        alt33 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d33s27 =
                            new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 27, input);
                    
                        throw nvae_d33s27;
                    }
                    }
                    break;
                case GET:
                	{
                    int LA33_28 = input.LA(3);
                    
                    if ( (synpred55()) )
                    {
                        alt33 = 1;
                    }
                    else if ( (true) )
                    {
                        alt33 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d33s28 =
                            new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 28, input);
                    
                        throw nvae_d33s28;
                    }
                    }
                    break;
                case SET:
                	{
                    int LA33_29 = input.LA(3);
                    
                    if ( (synpred55()) )
                    {
                        alt33 = 1;
                    }
                    else if ( (true) )
                    {
                        alt33 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d33s29 =
                            new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 29, input);
                    
                        throw nvae_d33s29;
                    }
                    }
                    break;
                case EOF:
                case SEMI:
                case RCURLY:
                case VAR:
                case CONST:
                case IF:
                case ELSE:
                case RETURN:
                case CONTINUE:
                case BREAK:
                case SWITCH:
                case CASE:
                case DEFAULT:
                case FOR:
                case WHILE:
                case DO:
                case WITH:
                case SL_COMMENT:
                case ML_COMMENT:
                case 176:
                case 177:
                	{
                    alt33 = 2;
                    }
                    break;
                	default:
                	    if ( backtracking > 0 ) {failed = true; return retval;}
                	    NoViableAltException nvae_d33s1 =
                	        new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 1, input);
                
                	    throw nvae_d33s1;
                }
            
            }
            else 
            {
                if ( backtracking > 0 ) {failed = true; return retval;}
                NoViableAltException nvae_d33s0 =
                    new NoViableAltException("780:1: returnStatement : ( RETURN expression semi | RETURN semi );", 33, 0, input);
            
                throw nvae_d33s0;
            }
            switch (alt33) 
            {
                case 1 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:781:4: RETURN expression semi
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	RETURN117 = (CommonToken)input.LT(1);
                    	Match(input,RETURN,FOLLOW_RETURN_in_returnStatement2372); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	RETURN117_tree = (CommonTree)adaptor.Create(RETURN117);
                    	root_0 = (CommonTree)adaptor.BecomeRoot(RETURN117_tree, root_0);
                    	}
                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append("return "); 
                    	}
                    	PushFollow(FOLLOW_expression_in_returnStatement2377);
                    	expression118 = expression();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, expression118.Tree);
                    	PushFollow(FOLLOW_semi_in_returnStatement2379);
                    	semi119 = semi();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, semi119.Tree);
                    
                    }
                    break;
                case 2 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:782:4: RETURN semi
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	RETURN120 = (CommonToken)input.LT(1);
                    	Match(input,RETURN,FOLLOW_RETURN_in_returnStatement2384); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	RETURN120_tree = (CommonTree)adaptor.Create(RETURN120);
                    	root_0 = (CommonTree)adaptor.BecomeRoot(RETURN120_tree, root_0);
                    	}
                    	PushFollow(FOLLOW_semi_in_returnStatement2387);
                    	semi121 = semi();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, semi121.Tree);
                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append("return"); 
                    	}
                    
                    }
                    break;
            
            }
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 45, returnStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end returnStatement

    public class continueStatement_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start continueStatement
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:785:1: continueStatement : CONTINUE semi ;
    public continueStatement_return continueStatement() // throws RecognitionException [1]
    {   
        continueStatement_return retval = new continueStatement_return();
        retval.start = input.LT(1);
        int continueStatement_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken CONTINUE122 = null;
        semi_return semi123 = null;
        
        
        CommonTree CONTINUE122_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 46) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:786:4: ( CONTINUE semi )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:786:4: CONTINUE semi
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	CONTINUE122 = (CommonToken)input.LT(1);
            	Match(input,CONTINUE,FOLLOW_CONTINUE_in_continueStatement2402); if (failed) return retval;
            	if ( backtracking==0 ) {
            	CONTINUE122_tree = (CommonTree)adaptor.Create(CONTINUE122);
            	root_0 = (CommonTree)adaptor.BecomeRoot(CONTINUE122_tree, root_0);
            	}
            	PushFollow(FOLLOW_semi_in_continueStatement2405);
            	semi123 = semi();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, semi123.Tree);
            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append("continue"); 
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 46, continueStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end continueStatement

    public class breakStatement_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start breakStatement
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:789:1: breakStatement : BREAK semi ;
    public breakStatement_return breakStatement() // throws RecognitionException [1]
    {   
        breakStatement_return retval = new breakStatement_return();
        retval.start = input.LT(1);
        int breakStatement_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken BREAK124 = null;
        semi_return semi125 = null;
        
        
        CommonTree BREAK124_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 47) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:790:4: ( BREAK semi )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:790:4: BREAK semi
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	BREAK124 = (CommonToken)input.LT(1);
            	Match(input,BREAK,FOLLOW_BREAK_in_breakStatement2418); if (failed) return retval;
            	if ( backtracking==0 ) {
            	BREAK124_tree = (CommonTree)adaptor.Create(BREAK124);
            	root_0 = (CommonTree)adaptor.BecomeRoot(BREAK124_tree, root_0);
            	}
            	PushFollow(FOLLOW_semi_in_breakStatement2421);
            	semi125 = semi();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, semi125.Tree);
            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append("break"); 
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 47, breakStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end breakStatement

    public class switchStatement_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start switchStatement
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:793:1: switchStatement : SWITCH ( condition ) switchBlock ;
    public switchStatement_return switchStatement() // throws RecognitionException [1]
    {   
        switchStatement_return retval = new switchStatement_return();
        retval.start = input.LT(1);
        int switchStatement_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken SWITCH126 = null;
        condition_return condition127 = null;

        switchBlock_return switchBlock128 = null;
        
        
        CommonTree SWITCH126_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 48) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:794:4: ( SWITCH ( condition ) switchBlock )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:794:4: SWITCH ( condition ) switchBlock
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	SWITCH126 = (CommonToken)input.LT(1);
            	Match(input,SWITCH,FOLLOW_SWITCH_in_switchStatement2435); if (failed) return retval;
            	if ( backtracking==0 ) {
            	SWITCH126_tree = (CommonTree)adaptor.Create(SWITCH126);
            	root_0 = (CommonTree)adaptor.BecomeRoot(SWITCH126_tree, root_0);
            	}
            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append("switch"); 
            	}
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:795:3: ( condition )
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:795:4: condition
            	{
            		PushFollow(FOLLOW_condition_in_switchStatement2444);
            		condition127 = condition();
            		followingStackPointer_--;
            		if (failed) return retval;
            		if ( backtracking==0 ) adaptor.AddChild(root_0, condition127.Tree);
            	
            	}

            	PushFollow(FOLLOW_switchBlock_in_switchStatement2449);
            	switchBlock128 = switchBlock();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, switchBlock128.Tree);
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 48, switchStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end switchStatement

    public class switchBlock_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start switchBlock
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:799:1: switchBlock : LCURLY ( caseStatement )* ( defaultStatement )? RCURLY -> ^( BLOCK ( caseStatement )* ( defaultStatement )? ) ;
    public switchBlock_return switchBlock() // throws RecognitionException [1]
    {   
        switchBlock_return retval = new switchBlock_return();
        retval.start = input.LT(1);
        int switchBlock_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken LCURLY129 = null;
        CommonToken RCURLY132 = null;
        caseStatement_return caseStatement130 = null;

        defaultStatement_return defaultStatement131 = null;
        
        
        CommonTree LCURLY129_tree=null;
        CommonTree RCURLY132_tree=null;
        RewriteRuleTokenStream stream_LCURLY = new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY = new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_caseStatement = new RewriteRuleSubtreeStream(adaptor,"rule caseStatement");
        RewriteRuleSubtreeStream stream_defaultStatement = new RewriteRuleSubtreeStream(adaptor,"rule defaultStatement");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 49) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:800:4: ( LCURLY ( caseStatement )* ( defaultStatement )? RCURLY -> ^( BLOCK ( caseStatement )* ( defaultStatement )? ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:800:4: LCURLY ( caseStatement )* ( defaultStatement )? RCURLY
            {
            	LCURLY129 = (CommonToken)input.LT(1);
            	Match(input,LCURLY,FOLLOW_LCURLY_in_switchBlock2460); if (failed) return retval;
            	if ( backtracking==0 ) stream_LCURLY.Add(LCURLY129);

            	if ( backtracking == 0 ) 
            	{
            	   
            	  												buffer.Append((options.NewlineAfterCondition ? NewLine + tab : "") + "{");
            	  												CurrentTab++;
            	  											
            	}
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:804:3: ( caseStatement )*
            	do 
            	{
            	    int alt34 = 2;
            	    int LA34_0 = input.LA(1);
            	    
            	    if ( (LA34_0 == CASE) )
            	    {
            	        alt34 = 1;
            	    }
            	    
            	
            	    switch (alt34) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:804:5: caseStatement
            			    {
            			    	if ( backtracking == 0 ) 
            			    	{
            			    	  buffer.Append(NewLine + tab); 
            			    	}
            			    	PushFollow(FOLLOW_caseStatement_in_switchBlock2477);
            			    	caseStatement130 = caseStatement();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) stream_caseStatement.Add(caseStatement130.Tree);
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop34;
            	    }
            	} while (true);
            	
            	loop34:
            		;	// Stops C# compiler whinging that label 'loop34' has no statements

            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:805:3: ( defaultStatement )?
            	int alt35 = 2;
            	int LA35_0 = input.LA(1);
            	
            	if ( (LA35_0 == DEFAULT) )
            	{
            	    alt35 = 1;
            	}
            	switch (alt35) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:805:5: defaultStatement
            	        {
            	        	if ( backtracking == 0 ) 
            	        	{
            	        	  buffer.Append(NewLine + tab); 
            	        	}
            	        	PushFollow(FOLLOW_defaultStatement_in_switchBlock2487);
            	        	defaultStatement131 = defaultStatement();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) stream_defaultStatement.Add(defaultStatement131.Tree);
            	        
            	        }
            	        break;
            	
            	}

            	RCURLY132 = (CommonToken)input.LT(1);
            	Match(input,RCURLY,FOLLOW_RCURLY_in_switchBlock2493); if (failed) return retval;
            	if ( backtracking==0 ) stream_RCURLY.Add(RCURLY132);

            	if ( backtracking == 0 ) 
            	{
            	  
            	  												CurrentTab--;
            	  												buffer.Append(NewLine + tab);
            	  												buffer.Append("}");
            	  											
            	}
            	
            	// AST REWRITE
            	// elements:          defaultStatement, caseStatement
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 811:3: -> ^( BLOCK ( caseStatement )* ( defaultStatement )? )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:811:6: ^( BLOCK ( caseStatement )* ( defaultStatement )? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(BLOCK, "BLOCK"), root_1);
            	    
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:811:14: ( caseStatement )*
            	    while ( stream_caseStatement.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_caseStatement.Next());
            	    
            	    }
            	    stream_caseStatement.Reset();
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:811:29: ( defaultStatement )?
            	    if ( stream_defaultStatement.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_defaultStatement.Next());
            	    
            	    }
            	    stream_defaultStatement.Reset();
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 49, switchBlock_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end switchBlock

    public class caseStatement_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start caseStatement
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:814:1: caseStatement : CASE expression COLON l= switchStatementList ;
    public caseStatement_return caseStatement() // throws RecognitionException [1]
    {   
        caseStatement_return retval = new caseStatement_return();
        retval.start = input.LT(1);
        int caseStatement_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken CASE133 = null;
        CommonToken COLON135 = null;
        switchStatementList_return l = null;

        expression_return expression134 = null;
        
        
        CommonTree CASE133_tree=null;
        CommonTree COLON135_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 50) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:815:4: ( CASE expression COLON l= switchStatementList )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:815:4: CASE expression COLON l= switchStatementList
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	CASE133 = (CommonToken)input.LT(1);
            	Match(input,CASE,FOLLOW_CASE_in_caseStatement2527); if (failed) return retval;
            	if ( backtracking==0 ) {
            	CASE133_tree = (CommonTree)adaptor.Create(CASE133);
            	root_0 = (CommonTree)adaptor.BecomeRoot(CASE133_tree, root_0);
            	}
            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append("case "); 
            	}
            	PushFollow(FOLLOW_expression_in_caseStatement2536);
            	expression134 = expression();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, expression134.Tree);
            	COLON135 = (CommonToken)input.LT(1);
            	Match(input,COLON,FOLLOW_COLON_in_caseStatement2541); if (failed) return retval;
            	if ( backtracking == 0 ) 
            	{
            	   
            	  						buffer.Append(":");  
            	  						CurrentTab++;
            	  					
            	}
            	PushFollow(FOLLOW_switchStatementList_in_caseStatement2551);
            	l = switchStatementList();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, l.Tree);
            	if ( backtracking == 0 ) 
            	{
            	   CurrentTab--; 
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 50, caseStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end caseStatement

    public class defaultStatement_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start defaultStatement
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:825:1: defaultStatement : DEFAULT COLON l= switchStatementList ;
    public defaultStatement_return defaultStatement() // throws RecognitionException [1]
    {   
        defaultStatement_return retval = new defaultStatement_return();
        retval.start = input.LT(1);
        int defaultStatement_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken DEFAULT136 = null;
        CommonToken COLON137 = null;
        switchStatementList_return l = null;
        
        
        CommonTree DEFAULT136_tree=null;
        CommonTree COLON137_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 51) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:826:4: ( DEFAULT COLON l= switchStatementList )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:826:4: DEFAULT COLON l= switchStatementList
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	DEFAULT136 = (CommonToken)input.LT(1);
            	Match(input,DEFAULT,FOLLOW_DEFAULT_in_defaultStatement2570); if (failed) return retval;
            	if ( backtracking==0 ) {
            	DEFAULT136_tree = (CommonTree)adaptor.Create(DEFAULT136);
            	root_0 = (CommonTree)adaptor.BecomeRoot(DEFAULT136_tree, root_0);
            	}
            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append("default"); 
            	}
            	COLON137 = (CommonToken)input.LT(1);
            	Match(input,COLON,FOLLOW_COLON_in_defaultStatement2577); if (failed) return retval;
            	if ( backtracking == 0 ) 
            	{
            	   
            	  						buffer.Append(":"); 
            	  						CurrentTab++;
            	  					
            	}
            	PushFollow(FOLLOW_switchStatementList_in_defaultStatement2587);
            	l = switchStatementList();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, l.Tree);
            	if ( backtracking == 0 ) 
            	{
            	   CurrentTab--; 
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 51, defaultStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end defaultStatement

    public class switchStatementList_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start switchStatementList
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:835:1: switchStatementList : ( statement )* -> ^( SWITCH_STATEMENT_LIST ( statement )* ) ;
    public switchStatementList_return switchStatementList() // throws RecognitionException [1]
    {   
        switchStatementList_return retval = new switchStatementList_return();
        retval.start = input.LT(1);
        int switchStatementList_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        statement_return statement138 = null;
        
        
        RewriteRuleSubtreeStream stream_statement = new RewriteRuleSubtreeStream(adaptor,"rule statement");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 52) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:836:4: ( ( statement )* -> ^( SWITCH_STATEMENT_LIST ( statement )* ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:836:4: ( statement )*
            {
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:836:4: ( statement )*
            	do 
            	{
            	    int alt36 = 2;
            	    int LA36_0 = input.LA(1);
            	    
            	    if ( (LA36_0 == SEMI || LA36_0 == LCURLY || (LA36_0 >= STRING_LITERAL && LA36_0 <= CONST) || LA36_0 == LPAREN || LA36_0 == IF || (LA36_0 >= RETURN && LA36_0 <= SWITCH) || LA36_0 == FOR || (LA36_0 >= WHILE && LA36_0 <= VOID) || LA36_0 == IDENT || LA36_0 == LBRACK || LA36_0 == DYNAMIC || (LA36_0 >= IS && LA36_0 <= AS) || (LA36_0 >= PLUS && LA36_0 <= MINUS) || (LA36_0 >= INC && LA36_0 <= XML) || (LA36_0 >= 176 && LA36_0 <= 177)) )
            	    {
            	        alt36 = 1;
            	    }
            	    
            	
            	    switch (alt36) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:836:6: statement
            			    {
            			    	if ( backtracking == 0 ) 
            			    	{
            			    	  buffer.Append(NewLine + tab); 
            			    	}
            			    	PushFollow(FOLLOW_statement_in_switchStatementList2609);
            			    	statement138 = statement();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) stream_statement.Add(statement138.Tree);
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop36;
            	    }
            	} while (true);
            	
            	loop36:
            		;	// Stops C# compiler whinging that label 'loop36' has no statements

            	
            	// AST REWRITE
            	// elements:          statement
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 836:51: -> ^( SWITCH_STATEMENT_LIST ( statement )* )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:836:54: ^( SWITCH_STATEMENT_LIST ( statement )* )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(SWITCH_STATEMENT_LIST, "SWITCH_STATEMENT_LIST"), root_1);
            	    
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:836:78: ( statement )*
            	    while ( stream_statement.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_statement.Next());
            	    
            	    }
            	    stream_statement.Reset();
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 52, switchStatementList_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end switchStatementList

    public class forStatement_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start forStatement
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:839:1: forStatement : f= FOR LPAREN ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) ) ;
    public forStatement_return forStatement() // throws RecognitionException [1]
    {   
        InOperator_stack.Push(new InOperator_scope());
    
        forStatement_return retval = new forStatement_return();
        retval.start = input.LT(1);
        int forStatement_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken f = null;
        CommonToken LPAREN139 = null;
        CommonToken RPAREN141 = null;
        CommonToken RPAREN144 = null;
        forInClause_return forInClause140 = null;

        statement_return statement142 = null;

        traditionalForClause_return traditionalForClause143 = null;

        statement_return statement145 = null;
        
        
        CommonTree f_tree=null;
        CommonTree LPAREN139_tree=null;
        CommonTree RPAREN141_tree=null;
        CommonTree RPAREN144_tree=null;
        RewriteRuleTokenStream stream_FOR = new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_statement = new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_traditionalForClause = new RewriteRuleSubtreeStream(adaptor,"rule traditionalForClause");
        RewriteRuleSubtreeStream stream_forInClause = new RewriteRuleSubtreeStream(adaptor,"rule forInClause");
        
        	((InOperator_scope)InOperator_stack.Peek()).allowed =  false;
        	int next_node = -1;
        	int next_node_2 = -1;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 53) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:846:4: (f= FOR LPAREN ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:846:4: f= FOR LPAREN ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )
            {
            	f = (CommonToken)input.LT(1);
            	Match(input,FOR,FOLLOW_FOR_in_forStatement2643); if (failed) return retval;
            	if ( backtracking==0 ) stream_FOR.Add(f);

            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append("for"); 
            	}
            	LPAREN139 = (CommonToken)input.LT(1);
            	Match(input,LPAREN,FOLLOW_LPAREN_in_forStatement2651); if (failed) return retval;
            	if ( backtracking==0 ) stream_LPAREN.Add(LPAREN139);

            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append(options.SpaceBeforeMethodDef ? " (" : "(");   
            	}
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:848:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )
            	int alt37 = 2;
            	switch ( input.LA(1) ) 
            	{
            	case VAR:
            	case CONST:
            		{
            	    switch ( input.LA(2) ) 
            	    {
            	    case IDENT:
            	    	{
            	        int LA37_31 = input.LA(3);
            	        
            	        if ( (synpred59()) )
            	        {
            	            alt37 = 1;
            	        }
            	        else if ( (true) )
            	        {
            	            alt37 = 2;
            	        }
            	        else 
            	        {
            	            if ( backtracking > 0 ) {failed = true; return retval;}
            	            NoViableAltException nvae_d37s31 =
            	                new NoViableAltException("848:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 37, 31, input);
            	        
            	            throw nvae_d37s31;
            	        }
            	        }
            	        break;
            	    case USE:
            	    	{
            	        int LA37_32 = input.LA(3);
            	        
            	        if ( (synpred59()) )
            	        {
            	            alt37 = 1;
            	        }
            	        else if ( (true) )
            	        {
            	            alt37 = 2;
            	        }
            	        else 
            	        {
            	            if ( backtracking > 0 ) {failed = true; return retval;}
            	            NoViableAltException nvae_d37s32 =
            	                new NoViableAltException("848:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 37, 32, input);
            	        
            	            throw nvae_d37s32;
            	        }
            	        }
            	        break;
            	    case XML:
            	    	{
            	        int LA37_33 = input.LA(3);
            	        
            	        if ( (synpred59()) )
            	        {
            	            alt37 = 1;
            	        }
            	        else if ( (true) )
            	        {
            	            alt37 = 2;
            	        }
            	        else 
            	        {
            	            if ( backtracking > 0 ) {failed = true; return retval;}
            	            NoViableAltException nvae_d37s33 =
            	                new NoViableAltException("848:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 37, 33, input);
            	        
            	            throw nvae_d37s33;
            	        }
            	        }
            	        break;
            	    case DYNAMIC:
            	    	{
            	        int LA37_34 = input.LA(3);
            	        
            	        if ( (synpred59()) )
            	        {
            	            alt37 = 1;
            	        }
            	        else if ( (true) )
            	        {
            	            alt37 = 2;
            	        }
            	        else 
            	        {
            	            if ( backtracking > 0 ) {failed = true; return retval;}
            	            NoViableAltException nvae_d37s34 =
            	                new NoViableAltException("848:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 37, 34, input);
            	        
            	            throw nvae_d37s34;
            	        }
            	        }
            	        break;
            	    case IS:
            	    	{
            	        int LA37_35 = input.LA(3);
            	        
            	        if ( (synpred59()) )
            	        {
            	            alt37 = 1;
            	        }
            	        else if ( (true) )
            	        {
            	            alt37 = 2;
            	        }
            	        else 
            	        {
            	            if ( backtracking > 0 ) {failed = true; return retval;}
            	            NoViableAltException nvae_d37s35 =
            	                new NoViableAltException("848:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 37, 35, input);
            	        
            	            throw nvae_d37s35;
            	        }
            	        }
            	        break;
            	    case AS:
            	    	{
            	        int LA37_36 = input.LA(3);
            	        
            	        if ( (synpred59()) )
            	        {
            	            alt37 = 1;
            	        }
            	        else if ( (true) )
            	        {
            	            alt37 = 2;
            	        }
            	        else 
            	        {
            	            if ( backtracking > 0 ) {failed = true; return retval;}
            	            NoViableAltException nvae_d37s36 =
            	                new NoViableAltException("848:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 37, 36, input);
            	        
            	            throw nvae_d37s36;
            	        }
            	        }
            	        break;
            	    case GET:
            	    	{
            	        int LA37_37 = input.LA(3);
            	        
            	        if ( (synpred59()) )
            	        {
            	            alt37 = 1;
            	        }
            	        else if ( (true) )
            	        {
            	            alt37 = 2;
            	        }
            	        else 
            	        {
            	            if ( backtracking > 0 ) {failed = true; return retval;}
            	            NoViableAltException nvae_d37s37 =
            	                new NoViableAltException("848:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 37, 37, input);
            	        
            	            throw nvae_d37s37;
            	        }
            	        }
            	        break;
            	    case SET:
            	    	{
            	        int LA37_38 = input.LA(3);
            	        
            	        if ( (synpred59()) )
            	        {
            	            alt37 = 1;
            	        }
            	        else if ( (true) )
            	        {
            	            alt37 = 2;
            	        }
            	        else 
            	        {
            	            if ( backtracking > 0 ) {failed = true; return retval;}
            	            NoViableAltException nvae_d37s38 =
            	                new NoViableAltException("848:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 37, 38, input);
            	        
            	            throw nvae_d37s38;
            	        }
            	        }
            	        break;
            	    	default:
            	    	    if ( backtracking > 0 ) {failed = true; return retval;}
            	    	    NoViableAltException nvae_d37s1 =
            	    	        new NoViableAltException("848:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 37, 1, input);
            	    
            	    	    throw nvae_d37s1;
            	    }
            	
            	    }
            	    break;
            	case IDENT:
            		{
            	    int LA37_2 = input.LA(2);
            	    
            	    if ( (LA37_2 == SEMI || LA37_2 == COMMA || (LA37_2 >= ASSIGN && LA37_2 <= LPAREN) || (LA37_2 >= STAR && LA37_2 <= DOT) || LA37_2 == LBRACK || (LA37_2 >= STAR_ASSIGN && LA37_2 <= DEC) || (LA37_2 >= 185 && LA37_2 <= 186)) )
            	    {
            	        alt37 = 2;
            	    }
            	    else if ( (LA37_2 == IN) )
            	    {
            	        int LA37_47 = input.LA(3);
            	        
            	        if ( (synpred59()) )
            	        {
            	            alt37 = 1;
            	        }
            	        else if ( (true) )
            	        {
            	            alt37 = 2;
            	        }
            	        else 
            	        {
            	            if ( backtracking > 0 ) {failed = true; return retval;}
            	            NoViableAltException nvae_d37s47 =
            	                new NoViableAltException("848:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 37, 47, input);
            	        
            	            throw nvae_d37s47;
            	        }
            	    }
            	    else 
            	    {
            	        if ( backtracking > 0 ) {failed = true; return retval;}
            	        NoViableAltException nvae_d37s2 =
            	            new NoViableAltException("848:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 37, 2, input);
            	    
            	        throw nvae_d37s2;
            	    }
            	    }
            	    break;
            	case USE:
            		{
            	    int LA37_3 = input.LA(2);
            	    
            	    if ( (LA37_3 == SEMI || LA37_3 == COMMA || (LA37_3 >= ASSIGN && LA37_3 <= LPAREN) || (LA37_3 >= STAR && LA37_3 <= DOT) || LA37_3 == LBRACK || (LA37_3 >= STAR_ASSIGN && LA37_3 <= DEC) || (LA37_3 >= 185 && LA37_3 <= 186)) )
            	    {
            	        alt37 = 2;
            	    }
            	    else if ( (LA37_3 == IN) )
            	    {
            	        int LA37_73 = input.LA(3);
            	        
            	        if ( (synpred59()) )
            	        {
            	            alt37 = 1;
            	        }
            	        else if ( (true) )
            	        {
            	            alt37 = 2;
            	        }
            	        else 
            	        {
            	            if ( backtracking > 0 ) {failed = true; return retval;}
            	            NoViableAltException nvae_d37s73 =
            	                new NoViableAltException("848:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 37, 73, input);
            	        
            	            throw nvae_d37s73;
            	        }
            	    }
            	    else 
            	    {
            	        if ( backtracking > 0 ) {failed = true; return retval;}
            	        NoViableAltException nvae_d37s3 =
            	            new NoViableAltException("848:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 37, 3, input);
            	    
            	        throw nvae_d37s3;
            	    }
            	    }
            	    break;
            	case XML:
            		{
            	    int LA37_4 = input.LA(2);
            	    
            	    if ( (LA37_4 == SEMI || LA37_4 == COMMA || (LA37_4 >= ASSIGN && LA37_4 <= LPAREN) || (LA37_4 >= STAR && LA37_4 <= DOT) || LA37_4 == LBRACK || (LA37_4 >= STAR_ASSIGN && LA37_4 <= DEC) || (LA37_4 >= 185 && LA37_4 <= 186)) )
            	    {
            	        alt37 = 2;
            	    }
            	    else if ( (LA37_4 == IN) )
            	    {
            	        int LA37_99 = input.LA(3);
            	        
            	        if ( (synpred59()) )
            	        {
            	            alt37 = 1;
            	        }
            	        else if ( (true) )
            	        {
            	            alt37 = 2;
            	        }
            	        else 
            	        {
            	            if ( backtracking > 0 ) {failed = true; return retval;}
            	            NoViableAltException nvae_d37s99 =
            	                new NoViableAltException("848:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 37, 99, input);
            	        
            	            throw nvae_d37s99;
            	        }
            	    }
            	    else 
            	    {
            	        if ( backtracking > 0 ) {failed = true; return retval;}
            	        NoViableAltException nvae_d37s4 =
            	            new NoViableAltException("848:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 37, 4, input);
            	    
            	        throw nvae_d37s4;
            	    }
            	    }
            	    break;
            	case DYNAMIC:
            		{
            	    int LA37_5 = input.LA(2);
            	    
            	    if ( (LA37_5 == SEMI || LA37_5 == COMMA || (LA37_5 >= ASSIGN && LA37_5 <= LPAREN) || (LA37_5 >= STAR && LA37_5 <= DOT) || LA37_5 == LBRACK || (LA37_5 >= STAR_ASSIGN && LA37_5 <= DEC) || (LA37_5 >= 185 && LA37_5 <= 186)) )
            	    {
            	        alt37 = 2;
            	    }
            	    else if ( (LA37_5 == IN) )
            	    {
            	        int LA37_125 = input.LA(3);
            	        
            	        if ( (synpred59()) )
            	        {
            	            alt37 = 1;
            	        }
            	        else if ( (true) )
            	        {
            	            alt37 = 2;
            	        }
            	        else 
            	        {
            	            if ( backtracking > 0 ) {failed = true; return retval;}
            	            NoViableAltException nvae_d37s125 =
            	                new NoViableAltException("848:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 37, 125, input);
            	        
            	            throw nvae_d37s125;
            	        }
            	    }
            	    else 
            	    {
            	        if ( backtracking > 0 ) {failed = true; return retval;}
            	        NoViableAltException nvae_d37s5 =
            	            new NoViableAltException("848:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 37, 5, input);
            	    
            	        throw nvae_d37s5;
            	    }
            	    }
            	    break;
            	case IS:
            		{
            	    int LA37_6 = input.LA(2);
            	    
            	    if ( (LA37_6 == SEMI || LA37_6 == COMMA || (LA37_6 >= ASSIGN && LA37_6 <= LPAREN) || (LA37_6 >= STAR && LA37_6 <= DOT) || LA37_6 == LBRACK || (LA37_6 >= STAR_ASSIGN && LA37_6 <= DEC) || (LA37_6 >= 185 && LA37_6 <= 186)) )
            	    {
            	        alt37 = 2;
            	    }
            	    else if ( (LA37_6 == IN) )
            	    {
            	        int LA37_151 = input.LA(3);
            	        
            	        if ( (synpred59()) )
            	        {
            	            alt37 = 1;
            	        }
            	        else if ( (true) )
            	        {
            	            alt37 = 2;
            	        }
            	        else 
            	        {
            	            if ( backtracking > 0 ) {failed = true; return retval;}
            	            NoViableAltException nvae_d37s151 =
            	                new NoViableAltException("848:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 37, 151, input);
            	        
            	            throw nvae_d37s151;
            	        }
            	    }
            	    else 
            	    {
            	        if ( backtracking > 0 ) {failed = true; return retval;}
            	        NoViableAltException nvae_d37s6 =
            	            new NoViableAltException("848:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 37, 6, input);
            	    
            	        throw nvae_d37s6;
            	    }
            	    }
            	    break;
            	case AS:
            		{
            	    int LA37_7 = input.LA(2);
            	    
            	    if ( (LA37_7 == SEMI || LA37_7 == COMMA || (LA37_7 >= ASSIGN && LA37_7 <= LPAREN) || (LA37_7 >= STAR && LA37_7 <= DOT) || LA37_7 == LBRACK || (LA37_7 >= STAR_ASSIGN && LA37_7 <= DEC) || (LA37_7 >= 185 && LA37_7 <= 186)) )
            	    {
            	        alt37 = 2;
            	    }
            	    else if ( (LA37_7 == IN) )
            	    {
            	        int LA37_177 = input.LA(3);
            	        
            	        if ( (synpred59()) )
            	        {
            	            alt37 = 1;
            	        }
            	        else if ( (true) )
            	        {
            	            alt37 = 2;
            	        }
            	        else 
            	        {
            	            if ( backtracking > 0 ) {failed = true; return retval;}
            	            NoViableAltException nvae_d37s177 =
            	                new NoViableAltException("848:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 37, 177, input);
            	        
            	            throw nvae_d37s177;
            	        }
            	    }
            	    else 
            	    {
            	        if ( backtracking > 0 ) {failed = true; return retval;}
            	        NoViableAltException nvae_d37s7 =
            	            new NoViableAltException("848:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 37, 7, input);
            	    
            	        throw nvae_d37s7;
            	    }
            	    }
            	    break;
            	case GET:
            		{
            	    int LA37_8 = input.LA(2);
            	    
            	    if ( (LA37_8 == SEMI || LA37_8 == COMMA || (LA37_8 >= ASSIGN && LA37_8 <= LPAREN) || (LA37_8 >= STAR && LA37_8 <= DOT) || LA37_8 == LBRACK || (LA37_8 >= STAR_ASSIGN && LA37_8 <= DEC) || (LA37_8 >= 185 && LA37_8 <= 186)) )
            	    {
            	        alt37 = 2;
            	    }
            	    else if ( (LA37_8 == IN) )
            	    {
            	        int LA37_203 = input.LA(3);
            	        
            	        if ( (synpred59()) )
            	        {
            	            alt37 = 1;
            	        }
            	        else if ( (true) )
            	        {
            	            alt37 = 2;
            	        }
            	        else 
            	        {
            	            if ( backtracking > 0 ) {failed = true; return retval;}
            	            NoViableAltException nvae_d37s203 =
            	                new NoViableAltException("848:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 37, 203, input);
            	        
            	            throw nvae_d37s203;
            	        }
            	    }
            	    else 
            	    {
            	        if ( backtracking > 0 ) {failed = true; return retval;}
            	        NoViableAltException nvae_d37s8 =
            	            new NoViableAltException("848:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 37, 8, input);
            	    
            	        throw nvae_d37s8;
            	    }
            	    }
            	    break;
            	case SET:
            		{
            	    int LA37_9 = input.LA(2);
            	    
            	    if ( (LA37_9 == SEMI || LA37_9 == COMMA || (LA37_9 >= ASSIGN && LA37_9 <= LPAREN) || (LA37_9 >= STAR && LA37_9 <= DOT) || LA37_9 == LBRACK || (LA37_9 >= STAR_ASSIGN && LA37_9 <= DEC) || (LA37_9 >= 185 && LA37_9 <= 186)) )
            	    {
            	        alt37 = 2;
            	    }
            	    else if ( (LA37_9 == IN) )
            	    {
            	        int LA37_229 = input.LA(3);
            	        
            	        if ( (synpred59()) )
            	        {
            	            alt37 = 1;
            	        }
            	        else if ( (true) )
            	        {
            	            alt37 = 2;
            	        }
            	        else 
            	        {
            	            if ( backtracking > 0 ) {failed = true; return retval;}
            	            NoViableAltException nvae_d37s229 =
            	                new NoViableAltException("848:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 37, 229, input);
            	        
            	            throw nvae_d37s229;
            	        }
            	    }
            	    else 
            	    {
            	        if ( backtracking > 0 ) {failed = true; return retval;}
            	        NoViableAltException nvae_d37s9 =
            	            new NoViableAltException("848:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 37, 9, input);
            	    
            	        throw nvae_d37s9;
            	    }
            	    }
            	    break;
            	case SEMI:
            	case LCURLY:
            	case STRING_LITERAL:
            	case FUNCTION:
            	case LPAREN:
            	case VOID:
            	case LBRACK:
            	case PLUS:
            	case MINUS:
            	case INC:
            	case DEC:
            	case DELETE:
            	case TYPEOF:
            	case LNOT:
            	case BNOT:
            	case UNDEFINED:
            	case TRUE:
            	case FALSE:
            	case NULL:
            	case HEX_LITERAL:
            	case DECIMAL_LITERAL:
            	case OCTAL_LITERAL:
            	case FLOAT_LITERAL:
            	case NEW:
            		{
            	    alt37 = 2;
            	    }
            	    break;
            		default:
            		    if ( backtracking > 0 ) {failed = true; return retval;}
            		    NoViableAltException nvae_d37s0 =
            		        new NoViableAltException("848:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 37, 0, input);
            	
            		    throw nvae_d37s0;
            	}
            	
            	switch (alt37) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:849:4: ( forInClauseDecl IN )=> forInClause RPAREN statement
            	        {
            	        	PushFollow(FOLLOW_forInClause_in_forStatement2671);
            	        	forInClause140 = forInClause();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) stream_forInClause.Add(forInClause140.Tree);
            	        	RPAREN141 = (CommonToken)input.LT(1);
            	        	Match(input,RPAREN,FOLLOW_RPAREN_in_forStatement2677); if (failed) return retval;
            	        	if ( backtracking==0 ) stream_RPAREN.Add(RPAREN141);

            	        	if ( backtracking == 0 ) 
            	        	{
            	        	   
            	        	  												buffer.Append(")"); 
            	        	  												buffer.Append((options.NewlineAfterCondition ? NewLine + tab : "") + "{"); 
            	        	  												CurrentTab++;
            	        	  												int next_test = input.LA(1);
            	        	  												if(next_test != ASLexer.LCURLY)	buffer.Append(NewLine + tab);												
            	        	  											
            	        	}
            	        	PushFollow(FOLLOW_statement_in_forStatement2690);
            	        	statement142 = statement();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) stream_statement.Add(statement142.Tree);
            	        	if ( backtracking == 0 ) 
            	        	{
            	        	  
            	        	  												CurrentTab--;
            	        	  												buffer.Append(NewLine + tab);
            	        	  												buffer.Append("}");
            	        	  											
            	        	}
            	        	
            	        	// AST REWRITE
            	        	// elements:          forInClause, statement
            	        	// token labels:      
            	        	// rule labels:       retval
            	        	// token list labels: 
            	        	// rule list labels:  
            	        	if ( backtracking==0 ) {
            	        	retval.tree = root_0;
            	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	        	
            	        	root_0 = (CommonTree)adaptor.GetNilNode();
            	        	// 862:4: -> ^( FOR_IN[$f] forInClause statement )
            	        	{
            	        	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:862:7: ^( FOR_IN[$f] forInClause statement )
            	        	    {
            	        	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	        	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(FOR_IN, f), root_1);
            	        	    
            	        	    adaptor.AddChild(root_1, stream_forInClause.Next());
            	        	    adaptor.AddChild(root_1, stream_statement.Next());
            	        	    
            	        	    adaptor.AddChild(root_0, root_1);
            	        	    }
            	        	
            	        	}
            	        	
            	        	}
            	        
            	        }
            	        break;
            	    case 2 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:864:6: traditionalForClause RPAREN statement
            	        {
            	        	PushFollow(FOLLOW_traditionalForClause_in_forStatement2719);
            	        	traditionalForClause143 = traditionalForClause();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) stream_traditionalForClause.Add(traditionalForClause143.Tree);
            	        	RPAREN144 = (CommonToken)input.LT(1);
            	        	Match(input,RPAREN,FOLLOW_RPAREN_in_forStatement2721); if (failed) return retval;
            	        	if ( backtracking==0 ) stream_RPAREN.Add(RPAREN144);

            	        	if ( backtracking == 0 ) 
            	        	{
            	        	   
            	        	  												buffer.Append(")"); 
            	        	  												buffer.Append((options.NewlineAfterCondition ? NewLine + tab : "") + "{"); 
            	        	  												CurrentTab++;
            	        	  												int next_test_2 = input.LA(1);
            	        	  												if(next_test_2 != ASLexer.LCURLY)	buffer.Append(NewLine + tab);												
            	        	  											
            	        	}
            	        	PushFollow(FOLLOW_statement_in_forStatement2730);
            	        	statement145 = statement();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) stream_statement.Add(statement145.Tree);
            	        	if ( backtracking == 0 ) 
            	        	{
            	        	  
            	        	  												CurrentTab--;
            	        	  												buffer.Append(NewLine + tab);
            	        	  												buffer.Append("}");
            	        	  											
            	        	}
            	        	
            	        	// AST REWRITE
            	        	// elements:          f, traditionalForClause, statement
            	        	// token labels:      f
            	        	// rule labels:       retval
            	        	// token list labels: 
            	        	// rule list labels:  
            	        	if ( backtracking==0 ) {
            	        	retval.tree = root_0;
            	        	RewriteRuleTokenStream stream_f = new RewriteRuleTokenStream(adaptor, "token f", f);
            	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	        	
            	        	root_0 = (CommonTree)adaptor.GetNilNode();
            	        	// 876:4: -> ^( $f traditionalForClause statement )
            	        	{
            	        	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:876:7: ^( $f traditionalForClause statement )
            	        	    {
            	        	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	        	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_f.Next(), root_1);
            	        	    
            	        	    adaptor.AddChild(root_1, stream_traditionalForClause.Next());
            	        	    adaptor.AddChild(root_1, stream_statement.Next());
            	        	    
            	        	    adaptor.AddChild(root_0, root_1);
            	        	    }
            	        	
            	        	}
            	        	
            	        	}
            	        
            	        }
            	        break;
            	
            	}

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 53, forStatement_StartIndex); 
            }
            InOperator_stack.Pop();
    
        }
        return retval;
    }
    // $ANTLR end forStatement

    public class traditionalForClause_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start traditionalForClause
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:880:1: traditionalForClause : a= forInit SEMI b= forCond SEMI c= forIter ;
    public traditionalForClause_return traditionalForClause() // throws RecognitionException [1]
    {   
        traditionalForClause_return retval = new traditionalForClause_return();
        retval.start = input.LT(1);
        int traditionalForClause_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken SEMI146 = null;
        CommonToken SEMI147 = null;
        forInit_return a = null;

        forCond_return b = null;

        forIter_return c = null;
        
        
        CommonTree SEMI146_tree=null;
        CommonTree SEMI147_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 54) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:881:4: (a= forInit SEMI b= forCond SEMI c= forIter )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:881:4: a= forInit SEMI b= forCond SEMI c= forIter
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	PushFollow(FOLLOW_forInit_in_traditionalForClause2767);
            	a = forInit();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, a.Tree);
            	SEMI146 = (CommonToken)input.LT(1);
            	Match(input,SEMI,FOLLOW_SEMI_in_traditionalForClause2769); if (failed) return retval;
            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append(options.SpaceBetweenArguments ? "; " : ";"); 
            	}
            	PushFollow(FOLLOW_forCond_in_traditionalForClause2779);
            	b = forCond();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, b.Tree);
            	SEMI147 = (CommonToken)input.LT(1);
            	Match(input,SEMI,FOLLOW_SEMI_in_traditionalForClause2781); if (failed) return retval;
            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append(options.SpaceBetweenArguments ? "; " : ";"); 
            	}
            	PushFollow(FOLLOW_forIter_in_traditionalForClause2791);
            	c = forIter();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, c.Tree);
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 54, traditionalForClause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end traditionalForClause

    public class forInClause_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start forInClause
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:886:1: forInClause : forInClauseDecl IN forInClauseTail ;
    public forInClause_return forInClause() // throws RecognitionException [1]
    {   
        forInClause_return retval = new forInClause_return();
        retval.start = input.LT(1);
        int forInClause_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken IN149 = null;
        forInClauseDecl_return forInClauseDecl148 = null;

        forInClauseTail_return forInClauseTail150 = null;
        
        
        CommonTree IN149_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 55) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:887:4: ( forInClauseDecl IN forInClauseTail )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:887:4: forInClauseDecl IN forInClauseTail
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	PushFollow(FOLLOW_forInClauseDecl_in_forInClause2803);
            	forInClauseDecl148 = forInClauseDecl();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, forInClauseDecl148.Tree);
            	IN149 = (CommonToken)input.LT(1);
            	Match(input,IN,FOLLOW_IN_in_forInClause2805); if (failed) return retval;
            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append(" in "); 
            	}
            	PushFollow(FOLLOW_forInClauseTail_in_forInClause2810);
            	forInClauseTail150 = forInClauseTail();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, forInClauseTail150.Tree);
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 55, forInClause_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end forInClause

    public class forInClauseDecl_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start forInClauseDecl
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:890:1: forInClauseDecl : ( declaration | ide= ident );
    public forInClauseDecl_return forInClauseDecl() // throws RecognitionException [1]
    {   
        InOperator_stack.Push(new InOperator_scope());
    
        forInClauseDecl_return retval = new forInClauseDecl_return();
        retval.start = input.LT(1);
        int forInClauseDecl_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        ident_return ide = null;

        declaration_return declaration151 = null;
        
        
    
        
        	((InOperator_scope)InOperator_stack.Peek()).allowed =  false;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 56) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:895:4: ( declaration | ide= ident )
            int alt38 = 2;
            int LA38_0 = input.LA(1);
            
            if ( ((LA38_0 >= VAR && LA38_0 <= CONST)) )
            {
                alt38 = 1;
            }
            else if ( ((LA38_0 >= GET && LA38_0 <= SET) || LA38_0 == IDENT || LA38_0 == DYNAMIC || (LA38_0 >= IS && LA38_0 <= AS) || (LA38_0 >= USE && LA38_0 <= XML)) )
            {
                alt38 = 2;
            }
            else 
            {
                if ( backtracking > 0 ) {failed = true; return retval;}
                NoViableAltException nvae_d38s0 =
                    new NoViableAltException("890:1: forInClauseDecl : ( declaration | ide= ident );", 38, 0, input);
            
                throw nvae_d38s0;
            }
            switch (alt38) 
            {
                case 1 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:895:4: declaration
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_declaration_in_forInClauseDecl2831);
                    	declaration151 = declaration();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, declaration151.Tree);
                    
                    }
                    break;
                case 2 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:896:4: ide= ident
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_ident_in_forInClauseDecl2839);
                    	ide = ident();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, ide.Tree);
                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append( ((CommonTree)ide.Tree).Text ); 
                    	}
                    
                    }
                    break;
            
            }
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 56, forInClauseDecl_StartIndex); 
            }
            InOperator_stack.Pop();
    
        }
        return retval;
    }
    // $ANTLR end forInClauseDecl

    public class forInClauseTail_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start forInClauseTail
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:900:1: forInClauseTail : expressionList ;
    public forInClauseTail_return forInClauseTail() // throws RecognitionException [1]
    {   
        InOperator_stack.Push(new InOperator_scope());
    
        forInClauseTail_return retval = new forInClauseTail_return();
        retval.start = input.LT(1);
        int forInClauseTail_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        expressionList_return expressionList152 = null;
        
        
    
        
        	((InOperator_scope)InOperator_stack.Peek()).allowed =  true;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 57) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:905:4: ( expressionList )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:905:4: expressionList
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	PushFollow(FOLLOW_expressionList_in_forInClauseTail2865);
            	expressionList152 = expressionList();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, expressionList152.Tree);
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 57, forInClauseTail_StartIndex); 
            }
            InOperator_stack.Pop();
    
        }
        return retval;
    }
    // $ANTLR end forInClauseTail

    public class forInit_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start forInit
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:909:1: forInit : ( declaration | expressionList )? -> ^( FOR_INIT ( declaration )? ( expressionList )? ) ;
    public forInit_return forInit() // throws RecognitionException [1]
    {   
        InOperator_stack.Push(new InOperator_scope());
    
        forInit_return retval = new forInit_return();
        retval.start = input.LT(1);
        int forInit_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        declaration_return declaration153 = null;

        expressionList_return expressionList154 = null;
        
        
        RewriteRuleSubtreeStream stream_expressionList = new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_declaration = new RewriteRuleSubtreeStream(adaptor,"rule declaration");
        
        	((InOperator_scope)InOperator_stack.Peek()).allowed =  false;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 58) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:914:4: ( ( declaration | expressionList )? -> ^( FOR_INIT ( declaration )? ( expressionList )? ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:914:4: ( declaration | expressionList )?
            {
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:914:4: ( declaration | expressionList )?
            	int alt39 = 3;
            	int LA39_0 = input.LA(1);
            	
            	if ( ((LA39_0 >= VAR && LA39_0 <= CONST)) )
            	{
            	    alt39 = 1;
            	}
            	else if ( (LA39_0 == LCURLY || (LA39_0 >= STRING_LITERAL && LA39_0 <= SET) || LA39_0 == LPAREN || LA39_0 == VOID || LA39_0 == IDENT || LA39_0 == LBRACK || LA39_0 == DYNAMIC || (LA39_0 >= IS && LA39_0 <= AS) || (LA39_0 >= PLUS && LA39_0 <= MINUS) || (LA39_0 >= INC && LA39_0 <= NEW) || (LA39_0 >= USE && LA39_0 <= XML)) )
            	{
            	    alt39 = 2;
            	}
            	switch (alt39) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:914:5: declaration
            	        {
            	        	PushFollow(FOLLOW_declaration_in_forInit2889);
            	        	declaration153 = declaration();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) stream_declaration.Add(declaration153.Tree);
            	        
            	        }
            	        break;
            	    case 2 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:914:19: expressionList
            	        {
            	        	PushFollow(FOLLOW_expressionList_in_forInit2893);
            	        	expressionList154 = expressionList();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) stream_expressionList.Add(expressionList154.Tree);
            	        
            	        }
            	        break;
            	
            	}

            	
            	// AST REWRITE
            	// elements:          declaration, expressionList
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 915:3: -> ^( FOR_INIT ( declaration )? ( expressionList )? )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:915:6: ^( FOR_INIT ( declaration )? ( expressionList )? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(FOR_INIT, "FOR_INIT"), root_1);
            	    
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:915:17: ( declaration )?
            	    if ( stream_declaration.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_declaration.Next());
            	    
            	    }
            	    stream_declaration.Reset();
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:915:30: ( expressionList )?
            	    if ( stream_expressionList.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_expressionList.Next());
            	    
            	    }
            	    stream_expressionList.Reset();
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 58, forInit_StartIndex); 
            }
            InOperator_stack.Pop();
    
        }
        return retval;
    }
    // $ANTLR end forInit

    public class forCond_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start forCond
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:918:1: forCond : ( expressionList )? -> ^( FOR_CONDITION ( expressionList )? ) ;
    public forCond_return forCond() // throws RecognitionException [1]
    {   
        InOperator_stack.Push(new InOperator_scope());
    
        forCond_return retval = new forCond_return();
        retval.start = input.LT(1);
        int forCond_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        expressionList_return expressionList155 = null;
        
        
        RewriteRuleSubtreeStream stream_expressionList = new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        
        	((InOperator_scope)InOperator_stack.Peek()).allowed =  true;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 59) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:923:4: ( ( expressionList )? -> ^( FOR_CONDITION ( expressionList )? ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:923:4: ( expressionList )?
            {
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:923:4: ( expressionList )?
            	int alt40 = 2;
            	int LA40_0 = input.LA(1);
            	
            	if ( (LA40_0 == LCURLY || (LA40_0 >= STRING_LITERAL && LA40_0 <= SET) || LA40_0 == LPAREN || LA40_0 == VOID || LA40_0 == IDENT || LA40_0 == LBRACK || LA40_0 == DYNAMIC || (LA40_0 >= IS && LA40_0 <= AS) || (LA40_0 >= PLUS && LA40_0 <= MINUS) || (LA40_0 >= INC && LA40_0 <= NEW) || (LA40_0 >= USE && LA40_0 <= XML)) )
            	{
            	    alt40 = 1;
            	}
            	switch (alt40) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:0:0: expressionList
            	        {
            	        	PushFollow(FOLLOW_expressionList_in_forCond2931);
            	        	expressionList155 = expressionList();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) stream_expressionList.Add(expressionList155.Tree);
            	        
            	        }
            	        break;
            	
            	}

            	
            	// AST REWRITE
            	// elements:          expressionList
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 924:3: -> ^( FOR_CONDITION ( expressionList )? )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:924:6: ^( FOR_CONDITION ( expressionList )? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(FOR_CONDITION, "FOR_CONDITION"), root_1);
            	    
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:924:22: ( expressionList )?
            	    if ( stream_expressionList.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_expressionList.Next());
            	    
            	    }
            	    stream_expressionList.Reset();
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 59, forCond_StartIndex); 
            }
            InOperator_stack.Pop();
    
        }
        return retval;
    }
    // $ANTLR end forCond

    public class forIter_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start forIter
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:927:1: forIter : ( expressionList )? -> ^( FOR_ITERATOR ( expressionList )? ) ;
    public forIter_return forIter() // throws RecognitionException [1]
    {   
        InOperator_stack.Push(new InOperator_scope());
    
        forIter_return retval = new forIter_return();
        retval.start = input.LT(1);
        int forIter_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        expressionList_return expressionList156 = null;
        
        
        RewriteRuleSubtreeStream stream_expressionList = new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        
        	((InOperator_scope)InOperator_stack.Peek()).allowed =  true;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 60) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:932:4: ( ( expressionList )? -> ^( FOR_ITERATOR ( expressionList )? ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:932:4: ( expressionList )?
            {
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:932:4: ( expressionList )?
            	int alt41 = 2;
            	int LA41_0 = input.LA(1);
            	
            	if ( (LA41_0 == LCURLY || (LA41_0 >= STRING_LITERAL && LA41_0 <= SET) || LA41_0 == LPAREN || LA41_0 == VOID || LA41_0 == IDENT || LA41_0 == LBRACK || LA41_0 == DYNAMIC || (LA41_0 >= IS && LA41_0 <= AS) || (LA41_0 >= PLUS && LA41_0 <= MINUS) || (LA41_0 >= INC && LA41_0 <= NEW) || (LA41_0 >= USE && LA41_0 <= XML)) )
            	{
            	    alt41 = 1;
            	}
            	switch (alt41) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:0:0: expressionList
            	        {
            	        	PushFollow(FOLLOW_expressionList_in_forIter2964);
            	        	expressionList156 = expressionList();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) stream_expressionList.Add(expressionList156.Tree);
            	        
            	        }
            	        break;
            	
            	}

            	
            	// AST REWRITE
            	// elements:          expressionList
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 933:3: -> ^( FOR_ITERATOR ( expressionList )? )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:933:6: ^( FOR_ITERATOR ( expressionList )? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(FOR_ITERATOR, "FOR_ITERATOR"), root_1);
            	    
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:933:21: ( expressionList )?
            	    if ( stream_expressionList.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_expressionList.Next());
            	    
            	    }
            	    stream_expressionList.Reset();
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 60, forIter_StartIndex); 
            }
            InOperator_stack.Pop();
    
        }
        return retval;
    }
    // $ANTLR end forIter

    public class whileStatement_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start whileStatement
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:936:1: whileStatement : WHILE condition ( statement ) ;
    public whileStatement_return whileStatement() // throws RecognitionException [1]
    {   
        whileStatement_return retval = new whileStatement_return();
        retval.start = input.LT(1);
        int whileStatement_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken WHILE157 = null;
        condition_return condition158 = null;

        statement_return statement159 = null;
        
        
        CommonTree WHILE157_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 61) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:937:4: ( WHILE condition ( statement ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:937:4: WHILE condition ( statement )
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	WHILE157 = (CommonToken)input.LT(1);
            	Match(input,WHILE,FOLLOW_WHILE_in_whileStatement2987); if (failed) return retval;
            	if ( backtracking==0 ) {
            	WHILE157_tree = (CommonTree)adaptor.Create(WHILE157);
            	root_0 = (CommonTree)adaptor.BecomeRoot(WHILE157_tree, root_0);
            	}
            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append("while"); 
            	}
            	PushFollow(FOLLOW_condition_in_whileStatement2996);
            	condition158 = condition();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, condition158.Tree);
            	if ( backtracking == 0 ) 
            	{
            	  
            	  							buffer.Append((options.NewlineAfterCondition ? NewLine + tab : "") + "{"); 
            	  							CurrentTab++;
            	  							int next_test = input.LA(1);
            	  							if(next_test != ASLexer.LCURLY)	buffer.Append(NewLine + tab);
            	  						
            	}
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:944:3: ( statement )
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:944:4: statement
            	{
            		PushFollow(FOLLOW_statement_in_whileStatement3004);
            		statement159 = statement();
            		followingStackPointer_--;
            		if (failed) return retval;
            		if ( backtracking==0 ) adaptor.AddChild(root_0, statement159.Tree);
            	
            	}

            	if ( backtracking == 0 ) 
            	{
            	  
            	  							CurrentTab--;
            	  							buffer.Append(NewLine + tab);
            	  							buffer.Append("}");
            	  						
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 61, whileStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end whileStatement

    public class doWhileStatement_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start doWhileStatement
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:951:1: doWhileStatement : DO statement WHILE ( condition ) semi ;
    public doWhileStatement_return doWhileStatement() // throws RecognitionException [1]
    {   
        doWhileStatement_return retval = new doWhileStatement_return();
        retval.start = input.LT(1);
        int doWhileStatement_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken DO160 = null;
        CommonToken WHILE162 = null;
        statement_return statement161 = null;

        condition_return condition163 = null;

        semi_return semi164 = null;
        
        
        CommonTree DO160_tree=null;
        CommonTree WHILE162_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 62) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:952:4: ( DO statement WHILE ( condition ) semi )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:952:4: DO statement WHILE ( condition ) semi
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	DO160 = (CommonToken)input.LT(1);
            	Match(input,DO,FOLLOW_DO_in_doWhileStatement3019); if (failed) return retval;
            	if ( backtracking==0 ) {
            	DO160_tree = (CommonTree)adaptor.Create(DO160);
            	root_0 = (CommonTree)adaptor.BecomeRoot(DO160_tree, root_0);
            	}
            	if ( backtracking == 0 ) 
            	{
            	  
            	  							buffer.Append("do");
            	  							buffer.Append((options.NewlineAfterCondition ? NewLine + tab : "") + "{"); 
            	  							CurrentTab++;
            	  							int next_test = input.LA(1);
            	  							if(next_test != ASLexer.LCURLY)	buffer.Append(NewLine + tab);							
            	  						
            	}
            	PushFollow(FOLLOW_statement_in_doWhileStatement3029);
            	statement161 = statement();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, statement161.Tree);
            	if ( backtracking == 0 ) 
            	{
            	  
            	  							CurrentTab--;
            	  							buffer.Append(NewLine + tab);
            	  							buffer.Append("}");
            	  						
            	}
            	WHILE162 = (CommonToken)input.LT(1);
            	Match(input,WHILE,FOLLOW_WHILE_in_doWhileStatement3036); if (failed) return retval;
            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append(" while"); 
            	}
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:965:3: ( condition )
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:965:4: condition
            	{
            		PushFollow(FOLLOW_condition_in_doWhileStatement3046);
            		condition163 = condition();
            		followingStackPointer_--;
            		if (failed) return retval;
            		if ( backtracking==0 ) adaptor.AddChild(root_0, condition163.Tree);
            	
            	}

            	PushFollow(FOLLOW_semi_in_doWhileStatement3052);
            	semi164 = semi();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, semi164.Tree);
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 62, doWhileStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end doWhileStatement

    public class withStatement_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start withStatement
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:969:1: withStatement : WITH condition ( statement ) ;
    public withStatement_return withStatement() // throws RecognitionException [1]
    {   
        withStatement_return retval = new withStatement_return();
        retval.start = input.LT(1);
        int withStatement_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken WITH165 = null;
        condition_return condition166 = null;

        statement_return statement167 = null;
        
        
        CommonTree WITH165_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 63) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:970:4: ( WITH condition ( statement ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:970:4: WITH condition ( statement )
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	WITH165 = (CommonToken)input.LT(1);
            	Match(input,WITH,FOLLOW_WITH_in_withStatement3063); if (failed) return retval;
            	if ( backtracking==0 ) {
            	WITH165_tree = (CommonTree)adaptor.Create(WITH165);
            	root_0 = (CommonTree)adaptor.BecomeRoot(WITH165_tree, root_0);
            	}
            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append("with"); 
            	}
            	PushFollow(FOLLOW_condition_in_withStatement3072);
            	condition166 = condition();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, condition166.Tree);
            	if ( backtracking == 0 ) 
            	{
            	  
            	  							buffer.Append((options.NewlineAfterCondition ? NewLine + tab : "") + "{"); 
            	  							CurrentTab++;
            	  							int next_test = input.LA(1);
            	  							if(next_test != ASLexer.LCURLY)	buffer.Append(NewLine + tab);
            	  						
            	}
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:977:3: ( statement )
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:977:4: statement
            	{
            		PushFollow(FOLLOW_statement_in_withStatement3080);
            		statement167 = statement();
            		followingStackPointer_--;
            		if (failed) return retval;
            		if ( backtracking==0 ) adaptor.AddChild(root_0, statement167.Tree);
            	
            	}

            	if ( backtracking == 0 ) 
            	{
            	  
            	  							CurrentTab--;
            	  							buffer.Append(NewLine + tab);
            	  							buffer.Append("}");
            	  						
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 63, withStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end withStatement

    public class typeExpression_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start typeExpression
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:984:1: typeExpression : c= COLON ( identifier | VOID | STAR ) -> ^( TYPE_SPEC[$c] ( identifier )? ( VOID )? ( STAR )? ) ;
    public typeExpression_return typeExpression() // throws RecognitionException [1]
    {   
        typeExpression_return retval = new typeExpression_return();
        retval.start = input.LT(1);
        int typeExpression_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken c = null;
        CommonToken VOID169 = null;
        CommonToken STAR170 = null;
        identifier_return identifier168 = null;
        
        
        CommonTree c_tree=null;
        CommonTree VOID169_tree=null;
        CommonTree STAR170_tree=null;
        RewriteRuleTokenStream stream_STAR = new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_VOID = new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor,"rule identifier");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 64) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:986:3: (c= COLON ( identifier | VOID | STAR ) -> ^( TYPE_SPEC[$c] ( identifier )? ( VOID )? ( STAR )? ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:986:3: c= COLON ( identifier | VOID | STAR )
            {
            	c = (CommonToken)input.LT(1);
            	Match(input,COLON,FOLLOW_COLON_in_typeExpression3100); if (failed) return retval;
            	if ( backtracking==0 ) stream_COLON.Add(c);

            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append(options.SpaceBetweenType ? " : " : ":"); 
            	}
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:987:3: ( identifier | VOID | STAR )
            	int alt42 = 3;
            	switch ( input.LA(1) ) 
            	{
            	case GET:
            	case SET:
            	case IDENT:
            	case DYNAMIC:
            	case IS:
            	case AS:
            	case USE:
            	case XML:
            		{
            	    alt42 = 1;
            	    }
            	    break;
            	case VOID:
            		{
            	    alt42 = 2;
            	    }
            	    break;
            	case STAR:
            		{
            	    alt42 = 3;
            	    }
            	    break;
            		default:
            		    if ( backtracking > 0 ) {failed = true; return retval;}
            		    NoViableAltException nvae_d42s0 =
            		        new NoViableAltException("987:3: ( identifier | VOID | STAR )", 42, 0, input);
            	
            		    throw nvae_d42s0;
            	}
            	
            	switch (alt42) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:988:4: identifier
            	        {
            	        	PushFollow(FOLLOW_identifier_in_typeExpression3113);
            	        	identifier168 = identifier();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) stream_identifier.Add(identifier168.Tree);
            	        
            	        }
            	        break;
            	    case 2 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:989:6: VOID
            	        {
            	        	VOID169 = (CommonToken)input.LT(1);
            	        	Match(input,VOID,FOLLOW_VOID_in_typeExpression3121); if (failed) return retval;
            	        	if ( backtracking==0 ) stream_VOID.Add(VOID169);

            	        	if ( backtracking == 0 ) 
            	        	{
            	        	   buffer.Append("Void"); 
            	        	}
            	        
            	        }
            	        break;
            	    case 3 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:990:6: STAR
            	        {
            	        	STAR170 = (CommonToken)input.LT(1);
            	        	Match(input,STAR,FOLLOW_STAR_in_typeExpression3131); if (failed) return retval;
            	        	if ( backtracking==0 ) stream_STAR.Add(STAR170);

            	        	if ( backtracking == 0 ) 
            	        	{
            	        	   buffer.Append("*");	
            	        	}
            	        
            	        }
            	        break;
            	
            	}

            	
            	// AST REWRITE
            	// elements:          STAR, identifier, VOID
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 992:3: -> ^( TYPE_SPEC[$c] ( identifier )? ( VOID )? ( STAR )? )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:992:6: ^( TYPE_SPEC[$c] ( identifier )? ( VOID )? ( STAR )? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(TYPE_SPEC, c), root_1);
            	    
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:992:22: ( identifier )?
            	    if ( stream_identifier.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_identifier.Next());
            	    
            	    }
            	    stream_identifier.Reset();
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:992:34: ( VOID )?
            	    if ( stream_VOID.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_VOID.Next());
            	    
            	    }
            	    stream_VOID.Reset();
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:992:40: ( STAR )?
            	    if ( stream_STAR.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_STAR.Next());
            	    
            	    }
            	    stream_STAR.Reset();
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 64, typeExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end typeExpression

    public class identifier_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start identifier
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:995:1: identifier : qualifiedIdent ( options {greedy=true; } : DOT qualifiedIdent )* -> ^( IDENTIFIER ( qualifiedIdent )+ ) ;
    public identifier_return identifier() // throws RecognitionException [1]
    {   
        identifier_return retval = new identifier_return();
        retval.start = input.LT(1);
        int identifier_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken DOT172 = null;
        qualifiedIdent_return qualifiedIdent171 = null;

        qualifiedIdent_return qualifiedIdent173 = null;
        
        
        CommonTree DOT172_tree=null;
        RewriteRuleTokenStream stream_DOT = new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_qualifiedIdent = new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdent");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 65) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:996:4: ( qualifiedIdent ( options {greedy=true; } : DOT qualifiedIdent )* -> ^( IDENTIFIER ( qualifiedIdent )+ ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:996:4: qualifiedIdent ( options {greedy=true; } : DOT qualifiedIdent )*
            {
            	PushFollow(FOLLOW_qualifiedIdent_in_identifier3169);
            	qualifiedIdent171 = qualifiedIdent();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_qualifiedIdent.Add(qualifiedIdent171.Tree);
            	if ( backtracking == 0 ) 
            	{
            	   
            	}
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:997:3: ( options {greedy=true; } : DOT qualifiedIdent )*
            	do 
            	{
            	    int alt43 = 2;
            	    int LA43_0 = input.LA(1);
            	    
            	    if ( (LA43_0 == DOT) )
            	    {
            	        alt43 = 1;
            	    }
            	    
            	
            	    switch (alt43) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:998:6: DOT qualifiedIdent
            			    {
            			    	DOT172 = (CommonToken)input.LT(1);
            			    	Match(input,DOT,FOLLOW_DOT_in_identifier3193); if (failed) return retval;
            			    	if ( backtracking==0 ) stream_DOT.Add(DOT172);

            			    	if ( backtracking == 0 ) 
            			    	{
            			    	   buffer.Append("."); 
            			    	}
            			    	PushFollow(FOLLOW_qualifiedIdent_in_identifier3197);
            			    	qualifiedIdent173 = qualifiedIdent();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) stream_qualifiedIdent.Add(qualifiedIdent173.Tree);
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop43;
            	    }
            	} while (true);
            	
            	loop43:
            		;	// Stops C# compiler whinging that label 'loop43' has no statements

            	
            	// AST REWRITE
            	// elements:          qualifiedIdent
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 1000:3: -> ^( IDENTIFIER ( qualifiedIdent )+ )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1000:6: ^( IDENTIFIER ( qualifiedIdent )+ )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(IDENTIFIER, "IDENTIFIER"), root_1);
            	    
            	    if ( !(stream_qualifiedIdent.HasNext()) ) {
            	        throw new RewriteEarlyExitException();
            	    }
            	    while ( stream_qualifiedIdent.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_qualifiedIdent.Next());
            	    
            	    }
            	    stream_qualifiedIdent.Reset();
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 65, identifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end identifier

    public class qualifiedIdent_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start qualifiedIdent
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1003:1: qualifiedIdent : ide= ident ;
    public qualifiedIdent_return qualifiedIdent() // throws RecognitionException [1]
    {   
        qualifiedIdent_return retval = new qualifiedIdent_return();
        retval.start = input.LT(1);
        int qualifiedIdent_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        ident_return ide = null;
        
        
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 66) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1004:4: (ide= ident )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1004:4: ide= ident
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	PushFollow(FOLLOW_ident_in_qualifiedIdent3226);
            	ide = ident();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, ide.Tree);
            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append( ((CommonTree)ide.Tree).Text ); 
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 66, qualifiedIdent_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end qualifiedIdent

    public class namespaceName_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start namespaceName
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1007:1: namespaceName : ( IDENT | reservedNamespace );
    public namespaceName_return namespaceName() // throws RecognitionException [1]
    {   
        namespaceName_return retval = new namespaceName_return();
        retval.start = input.LT(1);
        int namespaceName_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken IDENT174 = null;
        reservedNamespace_return reservedNamespace175 = null;
        
        
        CommonTree IDENT174_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 67) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1008:4: ( IDENT | reservedNamespace )
            int alt44 = 2;
            int LA44_0 = input.LA(1);
            
            if ( (LA44_0 == IDENT) )
            {
                alt44 = 1;
            }
            else if ( ((LA44_0 >= PUBLIC && LA44_0 <= INTERNAL)) )
            {
                alt44 = 2;
            }
            else 
            {
                if ( backtracking > 0 ) {failed = true; return retval;}
                NoViableAltException nvae_d44s0 =
                    new NoViableAltException("1007:1: namespaceName : ( IDENT | reservedNamespace );", 44, 0, input);
            
                throw nvae_d44s0;
            }
            switch (alt44) 
            {
                case 1 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1008:4: IDENT
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	IDENT174 = (CommonToken)input.LT(1);
                    	Match(input,IDENT,FOLLOW_IDENT_in_namespaceName3240); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	IDENT174_tree = (CommonTree)adaptor.Create(IDENT174);
                    	adaptor.AddChild(root_0, IDENT174_tree);
                    	}
                    
                    }
                    break;
                case 2 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1008:12: reservedNamespace
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_reservedNamespace_in_namespaceName3244);
                    	reservedNamespace175 = reservedNamespace();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, reservedNamespace175.Tree);
                    
                    }
                    break;
            
            }
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 67, namespaceName_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end namespaceName

    public class reservedNamespace_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start reservedNamespace
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1011:1: reservedNamespace : ( PUBLIC | PRIVATE | PROTECTED | INTERNAL );
    public reservedNamespace_return reservedNamespace() // throws RecognitionException [1]
    {   
        reservedNamespace_return retval = new reservedNamespace_return();
        retval.start = input.LT(1);
        int reservedNamespace_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken set176 = null;
        
        CommonTree set176_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 68) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1012:4: ( PUBLIC | PRIVATE | PROTECTED | INTERNAL )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	set176 = (CommonToken)input.LT(1);
            	if ( (input.LA(1) >= PUBLIC && input.LA(1) <= INTERNAL) ) 
            	{
            	    input.Consume();
            	    if ( backtracking==0 ) adaptor.AddChild(root_0, adaptor.Create(set176));
            	    errorRecovery = false;failed = false;
            	}
            	else 
            	{
            	    if ( backtracking > 0 ) {failed = true; return retval;}
            	    MismatchedSetException mse =
            	        new MismatchedSetException(null,input);
            	    RecoverFromMismatchedSet(input,mse,FOLLOW_set_in_reservedNamespace0);    throw mse;
            	}

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 68, reservedNamespace_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end reservedNamespace

    public class identifierStar_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start identifierStar
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1018:1: identifierStar : ide= ident ( options {greedy=true; } : DOT ide2= ident )* ( DOT STAR )? -> ^( IDENTIFIER ( ident )+ ( STAR )? ) ;
    public identifierStar_return identifierStar() // throws RecognitionException [1]
    {   
        identifierStar_return retval = new identifierStar_return();
        retval.start = input.LT(1);
        int identifierStar_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken DOT177 = null;
        CommonToken DOT178 = null;
        CommonToken STAR179 = null;
        ident_return ide = null;

        ident_return ide2 = null;
        
        
        CommonTree DOT177_tree=null;
        CommonTree DOT178_tree=null;
        CommonTree STAR179_tree=null;
        RewriteRuleTokenStream stream_STAR = new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT = new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_ident = new RewriteRuleSubtreeStream(adaptor,"rule ident");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 69) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1019:4: (ide= ident ( options {greedy=true; } : DOT ide2= ident )* ( DOT STAR )? -> ^( IDENTIFIER ( ident )+ ( STAR )? ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1019:4: ide= ident ( options {greedy=true; } : DOT ide2= ident )* ( DOT STAR )?
            {
            	PushFollow(FOLLOW_ident_in_identifierStar3283);
            	ide = ident();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_ident.Add(ide.Tree);
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1020:3: ( options {greedy=true; } : DOT ide2= ident )*
            	do 
            	{
            	    int alt45 = 2;
            	    int LA45_0 = input.LA(1);
            	    
            	    if ( (LA45_0 == DOT) )
            	    {
            	        int LA45_1 = input.LA(2);
            	        
            	        if ( ((LA45_1 >= GET && LA45_1 <= SET) || LA45_1 == IDENT || LA45_1 == DYNAMIC || (LA45_1 >= IS && LA45_1 <= AS) || (LA45_1 >= USE && LA45_1 <= XML)) )
            	        {
            	            alt45 = 1;
            	        }
            	        
            	    
            	    }
            	    
            	
            	    switch (alt45) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1021:5: DOT ide2= ident
            			    {
            			    	DOT177 = (CommonToken)input.LT(1);
            			    	Match(input,DOT,FOLLOW_DOT_in_identifierStar3305); if (failed) return retval;
            			    	if ( backtracking==0 ) stream_DOT.Add(DOT177);

            			    	PushFollow(FOLLOW_ident_in_identifierStar3309);
            			    	ide2 = ident();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) stream_ident.Add(ide2.Tree);
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop45;
            	    }
            	} while (true);
            	
            	loop45:
            		;	// Stops C# compiler whinging that label 'loop45' has no statements

            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1023:3: ( DOT STAR )?
            	int alt46 = 2;
            	int LA46_0 = input.LA(1);
            	
            	if ( (LA46_0 == DOT) )
            	{
            	    alt46 = 1;
            	}
            	switch (alt46) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1023:5: DOT STAR
            	        {
            	        	DOT178 = (CommonToken)input.LT(1);
            	        	Match(input,DOT,FOLLOW_DOT_in_identifierStar3324); if (failed) return retval;
            	        	if ( backtracking==0 ) stream_DOT.Add(DOT178);

            	        	STAR179 = (CommonToken)input.LT(1);
            	        	Match(input,STAR,FOLLOW_STAR_in_identifierStar3326); if (failed) return retval;
            	        	if ( backtracking==0 ) stream_STAR.Add(STAR179);

            	        
            	        }
            	        break;
            	
            	}

            	
            	// AST REWRITE
            	// elements:          STAR, ident
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 1025:3: -> ^( IDENTIFIER ( ident )+ ( STAR )? )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1025:6: ^( IDENTIFIER ( ident )+ ( STAR )? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(IDENTIFIER, "IDENTIFIER"), root_1);
            	    
            	    if ( !(stream_ident.HasNext()) ) {
            	        throw new RewriteEarlyExitException();
            	    }
            	    while ( stream_ident.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_ident.Next());
            	    
            	    }
            	    stream_ident.Reset();
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1025:26: ( STAR )?
            	    if ( stream_STAR.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_STAR.Next());
            	    
            	    }
            	    stream_STAR.Reset();
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 69, identifierStar_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end identifierStar

    public class annotations_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start annotations
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1028:1: annotations : ( ( annotation ) | ( includeDirective ) )+ -> ^( ANNOTATIONS ( annotation )+ ) ;
    public annotations_return annotations() // throws RecognitionException [1]
    {   
        annotations_return retval = new annotations_return();
        retval.start = input.LT(1);
        int annotations_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        annotation_return annotation180 = null;

        includeDirective_return includeDirective181 = null;
        
        
        RewriteRuleSubtreeStream stream_includeDirective = new RewriteRuleSubtreeStream(adaptor,"rule includeDirective");
        RewriteRuleSubtreeStream stream_annotation = new RewriteRuleSubtreeStream(adaptor,"rule annotation");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 70) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1029:4: ( ( ( annotation ) | ( includeDirective ) )+ -> ^( ANNOTATIONS ( annotation )+ ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1029:4: ( ( annotation ) | ( includeDirective ) )+
            {
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1029:4: ( ( annotation ) | ( includeDirective ) )+
            	int cnt47 = 0;
            	do 
            	{
            	    int alt47 = 3;
            	    int LA47_0 = input.LA(1);
            	    
            	    if ( (LA47_0 == LBRACK) )
            	    {
            	        int LA47_13 = input.LA(2);
            	        
            	        if ( (synpred74()) )
            	        {
            	            alt47 = 1;
            	        }
            	        
            	    
            	    }
            	    else if ( (LA47_0 == 175) )
            	    {
            	        int LA47_14 = input.LA(2);
            	        
            	        if ( (synpred75()) )
            	        {
            	            alt47 = 2;
            	        }
            	        
            	    
            	    }
            	    
            	
            	    switch (alt47) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1030:5: ( annotation )
            			    {
            			    	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1030:5: ( annotation )
            			    	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1030:7: annotation
            			    	{
            			    		if ( backtracking == 0 ) 
            			    		{
            			    		   buffer.Append(NewLine + tab); 
            			    		}
            			    		PushFollow(FOLLOW_annotation_in_annotations3372);
            			    		annotation180 = annotation();
            			    		followingStackPointer_--;
            			    		if (failed) return retval;
            			    		if ( backtracking==0 ) stream_annotation.Add(annotation180.Tree);
            			    	
            			    	}

            			    
            			    }
            			    break;
            			case 2 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1031:6: ( includeDirective )
            			    {
            			    	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1031:6: ( includeDirective )
            			    	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1031:8: includeDirective
            			    	{
            			    		if ( backtracking == 0 ) 
            			    		{
            			    		   buffer.Append(NewLine + tab); 
            			    		}
            			    		PushFollow(FOLLOW_includeDirective_in_annotations3385);
            			    		includeDirective181 = includeDirective();
            			    		followingStackPointer_--;
            			    		if (failed) return retval;
            			    		if ( backtracking==0 ) stream_includeDirective.Add(includeDirective181.Tree);
            			    	
            			    	}

            			    
            			    }
            			    break;
            	
            			default:
            			    if ( cnt47 >= 1 ) goto loop47;
            			    if ( backtracking > 0 ) {failed = true; return retval;}
            		            EarlyExitException eee =
            		                new EarlyExitException(47, input);
            		            throw eee;
            	    }
            	    cnt47++;
            	} while (true);
            	
            	loop47:
            		;	// Stops C# compiler whinging that label 'loop47' has no statements

            	
            	// AST REWRITE
            	// elements:          annotation
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 1033:3: -> ^( ANNOTATIONS ( annotation )+ )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1033:6: ^( ANNOTATIONS ( annotation )+ )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(ANNOTATIONS, "ANNOTATIONS"), root_1);
            	    
            	    if ( !(stream_annotation.HasNext()) ) {
            	        throw new RewriteEarlyExitException();
            	    }
            	    while ( stream_annotation.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_annotation.Next());
            	    
            	    }
            	    stream_annotation.Reset();
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 70, annotations_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end annotations

    public class annotation_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start annotation
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1036:1: annotation : LBRACK ide= ident ( annotationParamList )? RBRACK -> ^( ANNOTATION ident ( annotationParamList )? ) ;
    public annotation_return annotation() // throws RecognitionException [1]
    {   
        annotation_return retval = new annotation_return();
        retval.start = input.LT(1);
        int annotation_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken LBRACK182 = null;
        CommonToken RBRACK184 = null;
        ident_return ide = null;

        annotationParamList_return annotationParamList183 = null;
        
        
        CommonTree LBRACK182_tree=null;
        CommonTree RBRACK184_tree=null;
        RewriteRuleTokenStream stream_LBRACK = new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_RBRACK = new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleSubtreeStream stream_annotationParamList = new RewriteRuleSubtreeStream(adaptor,"rule annotationParamList");
        RewriteRuleSubtreeStream stream_ident = new RewriteRuleSubtreeStream(adaptor,"rule ident");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 71) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1037:4: ( LBRACK ide= ident ( annotationParamList )? RBRACK -> ^( ANNOTATION ident ( annotationParamList )? ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1037:4: LBRACK ide= ident ( annotationParamList )? RBRACK
            {
            	LBRACK182 = (CommonToken)input.LT(1);
            	Match(input,LBRACK,FOLLOW_LBRACK_in_annotation3414); if (failed) return retval;
            	if ( backtracking==0 ) stream_LBRACK.Add(LBRACK182);

            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append("["); 
            	}
            	PushFollow(FOLLOW_ident_in_annotation3426);
            	ide = ident();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_ident.Add(ide.Tree);
            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append(((CommonTree)ide.Tree).Text); 
            	}
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1039:3: ( annotationParamList )?
            	int alt48 = 2;
            	int LA48_0 = input.LA(1);
            	
            	if ( (LA48_0 == LPAREN) )
            	{
            	    alt48 = 1;
            	}
            	switch (alt48) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:0:0: annotationParamList
            	        {
            	        	PushFollow(FOLLOW_annotationParamList_in_annotation3435);
            	        	annotationParamList183 = annotationParamList();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) stream_annotationParamList.Add(annotationParamList183.Tree);
            	        
            	        }
            	        break;
            	
            	}

            	RBRACK184 = (CommonToken)input.LT(1);
            	Match(input,RBRACK,FOLLOW_RBRACK_in_annotation3440); if (failed) return retval;
            	if ( backtracking==0 ) stream_RBRACK.Add(RBRACK184);

            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append("]"); 
            	}
            	
            	// AST REWRITE
            	// elements:          ident, annotationParamList
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 1041:3: -> ^( ANNOTATION ident ( annotationParamList )? )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1041:6: ^( ANNOTATION ident ( annotationParamList )? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(ANNOTATION, "ANNOTATION"), root_1);
            	    
            	    adaptor.AddChild(root_1, stream_ident.Next());
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1041:25: ( annotationParamList )?
            	    if ( stream_annotationParamList.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_annotationParamList.Next());
            	    
            	    }
            	    stream_annotationParamList.Reset();
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 71, annotation_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end annotation

    public class annotationParamList_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start annotationParamList
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1044:1: annotationParamList : LPAREN ( annotationParam ( COMMA annotationParam )* )? RPAREN -> ^( ANNOTATION_PARAMS ( annotationParam )* ) ;
    public annotationParamList_return annotationParamList() // throws RecognitionException [1]
    {   
        annotationParamList_return retval = new annotationParamList_return();
        retval.start = input.LT(1);
        int annotationParamList_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken LPAREN185 = null;
        CommonToken COMMA187 = null;
        CommonToken RPAREN189 = null;
        annotationParam_return annotationParam186 = null;

        annotationParam_return annotationParam188 = null;
        
        
        CommonTree LPAREN185_tree=null;
        CommonTree COMMA187_tree=null;
        CommonTree RPAREN189_tree=null;
        RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_annotationParam = new RewriteRuleSubtreeStream(adaptor,"rule annotationParam");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 72) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1046:3: ( LPAREN ( annotationParam ( COMMA annotationParam )* )? RPAREN -> ^( ANNOTATION_PARAMS ( annotationParam )* ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1046:3: LPAREN ( annotationParam ( COMMA annotationParam )* )? RPAREN
            {
            	LPAREN185 = (CommonToken)input.LT(1);
            	Match(input,LPAREN,FOLLOW_LPAREN_in_annotationParamList3472); if (failed) return retval;
            	if ( backtracking==0 ) stream_LPAREN.Add(LPAREN185);

            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append("("); 
            	}
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1047:3: ( annotationParam ( COMMA annotationParam )* )?
            	int alt50 = 2;
            	int LA50_0 = input.LA(1);
            	
            	if ( (LA50_0 == STRING_LITERAL || (LA50_0 >= GET && LA50_0 <= SET) || LA50_0 == IDENT || LA50_0 == DYNAMIC || (LA50_0 >= IS && LA50_0 <= AS) || (LA50_0 >= TRUE && LA50_0 <= FLOAT_LITERAL) || (LA50_0 >= USE && LA50_0 <= XML)) )
            	{
            	    alt50 = 1;
            	}
            	switch (alt50) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1047:5: annotationParam ( COMMA annotationParam )*
            	        {
            	        	PushFollow(FOLLOW_annotationParam_in_annotationParamList3485);
            	        	annotationParam186 = annotationParam();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) stream_annotationParam.Add(annotationParam186.Tree);
            	        	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1048:4: ( COMMA annotationParam )*
            	        	do 
            	        	{
            	        	    int alt49 = 2;
            	        	    int LA49_0 = input.LA(1);
            	        	    
            	        	    if ( (LA49_0 == COMMA) )
            	        	    {
            	        	        alt49 = 1;
            	        	    }
            	        	    
            	        	
            	        	    switch (alt49) 
            	        		{
            	        			case 1 :
            	        			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1049:5: COMMA annotationParam
            	        			    {
            	        			    	COMMA187 = (CommonToken)input.LT(1);
            	        			    	Match(input,COMMA,FOLLOW_COMMA_in_annotationParamList3496); if (failed) return retval;
            	        			    	if ( backtracking==0 ) stream_COMMA.Add(COMMA187);

            	        			    	if ( backtracking == 0 ) 
            	        			    	{
            	        			    	   buffer.Append(","); 
            	        			    	}
            	        			    	PushFollow(FOLLOW_annotationParam_in_annotationParamList3507);
            	        			    	annotationParam188 = annotationParam();
            	        			    	followingStackPointer_--;
            	        			    	if (failed) return retval;
            	        			    	if ( backtracking==0 ) stream_annotationParam.Add(annotationParam188.Tree);
            	        			    
            	        			    }
            	        			    break;
            	        	
            	        			default:
            	        			    goto loop49;
            	        	    }
            	        	} while (true);
            	        	
            	        	loop49:
            	        		;	// Stops C# compiler whinging that label 'loop49' has no statements

            	        
            	        }
            	        break;
            	
            	}

            	RPAREN189 = (CommonToken)input.LT(1);
            	Match(input,RPAREN,FOLLOW_RPAREN_in_annotationParamList3522); if (failed) return retval;
            	if ( backtracking==0 ) stream_RPAREN.Add(RPAREN189);

            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append(")"); 
            	}
            	
            	// AST REWRITE
            	// elements:          annotationParam
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 1054:3: -> ^( ANNOTATION_PARAMS ( annotationParam )* )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1054:6: ^( ANNOTATION_PARAMS ( annotationParam )* )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(ANNOTATION_PARAMS, "ANNOTATION_PARAMS"), root_1);
            	    
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1054:26: ( annotationParam )*
            	    while ( stream_annotationParam.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_annotationParam.Next());
            	    
            	    }
            	    stream_annotationParam.Reset();
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 72, annotationParamList_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end annotationParamList

    public class annotationParam_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start annotationParam
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1057:1: annotationParam : (ide1= ident ASSIGN cn1= constant -> ^( ASSIGN ident constant ) | ide2= ident ASSIGN ide3= ident -> ^( ASSIGN ident ident ) | cn2= constant -> constant | ide4= ident -> ident );
    public annotationParam_return annotationParam() // throws RecognitionException [1]
    {   
        annotationParam_return retval = new annotationParam_return();
        retval.start = input.LT(1);
        int annotationParam_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken ASSIGN190 = null;
        CommonToken ASSIGN191 = null;
        ident_return ide1 = null;

        constant_return cn1 = null;

        ident_return ide2 = null;

        ident_return ide3 = null;

        constant_return cn2 = null;

        ident_return ide4 = null;
        
        
        CommonTree ASSIGN190_tree=null;
        CommonTree ASSIGN191_tree=null;
        RewriteRuleTokenStream stream_ASSIGN = new RewriteRuleTokenStream(adaptor,"token ASSIGN");
        RewriteRuleSubtreeStream stream_constant = new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_ident = new RewriteRuleSubtreeStream(adaptor,"rule ident");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 73) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1059:3: (ide1= ident ASSIGN cn1= constant -> ^( ASSIGN ident constant ) | ide2= ident ASSIGN ide3= ident -> ^( ASSIGN ident ident ) | cn2= constant -> constant | ide4= ident -> ident )
            int alt51 = 4;
            switch ( input.LA(1) ) 
            {
            case IDENT:
            	{
                int LA51_1 = input.LA(2);
                
                if ( (LA51_1 == EOF || LA51_1 == COMMA || LA51_1 == RPAREN) )
                {
                    alt51 = 4;
                }
                else if ( (LA51_1 == ASSIGN) )
                {
                    int LA51_17 = input.LA(3);
                    
                    if ( (synpred79()) )
                    {
                        alt51 = 1;
                    }
                    else if ( (synpred80()) )
                    {
                        alt51 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d51s17 =
                            new NoViableAltException("1057:1: annotationParam : (ide1= ident ASSIGN cn1= constant -> ^( ASSIGN ident constant ) | ide2= ident ASSIGN ide3= ident -> ^( ASSIGN ident ident ) | cn2= constant -> constant | ide4= ident -> ident );", 51, 17, input);
                    
                        throw nvae_d51s17;
                    }
                }
                else 
                {
                    if ( backtracking > 0 ) {failed = true; return retval;}
                    NoViableAltException nvae_d51s1 =
                        new NoViableAltException("1057:1: annotationParam : (ide1= ident ASSIGN cn1= constant -> ^( ASSIGN ident constant ) | ide2= ident ASSIGN ide3= ident -> ^( ASSIGN ident ident ) | cn2= constant -> constant | ide4= ident -> ident );", 51, 1, input);
                
                    throw nvae_d51s1;
                }
                }
                break;
            case USE:
            	{
                int LA51_2 = input.LA(2);
                
                if ( (LA51_2 == ASSIGN) )
                {
                    int LA51_18 = input.LA(3);
                    
                    if ( (synpred79()) )
                    {
                        alt51 = 1;
                    }
                    else if ( (synpred80()) )
                    {
                        alt51 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d51s18 =
                            new NoViableAltException("1057:1: annotationParam : (ide1= ident ASSIGN cn1= constant -> ^( ASSIGN ident constant ) | ide2= ident ASSIGN ide3= ident -> ^( ASSIGN ident ident ) | cn2= constant -> constant | ide4= ident -> ident );", 51, 18, input);
                    
                        throw nvae_d51s18;
                    }
                }
                else if ( (LA51_2 == EOF || LA51_2 == COMMA || LA51_2 == RPAREN) )
                {
                    alt51 = 4;
                }
                else 
                {
                    if ( backtracking > 0 ) {failed = true; return retval;}
                    NoViableAltException nvae_d51s2 =
                        new NoViableAltException("1057:1: annotationParam : (ide1= ident ASSIGN cn1= constant -> ^( ASSIGN ident constant ) | ide2= ident ASSIGN ide3= ident -> ^( ASSIGN ident ident ) | cn2= constant -> constant | ide4= ident -> ident );", 51, 2, input);
                
                    throw nvae_d51s2;
                }
                }
                break;
            case XML:
            	{
                int LA51_3 = input.LA(2);
                
                if ( (LA51_3 == EOF || LA51_3 == COMMA || LA51_3 == RPAREN) )
                {
                    alt51 = 4;
                }
                else if ( (LA51_3 == ASSIGN) )
                {
                    int LA51_25 = input.LA(3);
                    
                    if ( (synpred79()) )
                    {
                        alt51 = 1;
                    }
                    else if ( (synpred80()) )
                    {
                        alt51 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d51s25 =
                            new NoViableAltException("1057:1: annotationParam : (ide1= ident ASSIGN cn1= constant -> ^( ASSIGN ident constant ) | ide2= ident ASSIGN ide3= ident -> ^( ASSIGN ident ident ) | cn2= constant -> constant | ide4= ident -> ident );", 51, 25, input);
                    
                        throw nvae_d51s25;
                    }
                }
                else 
                {
                    if ( backtracking > 0 ) {failed = true; return retval;}
                    NoViableAltException nvae_d51s3 =
                        new NoViableAltException("1057:1: annotationParam : (ide1= ident ASSIGN cn1= constant -> ^( ASSIGN ident constant ) | ide2= ident ASSIGN ide3= ident -> ^( ASSIGN ident ident ) | cn2= constant -> constant | ide4= ident -> ident );", 51, 3, input);
                
                    throw nvae_d51s3;
                }
                }
                break;
            case DYNAMIC:
            	{
                int LA51_4 = input.LA(2);
                
                if ( (LA51_4 == EOF || LA51_4 == COMMA || LA51_4 == RPAREN) )
                {
                    alt51 = 4;
                }
                else if ( (LA51_4 == ASSIGN) )
                {
                    int LA51_29 = input.LA(3);
                    
                    if ( (synpred79()) )
                    {
                        alt51 = 1;
                    }
                    else if ( (synpred80()) )
                    {
                        alt51 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d51s29 =
                            new NoViableAltException("1057:1: annotationParam : (ide1= ident ASSIGN cn1= constant -> ^( ASSIGN ident constant ) | ide2= ident ASSIGN ide3= ident -> ^( ASSIGN ident ident ) | cn2= constant -> constant | ide4= ident -> ident );", 51, 29, input);
                    
                        throw nvae_d51s29;
                    }
                }
                else 
                {
                    if ( backtracking > 0 ) {failed = true; return retval;}
                    NoViableAltException nvae_d51s4 =
                        new NoViableAltException("1057:1: annotationParam : (ide1= ident ASSIGN cn1= constant -> ^( ASSIGN ident constant ) | ide2= ident ASSIGN ide3= ident -> ^( ASSIGN ident ident ) | cn2= constant -> constant | ide4= ident -> ident );", 51, 4, input);
                
                    throw nvae_d51s4;
                }
                }
                break;
            case IS:
            	{
                int LA51_5 = input.LA(2);
                
                if ( (LA51_5 == ASSIGN) )
                {
                    int LA51_30 = input.LA(3);
                    
                    if ( (synpred79()) )
                    {
                        alt51 = 1;
                    }
                    else if ( (synpred80()) )
                    {
                        alt51 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d51s30 =
                            new NoViableAltException("1057:1: annotationParam : (ide1= ident ASSIGN cn1= constant -> ^( ASSIGN ident constant ) | ide2= ident ASSIGN ide3= ident -> ^( ASSIGN ident ident ) | cn2= constant -> constant | ide4= ident -> ident );", 51, 30, input);
                    
                        throw nvae_d51s30;
                    }
                }
                else if ( (LA51_5 == EOF || LA51_5 == COMMA || LA51_5 == RPAREN) )
                {
                    alt51 = 4;
                }
                else 
                {
                    if ( backtracking > 0 ) {failed = true; return retval;}
                    NoViableAltException nvae_d51s5 =
                        new NoViableAltException("1057:1: annotationParam : (ide1= ident ASSIGN cn1= constant -> ^( ASSIGN ident constant ) | ide2= ident ASSIGN ide3= ident -> ^( ASSIGN ident ident ) | cn2= constant -> constant | ide4= ident -> ident );", 51, 5, input);
                
                    throw nvae_d51s5;
                }
                }
                break;
            case AS:
            	{
                int LA51_6 = input.LA(2);
                
                if ( (LA51_6 == EOF || LA51_6 == COMMA || LA51_6 == RPAREN) )
                {
                    alt51 = 4;
                }
                else if ( (LA51_6 == ASSIGN) )
                {
                    int LA51_37 = input.LA(3);
                    
                    if ( (synpred79()) )
                    {
                        alt51 = 1;
                    }
                    else if ( (synpred80()) )
                    {
                        alt51 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d51s37 =
                            new NoViableAltException("1057:1: annotationParam : (ide1= ident ASSIGN cn1= constant -> ^( ASSIGN ident constant ) | ide2= ident ASSIGN ide3= ident -> ^( ASSIGN ident ident ) | cn2= constant -> constant | ide4= ident -> ident );", 51, 37, input);
                    
                        throw nvae_d51s37;
                    }
                }
                else 
                {
                    if ( backtracking > 0 ) {failed = true; return retval;}
                    NoViableAltException nvae_d51s6 =
                        new NoViableAltException("1057:1: annotationParam : (ide1= ident ASSIGN cn1= constant -> ^( ASSIGN ident constant ) | ide2= ident ASSIGN ide3= ident -> ^( ASSIGN ident ident ) | cn2= constant -> constant | ide4= ident -> ident );", 51, 6, input);
                
                    throw nvae_d51s6;
                }
                }
                break;
            case GET:
            	{
                int LA51_7 = input.LA(2);
                
                if ( (LA51_7 == EOF || LA51_7 == COMMA || LA51_7 == RPAREN) )
                {
                    alt51 = 4;
                }
                else if ( (LA51_7 == ASSIGN) )
                {
                    int LA51_41 = input.LA(3);
                    
                    if ( (synpred79()) )
                    {
                        alt51 = 1;
                    }
                    else if ( (synpred80()) )
                    {
                        alt51 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d51s41 =
                            new NoViableAltException("1057:1: annotationParam : (ide1= ident ASSIGN cn1= constant -> ^( ASSIGN ident constant ) | ide2= ident ASSIGN ide3= ident -> ^( ASSIGN ident ident ) | cn2= constant -> constant | ide4= ident -> ident );", 51, 41, input);
                    
                        throw nvae_d51s41;
                    }
                }
                else 
                {
                    if ( backtracking > 0 ) {failed = true; return retval;}
                    NoViableAltException nvae_d51s7 =
                        new NoViableAltException("1057:1: annotationParam : (ide1= ident ASSIGN cn1= constant -> ^( ASSIGN ident constant ) | ide2= ident ASSIGN ide3= ident -> ^( ASSIGN ident ident ) | cn2= constant -> constant | ide4= ident -> ident );", 51, 7, input);
                
                    throw nvae_d51s7;
                }
                }
                break;
            case SET:
            	{
                int LA51_8 = input.LA(2);
                
                if ( (LA51_8 == ASSIGN) )
                {
                    int LA51_42 = input.LA(3);
                    
                    if ( (synpred79()) )
                    {
                        alt51 = 1;
                    }
                    else if ( (synpred80()) )
                    {
                        alt51 = 2;
                    }
                    else 
                    {
                        if ( backtracking > 0 ) {failed = true; return retval;}
                        NoViableAltException nvae_d51s42 =
                            new NoViableAltException("1057:1: annotationParam : (ide1= ident ASSIGN cn1= constant -> ^( ASSIGN ident constant ) | ide2= ident ASSIGN ide3= ident -> ^( ASSIGN ident ident ) | cn2= constant -> constant | ide4= ident -> ident );", 51, 42, input);
                    
                        throw nvae_d51s42;
                    }
                }
                else if ( (LA51_8 == EOF || LA51_8 == COMMA || LA51_8 == RPAREN) )
                {
                    alt51 = 4;
                }
                else 
                {
                    if ( backtracking > 0 ) {failed = true; return retval;}
                    NoViableAltException nvae_d51s8 =
                        new NoViableAltException("1057:1: annotationParam : (ide1= ident ASSIGN cn1= constant -> ^( ASSIGN ident constant ) | ide2= ident ASSIGN ide3= ident -> ^( ASSIGN ident ident ) | cn2= constant -> constant | ide4= ident -> ident );", 51, 8, input);
                
                    throw nvae_d51s8;
                }
                }
                break;
            case STRING_LITERAL:
            case TRUE:
            case FALSE:
            case NULL:
            case HEX_LITERAL:
            case DECIMAL_LITERAL:
            case OCTAL_LITERAL:
            case FLOAT_LITERAL:
            	{
                alt51 = 3;
                }
                break;
            	default:
            	    if ( backtracking > 0 ) {failed = true; return retval;}
            	    NoViableAltException nvae_d51s0 =
            	        new NoViableAltException("1057:1: annotationParam : (ide1= ident ASSIGN cn1= constant -> ^( ASSIGN ident constant ) | ide2= ident ASSIGN ide3= ident -> ^( ASSIGN ident ident ) | cn2= constant -> constant | ide4= ident -> ident );", 51, 0, input);
            
            	    throw nvae_d51s0;
            }
            
            switch (alt51) 
            {
                case 1 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1059:3: ide1= ident ASSIGN cn1= constant
                    {
                    	PushFollow(FOLLOW_ident_in_annotationParam3555);
                    	ide1 = ident();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) stream_ident.Add(ide1.Tree);
                    	ASSIGN190 = (CommonToken)input.LT(1);
                    	Match(input,ASSIGN,FOLLOW_ASSIGN_in_annotationParam3557); if (failed) return retval;
                    	if ( backtracking==0 ) stream_ASSIGN.Add(ASSIGN190);

                    	PushFollow(FOLLOW_constant_in_annotationParam3561);
                    	cn1 = constant();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) stream_constant.Add(cn1.Tree);
                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(((CommonTree)ide1.Tree).Text + "=" + ((CommonTree)cn1.Tree).Text); 
                    	}
                    	
                    	// AST REWRITE
                    	// elements:          ASSIGN, constant, ident
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( backtracking==0 ) {
                    	retval.tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
                    	
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 1059:119: -> ^( ASSIGN ident constant )
                    	{
                    	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1059:122: ^( ASSIGN ident constant )
                    	    {
                    	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                    	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_ASSIGN.Next(), root_1);
                    	    
                    	    adaptor.AddChild(root_1, stream_ident.Next());
                    	    adaptor.AddChild(root_1, stream_constant.Next());
                    	    
                    	    adaptor.AddChild(root_0, root_1);
                    	    }
                    	
                    	}
                    	
                    	}
                    
                    }
                    break;
                case 2 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1060:4: ide2= ident ASSIGN ide3= ident
                    {
                    	PushFollow(FOLLOW_ident_in_annotationParam3580);
                    	ide2 = ident();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) stream_ident.Add(ide2.Tree);
                    	ASSIGN191 = (CommonToken)input.LT(1);
                    	Match(input,ASSIGN,FOLLOW_ASSIGN_in_annotationParam3582); if (failed) return retval;
                    	if ( backtracking==0 ) stream_ASSIGN.Add(ASSIGN191);

                    	PushFollow(FOLLOW_ident_in_annotationParam3586);
                    	ide3 = ident();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) stream_ident.Add(ide3.Tree);
                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(((CommonTree)ide2.Tree).Text + "=" + ((CommonTree)ide3.Tree).Text); 
                    	}
                    	
                    	// AST REWRITE
                    	// elements:          ident, ident, ASSIGN
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( backtracking==0 ) {
                    	retval.tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
                    	
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 1060:119: -> ^( ASSIGN ident ident )
                    	{
                    	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1060:122: ^( ASSIGN ident ident )
                    	    {
                    	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                    	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_ASSIGN.Next(), root_1);
                    	    
                    	    adaptor.AddChild(root_1, stream_ident.Next());
                    	    adaptor.AddChild(root_1, stream_ident.Next());
                    	    
                    	    adaptor.AddChild(root_0, root_1);
                    	    }
                    	
                    	}
                    	
                    	}
                    
                    }
                    break;
                case 3 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1061:4: cn2= constant
                    {
                    	PushFollow(FOLLOW_constant_in_annotationParam3605);
                    	cn2 = constant();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) stream_constant.Add(cn2.Tree);
                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(((CommonTree)cn2.Tree).Text); 
                    	}
                    	
                    	// AST REWRITE
                    	// elements:          constant
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( backtracking==0 ) {
                    	retval.tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
                    	
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 1061:65: -> constant
                    	{
                    	    adaptor.AddChild(root_0, stream_constant.Next());
                    	
                    	}
                    	
                    	}
                    
                    }
                    break;
                case 4 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1062:4: ide4= ident
                    {
                    	PushFollow(FOLLOW_ident_in_annotationParam3618);
                    	ide4 = ident();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) stream_ident.Add(ide4.Tree);
                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(((CommonTree)ide4.Tree).Text); 
                    	}
                    	
                    	// AST REWRITE
                    	// elements:          ident
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( backtracking==0 ) {
                    	retval.tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
                    	
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 1062:65: -> ident
                    	{
                    	    adaptor.AddChild(root_0, stream_ident.Next());
                    	
                    	}
                    	
                    	}
                    
                    }
                    break;
            
            }
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 73, annotationParam_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end annotationParam

    public class modifiers_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start modifiers
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1066:1: modifiers : ( modifier )* -> ^( MODIFIERS ( modifier )* ) ;
    public modifiers_return modifiers() // throws RecognitionException [1]
    {   
        modifiers_return retval = new modifiers_return();
        retval.start = input.LT(1);
        int modifiers_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        modifier_return modifier192 = null;
        
        
        RewriteRuleSubtreeStream stream_modifier = new RewriteRuleSubtreeStream(adaptor,"rule modifier");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 74) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1067:4: ( ( modifier )* -> ^( MODIFIERS ( modifier )* ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1067:4: ( modifier )*
            {
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1067:4: ( modifier )*
            	do 
            	{
            	    int alt52 = 2;
            	    int LA52_0 = input.LA(1);
            	    
            	    if ( ((LA52_0 >= IDENT && LA52_0 <= INTERNAL) || (LA52_0 >= STATIC && LA52_0 <= DYNAMIC) || (LA52_0 >= 180 && LA52_0 <= 184)) )
            	    {
            	        alt52 = 1;
            	    }
            	    
            	
            	    switch (alt52) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:0:0: modifier
            			    {
            			    	PushFollow(FOLLOW_modifier_in_modifiers3638);
            			    	modifier192 = modifier();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) stream_modifier.Add(modifier192.Tree);
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop52;
            	    }
            	} while (true);
            	
            	loop52:
            		;	// Stops C# compiler whinging that label 'loop52' has no statements

            	
            	// AST REWRITE
            	// elements:          modifier
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 1068:3: -> ^( MODIFIERS ( modifier )* )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1068:6: ^( MODIFIERS ( modifier )* )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(MODIFIERS, "MODIFIERS"), root_1);
            	    
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1068:18: ( modifier )*
            	    while ( stream_modifier.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_modifier.Next());
            	    
            	    }
            	    stream_modifier.Reset();
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 74, modifiers_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end modifiers

    public class modifier_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start modifier
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1071:1: modifier : ( namespaceName | STATIC | 'final' | 'enumerable' | 'explicit' | 'override' | DYNAMIC | 'intrinsic' );
    public modifier_return modifier() // throws RecognitionException [1]
    {   
        modifier_return retval = new modifier_return();
        retval.start = input.LT(1);
        int modifier_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken STATIC194 = null;
        CommonToken string_literal195 = null;
        CommonToken string_literal196 = null;
        CommonToken string_literal197 = null;
        CommonToken string_literal198 = null;
        CommonToken DYNAMIC199 = null;
        CommonToken string_literal200 = null;
        namespaceName_return namespaceName193 = null;
        
        
        CommonTree STATIC194_tree=null;
        CommonTree string_literal195_tree=null;
        CommonTree string_literal196_tree=null;
        CommonTree string_literal197_tree=null;
        CommonTree string_literal198_tree=null;
        CommonTree DYNAMIC199_tree=null;
        CommonTree string_literal200_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 75) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1072:4: ( namespaceName | STATIC | 'final' | 'enumerable' | 'explicit' | 'override' | DYNAMIC | 'intrinsic' )
            int alt53 = 8;
            switch ( input.LA(1) ) 
            {
            case IDENT:
            case PUBLIC:
            case PRIVATE:
            case PROTECTED:
            case INTERNAL:
            	{
                alt53 = 1;
                }
                break;
            case STATIC:
            	{
                alt53 = 2;
                }
                break;
            case 180:
            	{
                alt53 = 3;
                }
                break;
            case 181:
            	{
                alt53 = 4;
                }
                break;
            case 182:
            	{
                alt53 = 5;
                }
                break;
            case 183:
            	{
                alt53 = 6;
                }
                break;
            case DYNAMIC:
            	{
                alt53 = 7;
                }
                break;
            case 184:
            	{
                alt53 = 8;
                }
                break;
            	default:
            	    if ( backtracking > 0 ) {failed = true; return retval;}
            	    NoViableAltException nvae_d53s0 =
            	        new NoViableAltException("1071:1: modifier : ( namespaceName | STATIC | 'final' | 'enumerable' | 'explicit' | 'override' | DYNAMIC | 'intrinsic' );", 53, 0, input);
            
            	    throw nvae_d53s0;
            }
            
            switch (alt53) 
            {
                case 1 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1072:4: namespaceName
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_namespaceName_in_modifier3661);
                    	namespaceName193 = namespaceName();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, namespaceName193.Tree);
                    
                    }
                    break;
                case 2 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1073:4: STATIC
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	STATIC194 = (CommonToken)input.LT(1);
                    	Match(input,STATIC,FOLLOW_STATIC_in_modifier3666); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	STATIC194_tree = (CommonTree)adaptor.Create(STATIC194);
                    	adaptor.AddChild(root_0, STATIC194_tree);
                    	}
                    
                    }
                    break;
                case 3 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1074:4: 'final'
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	string_literal195 = (CommonToken)input.LT(1);
                    	Match(input,180,FOLLOW_180_in_modifier3671); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	string_literal195_tree = (CommonTree)adaptor.Create(string_literal195);
                    	adaptor.AddChild(root_0, string_literal195_tree);
                    	}
                    
                    }
                    break;
                case 4 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1075:4: 'enumerable'
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	string_literal196 = (CommonToken)input.LT(1);
                    	Match(input,181,FOLLOW_181_in_modifier3676); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	string_literal196_tree = (CommonTree)adaptor.Create(string_literal196);
                    	adaptor.AddChild(root_0, string_literal196_tree);
                    	}
                    
                    }
                    break;
                case 5 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1076:4: 'explicit'
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	string_literal197 = (CommonToken)input.LT(1);
                    	Match(input,182,FOLLOW_182_in_modifier3681); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	string_literal197_tree = (CommonTree)adaptor.Create(string_literal197);
                    	adaptor.AddChild(root_0, string_literal197_tree);
                    	}
                    
                    }
                    break;
                case 6 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1077:4: 'override'
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	string_literal198 = (CommonToken)input.LT(1);
                    	Match(input,183,FOLLOW_183_in_modifier3686); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	string_literal198_tree = (CommonTree)adaptor.Create(string_literal198);
                    	adaptor.AddChild(root_0, string_literal198_tree);
                    	}
                    
                    }
                    break;
                case 7 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1078:4: DYNAMIC
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	DYNAMIC199 = (CommonToken)input.LT(1);
                    	Match(input,DYNAMIC,FOLLOW_DYNAMIC_in_modifier3691); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	DYNAMIC199_tree = (CommonTree)adaptor.Create(DYNAMIC199);
                    	adaptor.AddChild(root_0, DYNAMIC199_tree);
                    	}
                    
                    }
                    break;
                case 8 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1079:4: 'intrinsic'
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	string_literal200 = (CommonToken)input.LT(1);
                    	Match(input,184,FOLLOW_184_in_modifier3696); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	string_literal200_tree = (CommonTree)adaptor.Create(string_literal200);
                    	adaptor.AddChild(root_0, string_literal200_tree);
                    	}
                    
                    }
                    break;
            
            }
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 75, modifier_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end modifier

    public class arguments_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start arguments
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1082:1: arguments : ( LPAREN expressionList RPAREN | LPAREN RPAREN );
    public arguments_return arguments() // throws RecognitionException [1]
    {   
        InOperator_stack.Push(new InOperator_scope());
    
        arguments_return retval = new arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken LPAREN201 = null;
        CommonToken RPAREN203 = null;
        CommonToken LPAREN204 = null;
        CommonToken RPAREN205 = null;
        expressionList_return expressionList202 = null;
        
        
        CommonTree LPAREN201_tree=null;
        CommonTree RPAREN203_tree=null;
        CommonTree LPAREN204_tree=null;
        CommonTree RPAREN205_tree=null;
    
        
        	((InOperator_scope)InOperator_stack.Peek()).allowed =  true;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 76) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1087:4: ( LPAREN expressionList RPAREN | LPAREN RPAREN )
            int alt54 = 2;
            int LA54_0 = input.LA(1);
            
            if ( (LA54_0 == LPAREN) )
            {
                int LA54_1 = input.LA(2);
                
                if ( (LA54_1 == RPAREN) )
                {
                    alt54 = 2;
                }
                else if ( (LA54_1 == LCURLY || (LA54_1 >= STRING_LITERAL && LA54_1 <= SET) || LA54_1 == LPAREN || LA54_1 == VOID || LA54_1 == IDENT || LA54_1 == LBRACK || LA54_1 == DYNAMIC || (LA54_1 >= IS && LA54_1 <= AS) || (LA54_1 >= PLUS && LA54_1 <= MINUS) || (LA54_1 >= INC && LA54_1 <= NEW) || (LA54_1 >= USE && LA54_1 <= XML)) )
                {
                    alt54 = 1;
                }
                else 
                {
                    if ( backtracking > 0 ) {failed = true; return retval;}
                    NoViableAltException nvae_d54s1 =
                        new NoViableAltException("1082:1: arguments : ( LPAREN expressionList RPAREN | LPAREN RPAREN );", 54, 1, input);
                
                    throw nvae_d54s1;
                }
            }
            else 
            {
                if ( backtracking > 0 ) {failed = true; return retval;}
                NoViableAltException nvae_d54s0 =
                    new NoViableAltException("1082:1: arguments : ( LPAREN expressionList RPAREN | LPAREN RPAREN );", 54, 0, input);
            
                throw nvae_d54s0;
            }
            switch (alt54) 
            {
                case 1 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1087:4: LPAREN expressionList RPAREN
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	LPAREN201 = (CommonToken)input.LT(1);
                    	Match(input,LPAREN,FOLLOW_LPAREN_in_arguments3717); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	LPAREN201_tree = (CommonTree)adaptor.Create(LPAREN201);
                    	adaptor.AddChild(root_0, LPAREN201_tree);
                    	}
                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append("("); 
                    	}
                    	PushFollow(FOLLOW_expressionList_in_arguments3721);
                    	expressionList202 = expressionList();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, expressionList202.Tree);
                    	RPAREN203 = (CommonToken)input.LT(1);
                    	Match(input,RPAREN,FOLLOW_RPAREN_in_arguments3723); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	RPAREN203_tree = (CommonTree)adaptor.Create(RPAREN203);
                    	adaptor.AddChild(root_0, RPAREN203_tree);
                    	}
                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(")");  
                    	}
                    
                    }
                    break;
                case 2 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1088:4: LPAREN RPAREN
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	LPAREN204 = (CommonToken)input.LT(1);
                    	Match(input,LPAREN,FOLLOW_LPAREN_in_arguments3730); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	LPAREN204_tree = (CommonTree)adaptor.Create(LPAREN204);
                    	adaptor.AddChild(root_0, LPAREN204_tree);
                    	}
                    	RPAREN205 = (CommonToken)input.LT(1);
                    	Match(input,RPAREN,FOLLOW_RPAREN_in_arguments3732); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	RPAREN205_tree = (CommonTree)adaptor.Create(RPAREN205);
                    	adaptor.AddChild(root_0, RPAREN205_tree);
                    	}
                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append("()"); 
                    	}
                    
                    }
                    break;
            
            }
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 76, arguments_StartIndex); 
            }
            InOperator_stack.Pop();
    
        }
        return retval;
    }
    // $ANTLR end arguments

    public class element_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start element
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1092:1: element : assignmentExpression -> ^( ELEMENT assignmentExpression ) ;
    public element_return element() // throws RecognitionException [1]
    {   
        InOperator_stack.Push(new InOperator_scope());
    
        element_return retval = new element_return();
        retval.start = input.LT(1);
        int element_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        assignmentExpression_return assignmentExpression206 = null;
        
        
        RewriteRuleSubtreeStream stream_assignmentExpression = new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
        
        	((InOperator_scope)InOperator_stack.Peek()).allowed =  true;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 77) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1097:4: ( assignmentExpression -> ^( ELEMENT assignmentExpression ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1097:4: assignmentExpression
            {
            	PushFollow(FOLLOW_assignmentExpression_in_element3758);
            	assignmentExpression206 = assignmentExpression();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_assignmentExpression.Add(assignmentExpression206.Tree);
            	
            	// AST REWRITE
            	// elements:          assignmentExpression
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 1098:3: -> ^( ELEMENT assignmentExpression )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1098:6: ^( ELEMENT assignmentExpression )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(ELEMENT, "ELEMENT"), root_1);
            	    
            	    adaptor.AddChild(root_1, stream_assignmentExpression.Next());
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 77, element_StartIndex); 
            }
            InOperator_stack.Pop();
    
        }
        return retval;
    }
    // $ANTLR end element

    public class arrayLiteral_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start arrayLiteral
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1102:1: arrayLiteral : LBRACK ( elementList )? RBRACK -> ^( ARRAY_LITERAL ( elementList )? ) ;
    public arrayLiteral_return arrayLiteral() // throws RecognitionException [1]
    {   
        arrayLiteral_return retval = new arrayLiteral_return();
        retval.start = input.LT(1);
        int arrayLiteral_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken LBRACK207 = null;
        CommonToken RBRACK209 = null;
        elementList_return elementList208 = null;
        
        
        CommonTree LBRACK207_tree=null;
        CommonTree RBRACK209_tree=null;
        RewriteRuleTokenStream stream_LBRACK = new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_RBRACK = new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleSubtreeStream stream_elementList = new RewriteRuleSubtreeStream(adaptor,"rule elementList");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 78) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1103:4: ( LBRACK ( elementList )? RBRACK -> ^( ARRAY_LITERAL ( elementList )? ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1103:4: LBRACK ( elementList )? RBRACK
            {
            	LBRACK207 = (CommonToken)input.LT(1);
            	Match(input,LBRACK,FOLLOW_LBRACK_in_arrayLiteral3780); if (failed) return retval;
            	if ( backtracking==0 ) stream_LBRACK.Add(LBRACK207);

            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append("["); 
            	}
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1103:35: ( elementList )?
            	int alt55 = 2;
            	int LA55_0 = input.LA(1);
            	
            	if ( (LA55_0 == LCURLY || (LA55_0 >= STRING_LITERAL && LA55_0 <= SET) || LA55_0 == LPAREN || LA55_0 == VOID || LA55_0 == IDENT || LA55_0 == LBRACK || LA55_0 == DYNAMIC || (LA55_0 >= IS && LA55_0 <= AS) || (LA55_0 >= PLUS && LA55_0 <= MINUS) || (LA55_0 >= INC && LA55_0 <= NEW) || (LA55_0 >= USE && LA55_0 <= XML)) )
            	{
            	    alt55 = 1;
            	}
            	switch (alt55) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:0:0: elementList
            	        {
            	        	PushFollow(FOLLOW_elementList_in_arrayLiteral3784);
            	        	elementList208 = elementList();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) stream_elementList.Add(elementList208.Tree);
            	        
            	        }
            	        break;
            	
            	}

            	RBRACK209 = (CommonToken)input.LT(1);
            	Match(input,RBRACK,FOLLOW_RBRACK_in_arrayLiteral3787); if (failed) return retval;
            	if ( backtracking==0 ) stream_RBRACK.Add(RBRACK209);

            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append("]"); 
            	}
            	
            	// AST REWRITE
            	// elements:          elementList
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 1104:3: -> ^( ARRAY_LITERAL ( elementList )? )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1104:6: ^( ARRAY_LITERAL ( elementList )? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(ARRAY_LITERAL, "ARRAY_LITERAL"), root_1);
            	    
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1104:22: ( elementList )?
            	    if ( stream_elementList.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_elementList.Next());
            	    
            	    }
            	    stream_elementList.Reset();
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 78, arrayLiteral_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end arrayLiteral

    public class elementList_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start elementList
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1107:1: elementList : nonemptyElementList ( COMMA ( nonemptyElementList )? )* ;
    public elementList_return elementList() // throws RecognitionException [1]
    {   
        elementList_return retval = new elementList_return();
        retval.start = input.LT(1);
        int elementList_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken COMMA211 = null;
        nonemptyElementList_return nonemptyElementList210 = null;

        nonemptyElementList_return nonemptyElementList212 = null;
        
        
        CommonTree COMMA211_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 79) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1108:4: ( nonemptyElementList ( COMMA ( nonemptyElementList )? )* )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1108:4: nonemptyElementList ( COMMA ( nonemptyElementList )? )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	PushFollow(FOLLOW_nonemptyElementList_in_elementList3811);
            	nonemptyElementList210 = nonemptyElementList();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, nonemptyElementList210.Tree);
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1109:3: ( COMMA ( nonemptyElementList )? )*
            	do 
            	{
            	    int alt57 = 2;
            	    int LA57_0 = input.LA(1);
            	    
            	    if ( (LA57_0 == COMMA) )
            	    {
            	        alt57 = 1;
            	    }
            	    
            	
            	    switch (alt57) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1110:4: COMMA ( nonemptyElementList )?
            			    {
            			    	COMMA211 = (CommonToken)input.LT(1);
            			    	Match(input,COMMA,FOLLOW_COMMA_in_elementList3821); if (failed) return retval;
            			    	if ( backtracking == 0 ) 
            			    	{
            			    	   buffer.Append(options.SpaceBetweenArguments ? ", " : ","); 
            			    	}
            			    	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1111:4: ( nonemptyElementList )?
            			    	int alt56 = 2;
            			    	int LA56_0 = input.LA(1);
            			    	
            			    	if ( (LA56_0 == LCURLY || (LA56_0 >= STRING_LITERAL && LA56_0 <= SET) || LA56_0 == LPAREN || LA56_0 == VOID || LA56_0 == IDENT || LA56_0 == LBRACK || LA56_0 == DYNAMIC || (LA56_0 >= IS && LA56_0 <= AS) || (LA56_0 >= PLUS && LA56_0 <= MINUS) || (LA56_0 >= INC && LA56_0 <= NEW) || (LA56_0 >= USE && LA56_0 <= XML)) )
            			    	{
            			    	    alt56 = 1;
            			    	}
            			    	switch (alt56) 
            			    	{
            			    	    case 1 :
            			    	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:0:0: nonemptyElementList
            			    	        {
            			    	        	PushFollow(FOLLOW_nonemptyElementList_in_elementList3834);
            			    	        	nonemptyElementList212 = nonemptyElementList();
            			    	        	followingStackPointer_--;
            			    	        	if (failed) return retval;
            			    	        	if ( backtracking==0 ) adaptor.AddChild(root_0, nonemptyElementList212.Tree);
            			    	        
            			    	        }
            			    	        break;
            			    	
            			    	}

            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop57;
            	    }
            	} while (true);
            	
            	loop57:
            		;	// Stops C# compiler whinging that label 'loop57' has no statements

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 79, elementList_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end elementList

    public class nonemptyElementList_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start nonemptyElementList
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1115:1: nonemptyElementList : assignmentExpression ( COMMA assignmentExpression )* ;
    public nonemptyElementList_return nonemptyElementList() // throws RecognitionException [1]
    {   
        InOperator_stack.Push(new InOperator_scope());
    
        nonemptyElementList_return retval = new nonemptyElementList_return();
        retval.start = input.LT(1);
        int nonemptyElementList_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken COMMA214 = null;
        assignmentExpression_return assignmentExpression213 = null;

        assignmentExpression_return assignmentExpression215 = null;
        
        
        CommonTree COMMA214_tree=null;
    
        
        	((InOperator_scope)InOperator_stack.Peek()).allowed =  true;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 80) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1120:4: ( assignmentExpression ( COMMA assignmentExpression )* )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1120:4: assignmentExpression ( COMMA assignmentExpression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	PushFollow(FOLLOW_assignmentExpression_in_nonemptyElementList3862);
            	assignmentExpression213 = assignmentExpression();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, assignmentExpression213.Tree);
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1121:3: ( COMMA assignmentExpression )*
            	do 
            	{
            	    int alt58 = 2;
            	    int LA58_0 = input.LA(1);
            	    
            	    if ( (LA58_0 == COMMA) )
            	    {
            	        switch ( input.LA(2) ) 
            	        {
            	        case INC:
            	        	{
            	            int LA58_4 = input.LA(3);
            	            
            	            if ( (synpred94()) )
            	            {
            	                alt58 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case DEC:
            	        	{
            	            int LA58_5 = input.LA(3);
            	            
            	            if ( (synpred94()) )
            	            {
            	                alt58 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case MINUS:
            	        	{
            	            int LA58_6 = input.LA(3);
            	            
            	            if ( (synpred94()) )
            	            {
            	                alt58 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case PLUS:
            	        	{
            	            int LA58_7 = input.LA(3);
            	            
            	            if ( (synpred94()) )
            	            {
            	                alt58 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case DELETE:
            	        	{
            	            int LA58_8 = input.LA(3);
            	            
            	            if ( (synpred94()) )
            	            {
            	                alt58 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case VOID:
            	        	{
            	            int LA58_9 = input.LA(3);
            	            
            	            if ( (synpred94()) )
            	            {
            	                alt58 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case TYPEOF:
            	        	{
            	            int LA58_10 = input.LA(3);
            	            
            	            if ( (synpred94()) )
            	            {
            	                alt58 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LNOT:
            	        	{
            	            int LA58_11 = input.LA(3);
            	            
            	            if ( (synpred94()) )
            	            {
            	                alt58 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case BNOT:
            	        	{
            	            int LA58_12 = input.LA(3);
            	            
            	            if ( (synpred94()) )
            	            {
            	                alt58 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case UNDEFINED:
            	        	{
            	            int LA58_13 = input.LA(3);
            	            
            	            if ( (synpred94()) )
            	            {
            	                alt58 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case HEX_LITERAL:
            	        case DECIMAL_LITERAL:
            	        case OCTAL_LITERAL:
            	        case FLOAT_LITERAL:
            	        	{
            	            int LA58_14 = input.LA(3);
            	            
            	            if ( (synpred94()) )
            	            {
            	                alt58 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case STRING_LITERAL:
            	        	{
            	            int LA58_15 = input.LA(3);
            	            
            	            if ( (synpred94()) )
            	            {
            	                alt58 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case TRUE:
            	        	{
            	            int LA58_16 = input.LA(3);
            	            
            	            if ( (synpred94()) )
            	            {
            	                alt58 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case FALSE:
            	        	{
            	            int LA58_17 = input.LA(3);
            	            
            	            if ( (synpred94()) )
            	            {
            	                alt58 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case NULL:
            	        	{
            	            int LA58_18 = input.LA(3);
            	            
            	            if ( (synpred94()) )
            	            {
            	                alt58 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LBRACK:
            	        	{
            	            int LA58_19 = input.LA(3);
            	            
            	            if ( (synpred94()) )
            	            {
            	                alt58 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LCURLY:
            	        	{
            	            int LA58_20 = input.LA(3);
            	            
            	            if ( (synpred94()) )
            	            {
            	                alt58 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case FUNCTION:
            	        	{
            	            int LA58_21 = input.LA(3);
            	            
            	            if ( (synpred94()) )
            	            {
            	                alt58 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case NEW:
            	        	{
            	            int LA58_22 = input.LA(3);
            	            
            	            if ( (synpred94()) )
            	            {
            	                alt58 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LPAREN:
            	        	{
            	            int LA58_23 = input.LA(3);
            	            
            	            if ( (synpred94()) )
            	            {
            	                alt58 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case IDENT:
            	        	{
            	            int LA58_24 = input.LA(3);
            	            
            	            if ( (synpred94()) )
            	            {
            	                alt58 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case USE:
            	        	{
            	            int LA58_25 = input.LA(3);
            	            
            	            if ( (synpred94()) )
            	            {
            	                alt58 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case XML:
            	        	{
            	            int LA58_26 = input.LA(3);
            	            
            	            if ( (synpred94()) )
            	            {
            	                alt58 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case DYNAMIC:
            	        	{
            	            int LA58_27 = input.LA(3);
            	            
            	            if ( (synpred94()) )
            	            {
            	                alt58 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case IS:
            	        	{
            	            int LA58_28 = input.LA(3);
            	            
            	            if ( (synpred94()) )
            	            {
            	                alt58 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case AS:
            	        	{
            	            int LA58_29 = input.LA(3);
            	            
            	            if ( (synpred94()) )
            	            {
            	                alt58 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case GET:
            	        	{
            	            int LA58_30 = input.LA(3);
            	            
            	            if ( (synpred94()) )
            	            {
            	                alt58 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case SET:
            	        	{
            	            int LA58_31 = input.LA(3);
            	            
            	            if ( (synpred94()) )
            	            {
            	                alt58 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        
            	        }
            	    
            	    }
            	    
            	
            	    switch (alt58) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1122:4: COMMA assignmentExpression
            			    {
            			    	COMMA214 = (CommonToken)input.LT(1);
            			    	Match(input,COMMA,FOLLOW_COMMA_in_nonemptyElementList3872); if (failed) return retval;
            			    	if ( backtracking==0 ) {
            			    	COMMA214_tree = (CommonTree)adaptor.Create(COMMA214);
            			    	adaptor.AddChild(root_0, COMMA214_tree);
            			    	}
            			    	if ( backtracking == 0 ) 
            			    	{
            			    	   buffer.Append(options.SpaceBetweenArguments ? ", " : ","); 
            			    	}
            			    	PushFollow(FOLLOW_assignmentExpression_in_nonemptyElementList3884);
            			    	assignmentExpression215 = assignmentExpression();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) adaptor.AddChild(root_0, assignmentExpression215.Tree);
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop58;
            	    }
            	} while (true);
            	
            	loop58:
            		;	// Stops C# compiler whinging that label 'loop58' has no statements

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 80, nonemptyElementList_StartIndex); 
            }
            InOperator_stack.Pop();
    
        }
        return retval;
    }
    // $ANTLR end nonemptyElementList

    public class objectLiteral_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start objectLiteral
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1128:1: objectLiteral : LCURLY ( fieldList )? RCURLY -> ^( OBJECT_LITERAL ( fieldList )? ) ;
    public objectLiteral_return objectLiteral() // throws RecognitionException [1]
    {   
        objectLiteral_return retval = new objectLiteral_return();
        retval.start = input.LT(1);
        int objectLiteral_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken LCURLY216 = null;
        CommonToken RCURLY218 = null;
        fieldList_return fieldList217 = null;
        
        
        CommonTree LCURLY216_tree=null;
        CommonTree RCURLY218_tree=null;
        RewriteRuleTokenStream stream_LCURLY = new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_RCURLY = new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_fieldList = new RewriteRuleSubtreeStream(adaptor,"rule fieldList");
        
        	int next_token = -1;
        	
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 81) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1132:4: ( LCURLY ( fieldList )? RCURLY -> ^( OBJECT_LITERAL ( fieldList )? ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1132:4: LCURLY ( fieldList )? RCURLY
            {
            	LCURLY216 = (CommonToken)input.LT(1);
            	Match(input,LCURLY,FOLLOW_LCURLY_in_objectLiteral3906); if (failed) return retval;
            	if ( backtracking==0 ) stream_LCURLY.Add(LCURLY216);

            	if ( backtracking == 0 ) 
            	{
            	   
            	  							buffer.Append("{"); 
            	  							next_token = input.LA(1);
            	  							if(next_token != ASLexer.RCURLY && options.NewlineBetweenFields)
            	  							{
            	  								CurrentTab++;
            	  								buffer.Append(NewLine + tab);
            	  							}
            	  						
            	}
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1141:3: ( fieldList )?
            	int alt59 = 2;
            	int LA59_0 = input.LA(1);
            	
            	if ( ((LA59_0 >= GET && LA59_0 <= SET) || LA59_0 == IDENT || LA59_0 == DYNAMIC || (LA59_0 >= IS && LA59_0 <= AS) || (LA59_0 >= HEX_LITERAL && LA59_0 <= FLOAT_LITERAL) || (LA59_0 >= USE && LA59_0 <= XML)) )
            	{
            	    alt59 = 1;
            	}
            	switch (alt59) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:0:0: fieldList
            	        {
            	        	PushFollow(FOLLOW_fieldList_in_objectLiteral3915);
            	        	fieldList217 = fieldList();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) stream_fieldList.Add(fieldList217.Tree);
            	        
            	        }
            	        break;
            	
            	}

            	RCURLY218 = (CommonToken)input.LT(1);
            	Match(input,RCURLY,FOLLOW_RCURLY_in_objectLiteral3921); if (failed) return retval;
            	if ( backtracking==0 ) stream_RCURLY.Add(RCURLY218);

            	if ( backtracking == 0 ) 
            	{
            	   
            	  							if(next_token != ASLexer.RCURLY && options.NewlineBetweenFields)
            	  							{
            	  								CurrentTab--;
            	  								buffer.Append(NewLine + tab);
            	  							}
            	  							buffer.Append("}"); 
            	  						
            	}
            	
            	// AST REWRITE
            	// elements:          fieldList
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 1150:3: -> ^( OBJECT_LITERAL ( fieldList )? )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1150:6: ^( OBJECT_LITERAL ( fieldList )? )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(OBJECT_LITERAL, "OBJECT_LITERAL"), root_1);
            	    
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1150:23: ( fieldList )?
            	    if ( stream_fieldList.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_fieldList.Next());
            	    
            	    }
            	    stream_fieldList.Reset();
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 81, objectLiteral_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end objectLiteral

    public class fieldList_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start fieldList
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1153:1: fieldList : literalField ( COMMA ( literalField )? )* ;
    public fieldList_return fieldList() // throws RecognitionException [1]
    {   
        fieldList_return retval = new fieldList_return();
        retval.start = input.LT(1);
        int fieldList_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken COMMA220 = null;
        literalField_return literalField219 = null;

        literalField_return literalField221 = null;
        
        
        CommonTree COMMA220_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 82) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1154:4: ( literalField ( COMMA ( literalField )? )* )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1154:4: literalField ( COMMA ( literalField )? )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	PushFollow(FOLLOW_literalField_in_fieldList3948);
            	literalField219 = literalField();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, literalField219.Tree);
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1155:3: ( COMMA ( literalField )? )*
            	do 
            	{
            	    int alt61 = 2;
            	    int LA61_0 = input.LA(1);
            	    
            	    if ( (LA61_0 == COMMA) )
            	    {
            	        alt61 = 1;
            	    }
            	    
            	
            	    switch (alt61) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1156:4: COMMA ( literalField )?
            			    {
            			    	COMMA220 = (CommonToken)input.LT(1);
            			    	Match(input,COMMA,FOLLOW_COMMA_in_fieldList3958); if (failed) return retval;
            			    	if ( backtracking == 0 ) 
            			    	{
            			    	  
            			    	  											if(options.NewlineBetweenFields)
            			    	  											{
            			    	  												buffer.Append("," + NewLine + tab);
            			    	  											} else 
            			    	  											{ 
            			    	  												buffer.Append(options.SpaceBetweenArguments ? ", " : ","); 
            			    	  											}
            			    	  										
            			    	}
            			    	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1165:4: ( literalField )?
            			    	int alt60 = 2;
            			    	int LA60_0 = input.LA(1);
            			    	
            			    	if ( ((LA60_0 >= GET && LA60_0 <= SET) || LA60_0 == IDENT || LA60_0 == DYNAMIC || (LA60_0 >= IS && LA60_0 <= AS) || (LA60_0 >= HEX_LITERAL && LA60_0 <= FLOAT_LITERAL) || (LA60_0 >= USE && LA60_0 <= XML)) )
            			    	{
            			    	    alt60 = 1;
            			    	}
            			    	switch (alt60) 
            			    	{
            			    	    case 1 :
            			    	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:0:0: literalField
            			    	        {
            			    	        	PushFollow(FOLLOW_literalField_in_fieldList3972);
            			    	        	literalField221 = literalField();
            			    	        	followingStackPointer_--;
            			    	        	if (failed) return retval;
            			    	        	if ( backtracking==0 ) adaptor.AddChild(root_0, literalField221.Tree);
            			    	        
            			    	        }
            			    	        break;
            			    	
            			    	}

            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop61;
            	    }
            	} while (true);
            	
            	loop61:
            		;	// Stops C# compiler whinging that label 'loop61' has no statements

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 82, fieldList_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end fieldList

    public class literalField_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start literalField
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1169:1: literalField : field= fieldName COLON element -> ^( OBJECT_FIELD fieldName element ) ;
    public literalField_return literalField() // throws RecognitionException [1]
    {   
        literalField_return retval = new literalField_return();
        retval.start = input.LT(1);
        int literalField_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken COLON222 = null;
        fieldName_return field = null;

        element_return element223 = null;
        
        
        CommonTree COLON222_tree=null;
        RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_element = new RewriteRuleSubtreeStream(adaptor,"rule element");
        RewriteRuleSubtreeStream stream_fieldName = new RewriteRuleSubtreeStream(adaptor,"rule fieldName");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 83) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1170:5: (field= fieldName COLON element -> ^( OBJECT_FIELD fieldName element ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1170:5: field= fieldName COLON element
            {
            	PushFollow(FOLLOW_fieldName_in_literalField3994);
            	field = fieldName();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_fieldName.Add(field.Tree);
            	COLON222 = (CommonToken)input.LT(1);
            	Match(input,COLON,FOLLOW_COLON_in_literalField3999); if (failed) return retval;
            	if ( backtracking==0 ) stream_COLON.Add(COLON222);

            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append( options.SpaceBetweenType ? " : " : ":"); 
            	}
            	PushFollow(FOLLOW_element_in_literalField4007);
            	element223 = element();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_element.Add(element223.Tree);
            	
            	// AST REWRITE
            	// elements:          fieldName, element
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 1173:3: -> ^( OBJECT_FIELD fieldName element )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1173:6: ^( OBJECT_FIELD fieldName element )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(OBJECT_FIELD, "OBJECT_FIELD"), root_1);
            	    
            	    adaptor.AddChild(root_1, stream_fieldName.Next());
            	    adaptor.AddChild(root_1, stream_element.Next());
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 83, literalField_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end literalField

    public class fieldName_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start fieldName
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1176:1: fieldName : (ide= ident | num= number );
    public fieldName_return fieldName() // throws RecognitionException [1]
    {   
        fieldName_return retval = new fieldName_return();
        retval.start = input.LT(1);
        int fieldName_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        ident_return ide = null;

        number_return num = null;
        
        
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 84) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1177:4: (ide= ident | num= number )
            int alt62 = 2;
            int LA62_0 = input.LA(1);
            
            if ( ((LA62_0 >= GET && LA62_0 <= SET) || LA62_0 == IDENT || LA62_0 == DYNAMIC || (LA62_0 >= IS && LA62_0 <= AS) || (LA62_0 >= USE && LA62_0 <= XML)) )
            {
                alt62 = 1;
            }
            else if ( ((LA62_0 >= HEX_LITERAL && LA62_0 <= FLOAT_LITERAL)) )
            {
                alt62 = 2;
            }
            else 
            {
                if ( backtracking > 0 ) {failed = true; return retval;}
                NoViableAltException nvae_d62s0 =
                    new NoViableAltException("1176:1: fieldName : (ide= ident | num= number );", 62, 0, input);
            
                throw nvae_d62s0;
            }
            switch (alt62) 
            {
                case 1 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1177:4: ide= ident
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_ident_in_fieldName4033);
                    	ide = ident();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, ide.Tree);
                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(((CommonTree)ide.Tree).Text ); 
                    	}
                    
                    }
                    break;
                case 2 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1178:4: num= number
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_number_in_fieldName4043);
                    	num = number();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, num.Tree);
                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(((CommonTree)num.Tree).Text); 
                    	}
                    
                    }
                    break;
            
            }
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 84, fieldName_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end fieldName

    public class expression_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start expression
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1182:1: expression : assignmentExpression ;
    public expression_return expression() // throws RecognitionException [1]
    {   
        InOperator_stack.Push(new InOperator_scope());
    
        expression_return retval = new expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        assignmentExpression_return assignmentExpression224 = null;
        
        
    
        
        	((InOperator_scope)InOperator_stack.Peek()).allowed =  true;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 85) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1187:4: ( assignmentExpression )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1187:4: assignmentExpression
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	PushFollow(FOLLOW_assignmentExpression_in_expression4068);
            	assignmentExpression224 = assignmentExpression();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, assignmentExpression224.Tree);
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 85, expression_StartIndex); 
            }
            InOperator_stack.Pop();
    
        }
        return retval;
    }
    // $ANTLR end expression

    public class expressionList_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start expressionList
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1191:1: expressionList : assignmentExpression ( COMMA assignmentExpression )* -> ^( ELIST assignmentExpression ( COMMA assignmentExpression )* ) ;
    public expressionList_return expressionList() // throws RecognitionException [1]
    {   
        expressionList_return retval = new expressionList_return();
        retval.start = input.LT(1);
        int expressionList_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken COMMA226 = null;
        assignmentExpression_return assignmentExpression225 = null;

        assignmentExpression_return assignmentExpression227 = null;
        
        
        CommonTree COMMA226_tree=null;
        RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_assignmentExpression = new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 86) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1192:4: ( assignmentExpression ( COMMA assignmentExpression )* -> ^( ELIST assignmentExpression ( COMMA assignmentExpression )* ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1192:4: assignmentExpression ( COMMA assignmentExpression )*
            {
            	PushFollow(FOLLOW_assignmentExpression_in_expressionList4080);
            	assignmentExpression225 = assignmentExpression();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_assignmentExpression.Add(assignmentExpression225.Tree);
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1193:3: ( COMMA assignmentExpression )*
            	do 
            	{
            	    int alt63 = 2;
            	    int LA63_0 = input.LA(1);
            	    
            	    if ( (LA63_0 == COMMA) )
            	    {
            	        alt63 = 1;
            	    }
            	    
            	
            	    switch (alt63) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1194:4: COMMA assignmentExpression
            			    {
            			    	COMMA226 = (CommonToken)input.LT(1);
            			    	Match(input,COMMA,FOLLOW_COMMA_in_expressionList4090); if (failed) return retval;
            			    	if ( backtracking==0 ) stream_COMMA.Add(COMMA226);

            			    	if ( backtracking == 0 ) 
            			    	{
            			    	  buffer.Append(options.SpaceBetweenArguments ? ", " : ","); 
            			    	}
            			    	PushFollow(FOLLOW_assignmentExpression_in_expressionList4102);
            			    	assignmentExpression227 = assignmentExpression();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) stream_assignmentExpression.Add(assignmentExpression227.Tree);
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop63;
            	    }
            	} while (true);
            	
            	loop63:
            		;	// Stops C# compiler whinging that label 'loop63' has no statements

            	
            	// AST REWRITE
            	// elements:          COMMA, assignmentExpression, assignmentExpression
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 1196:6: -> ^( ELIST assignmentExpression ( COMMA assignmentExpression )* )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1196:9: ^( ELIST assignmentExpression ( COMMA assignmentExpression )* )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(ELIST, "ELIST"), root_1);
            	    
            	    adaptor.AddChild(root_1, stream_assignmentExpression.Next());
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1196:38: ( COMMA assignmentExpression )*
            	    while ( stream_COMMA.HasNext() || stream_assignmentExpression.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_COMMA.Next());
            	        adaptor.AddChild(root_1, stream_assignmentExpression.Next());
            	    
            	    }
            	    stream_COMMA.Reset();
            	    stream_assignmentExpression.Reset();
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 86, expressionList_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end expressionList

    public class assignmentExpression_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start assignmentExpression
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1200:1: assignmentExpression : c= conditionalExpression ( ( assignmentOperator )=>op= assignmentOperator assignmentExpression )* ;
    public assignmentExpression_return assignmentExpression() // throws RecognitionException [1]
    {   
        assignmentExpression_return retval = new assignmentExpression_return();
        retval.start = input.LT(1);
        int assignmentExpression_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        conditionalExpression_return c = null;

        assignmentOperator_return op = null;

        assignmentExpression_return assignmentExpression228 = null;
        
        
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 87) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1201:4: (c= conditionalExpression ( ( assignmentOperator )=>op= assignmentOperator assignmentExpression )* )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1201:4: c= conditionalExpression ( ( assignmentOperator )=>op= assignmentOperator assignmentExpression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	PushFollow(FOLLOW_conditionalExpression_in_assignmentExpression4136);
            	c = conditionalExpression();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, c.Tree);
            	if ( backtracking == 0 ) 
            	{
            	   
            	}
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1202:2: ( ( assignmentOperator )=>op= assignmentOperator assignmentExpression )*
            	do 
            	{
            	    int alt64 = 2;
            	    int LA64_0 = input.LA(1);
            	    
            	    if ( (LA64_0 == ASSIGN || (LA64_0 >= STAR_ASSIGN && LA64_0 <= LOR_ASSIGN)) )
            	    {
            	        int LA64_64 = input.LA(2);
            	        
            	        if ( (synpred100()) )
            	        {
            	            alt64 = 1;
            	        }
            	        
            	    
            	    }
            	    
            	
            	    switch (alt64) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1202:4: ( assignmentOperator )=>op= assignmentOperator assignmentExpression
            			    {
            			    	PushFollow(FOLLOW_assignmentOperator_in_assignmentExpression4151);
            			    	op = assignmentOperator();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) adaptor.AddChild(root_0, op.Tree);
            			    	if ( backtracking == 0 ) 
            			    	{
            			    	   
            			    	  														if(options.SpaceBetweenAssign) buffer.Append(" ");
            			    	  														buffer.Append(((CommonTree)op.Tree).Text ); 
            			    	  														if(options.SpaceBetweenAssign) buffer.Append(" "); 
            			    	  													
            			    	}
            			    	PushFollow(FOLLOW_assignmentExpression_in_assignmentExpression4171);
            			    	assignmentExpression228 = assignmentExpression();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) adaptor.AddChild(root_0, assignmentExpression228.Tree);
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop64;
            	    }
            	} while (true);
            	
            	loop64:
            		;	// Stops C# compiler whinging that label 'loop64' has no statements

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 87, assignmentExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end assignmentExpression

    public class assignmentOperator_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start assignmentOperator
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1212:1: assignmentOperator : ( ASSIGN | STAR_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | SL_ASSIGN | SR_ASSIGN | BSR_ASSIGN | BAND_ASSIGN | BXOR_ASSIGN | BOR_ASSIGN | LAND_ASSIGN | LOR_ASSIGN );
    public assignmentOperator_return assignmentOperator() // throws RecognitionException [1]
    {   
        assignmentOperator_return retval = new assignmentOperator_return();
        retval.start = input.LT(1);
        int assignmentOperator_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken set229 = null;
        
        CommonTree set229_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 88) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1213:4: ( ASSIGN | STAR_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | SL_ASSIGN | SR_ASSIGN | BSR_ASSIGN | BAND_ASSIGN | BXOR_ASSIGN | BOR_ASSIGN | LAND_ASSIGN | LOR_ASSIGN )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	set229 = (CommonToken)input.LT(1);
            	if ( input.LA(1) == ASSIGN || (input.LA(1) >= STAR_ASSIGN && input.LA(1) <= LOR_ASSIGN) ) 
            	{
            	    input.Consume();
            	    if ( backtracking==0 ) adaptor.AddChild(root_0, adaptor.Create(set229));
            	    errorRecovery = false;failed = false;
            	}
            	else 
            	{
            	    if ( backtracking > 0 ) {failed = true; return retval;}
            	    MismatchedSetException mse =
            	        new MismatchedSetException(null,input);
            	    RecoverFromMismatchedSet(input,mse,FOLLOW_set_in_assignmentOperator0);    throw mse;
            	}

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 88, assignmentOperator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end assignmentOperator

    public class conditionalExpression_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start conditionalExpression
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1230:1: conditionalExpression : ( logicalOrExpression -> logicalOrExpression ) ( QUESTION conditionalSubExpression -> ^( QUESTION $conditionalExpression conditionalSubExpression ) )? ;
    public conditionalExpression_return conditionalExpression() // throws RecognitionException [1]
    {   
        conditionalExpression_return retval = new conditionalExpression_return();
        retval.start = input.LT(1);
        int conditionalExpression_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken QUESTION231 = null;
        logicalOrExpression_return logicalOrExpression230 = null;

        conditionalSubExpression_return conditionalSubExpression232 = null;
        
        
        CommonTree QUESTION231_tree=null;
        RewriteRuleTokenStream stream_QUESTION = new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleSubtreeStream stream_logicalOrExpression = new RewriteRuleSubtreeStream(adaptor,"rule logicalOrExpression");
        RewriteRuleSubtreeStream stream_conditionalSubExpression = new RewriteRuleSubtreeStream(adaptor,"rule conditionalSubExpression");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 89) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1231:4: ( ( logicalOrExpression -> logicalOrExpression ) ( QUESTION conditionalSubExpression -> ^( QUESTION $conditionalExpression conditionalSubExpression ) )? )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1231:4: ( logicalOrExpression -> logicalOrExpression ) ( QUESTION conditionalSubExpression -> ^( QUESTION $conditionalExpression conditionalSubExpression ) )?
            {
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1231:4: ( logicalOrExpression -> logicalOrExpression )
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1231:5: logicalOrExpression
            	{
            		PushFollow(FOLLOW_logicalOrExpression_in_conditionalExpression4265);
            		logicalOrExpression230 = logicalOrExpression();
            		followingStackPointer_--;
            		if (failed) return retval;
            		if ( backtracking==0 ) stream_logicalOrExpression.Add(logicalOrExpression230.Tree);
            		
            		// AST REWRITE
            		// elements:          logicalOrExpression
            		// token labels:      
            		// rule labels:       retval
            		// token list labels: 
            		// rule list labels:  
            		if ( backtracking==0 ) {
            		retval.tree = root_0;
            		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            		
            		root_0 = (CommonTree)adaptor.GetNilNode();
            		// 1231:25: -> logicalOrExpression
            		{
            		    adaptor.AddChild(root_0, stream_logicalOrExpression.Next());
            		
            		}
            		
            		}
            	
            	}

            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1232:3: ( QUESTION conditionalSubExpression -> ^( QUESTION $conditionalExpression conditionalSubExpression ) )?
            	int alt65 = 2;
            	int LA65_0 = input.LA(1);
            	
            	if ( (LA65_0 == QUESTION) )
            	{
            	    alt65 = 1;
            	}
            	switch (alt65) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1233:4: QUESTION conditionalSubExpression
            	        {
            	        	QUESTION231 = (CommonToken)input.LT(1);
            	        	Match(input,QUESTION,FOLLOW_QUESTION_in_conditionalExpression4279); if (failed) return retval;
            	        	if ( backtracking==0 ) stream_QUESTION.Add(QUESTION231);

            	        	if ( backtracking == 0 ) 
            	        	{
            	        	   
            	        	  							if(options.SpaceBetweenOperators) buffer.Append(" ");
            	        	  							buffer.Append("?"); 
            	        	  							if(options.SpaceBetweenOperators) buffer.Append(" "); 
            	        	  						
            	        	}
            	        	PushFollow(FOLLOW_conditionalSubExpression_in_conditionalExpression4286);
            	        	conditionalSubExpression232 = conditionalSubExpression();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) stream_conditionalSubExpression.Add(conditionalSubExpression232.Tree);
            	        	
            	        	// AST REWRITE
            	        	// elements:          conditionalExpression, QUESTION, conditionalSubExpression
            	        	// token labels:      
            	        	// rule labels:       retval
            	        	// token list labels: 
            	        	// rule list labels:  
            	        	if ( backtracking==0 ) {
            	        	retval.tree = root_0;
            	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	        	
            	        	root_0 = (CommonTree)adaptor.GetNilNode();
            	        	// 1239:4: -> ^( QUESTION $conditionalExpression conditionalSubExpression )
            	        	{
            	        	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1239:7: ^( QUESTION $conditionalExpression conditionalSubExpression )
            	        	    {
            	        	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	        	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_QUESTION.Next(), root_1);
            	        	    
            	        	    adaptor.AddChild(root_1, stream_retval.Next());
            	        	    adaptor.AddChild(root_1, stream_conditionalSubExpression.Next());
            	        	    
            	        	    adaptor.AddChild(root_0, root_1);
            	        	    }
            	        	
            	        	}
            	        	
            	        	}
            	        
            	        }
            	        break;
            	
            	}

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 89, conditionalExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end conditionalExpression

    public class conditionalSubExpression_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start conditionalSubExpression
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1242:1: conditionalSubExpression : assignmentExpression COLON assignmentExpression ;
    public conditionalSubExpression_return conditionalSubExpression() // throws RecognitionException [1]
    {   
        conditionalSubExpression_return retval = new conditionalSubExpression_return();
        retval.start = input.LT(1);
        int conditionalSubExpression_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken COLON234 = null;
        assignmentExpression_return assignmentExpression233 = null;

        assignmentExpression_return assignmentExpression235 = null;
        
        
        CommonTree COLON234_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 90) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1243:4: ( assignmentExpression COLON assignmentExpression )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1243:4: assignmentExpression COLON assignmentExpression
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	PushFollow(FOLLOW_assignmentExpression_in_conditionalSubExpression4315);
            	assignmentExpression233 = assignmentExpression();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, assignmentExpression233.Tree);
            	COLON234 = (CommonToken)input.LT(1);
            	Match(input,COLON,FOLLOW_COLON_in_conditionalSubExpression4320); if (failed) return retval;
            	if ( backtracking==0 ) {
            	COLON234_tree = (CommonTree)adaptor.Create(COLON234);
            	root_0 = (CommonTree)adaptor.BecomeRoot(COLON234_tree, root_0);
            	}
            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append(options.SpaceBetweenOperators ? " : " : ":"); 
            	}
            	PushFollow(FOLLOW_assignmentExpression_in_conditionalSubExpression4329);
            	assignmentExpression235 = assignmentExpression();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, assignmentExpression235.Tree);
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 90, conditionalSubExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end conditionalSubExpression

    public class logicalOrExpression_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start logicalOrExpression
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1251:1: logicalOrExpression : logicalAndExpression (op= logicalOrOperator logicalAndExpression )* ;
    public logicalOrExpression_return logicalOrExpression() // throws RecognitionException [1]
    {   
        logicalOrExpression_return retval = new logicalOrExpression_return();
        retval.start = input.LT(1);
        int logicalOrExpression_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        logicalOrOperator_return op = null;

        logicalAndExpression_return logicalAndExpression236 = null;

        logicalAndExpression_return logicalAndExpression237 = null;
        
        
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 91) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1252:4: ( logicalAndExpression (op= logicalOrOperator logicalAndExpression )* )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1252:4: logicalAndExpression (op= logicalOrOperator logicalAndExpression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	PushFollow(FOLLOW_logicalAndExpression_in_logicalOrExpression4343);
            	logicalAndExpression236 = logicalAndExpression();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, logicalAndExpression236.Tree);
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1253:3: (op= logicalOrOperator logicalAndExpression )*
            	do 
            	{
            	    int alt66 = 2;
            	    int LA66_0 = input.LA(1);
            	    
            	    if ( (LA66_0 == LOR || LA66_0 == 185) )
            	    {
            	        alt66 = 1;
            	    }
            	    
            	
            	    switch (alt66) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1254:4: op= logicalOrOperator logicalAndExpression
            			    {
            			    	PushFollow(FOLLOW_logicalOrOperator_in_logicalOrExpression4354);
            			    	op = logicalOrOperator();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) root_0 = (CommonTree)adaptor.BecomeRoot(op.Tree, root_0);
            			    	if ( backtracking == 0 ) 
            			    	{
            			    	   
            			    	  														if(options.SpaceBetweenOperators) buffer.Append(" ");
            			    	  														buffer.Append(((CommonTree)op.Tree).Text ); 
            			    	  														if(options.SpaceBetweenOperators) buffer.Append(" "); 
            			    	  													
            			    	}
            			    	PushFollow(FOLLOW_logicalAndExpression_in_logicalOrExpression4366);
            			    	logicalAndExpression237 = logicalAndExpression();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) adaptor.AddChild(root_0, logicalAndExpression237.Tree);
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop66;
            	    }
            	} while (true);
            	
            	loop66:
            		;	// Stops C# compiler whinging that label 'loop66' has no statements

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 91, logicalOrExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end logicalOrExpression

    public class logicalOrOperator_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start logicalOrOperator
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1263:1: logicalOrOperator : ( LOR | 'or' );
    public logicalOrOperator_return logicalOrOperator() // throws RecognitionException [1]
    {   
        logicalOrOperator_return retval = new logicalOrOperator_return();
        retval.start = input.LT(1);
        int logicalOrOperator_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken set238 = null;
        
        CommonTree set238_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 92) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1264:4: ( LOR | 'or' )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	set238 = (CommonToken)input.LT(1);
            	if ( input.LA(1) == LOR || input.LA(1) == 185 ) 
            	{
            	    input.Consume();
            	    if ( backtracking==0 ) adaptor.AddChild(root_0, adaptor.Create(set238));
            	    errorRecovery = false;failed = false;
            	}
            	else 
            	{
            	    if ( backtracking > 0 ) {failed = true; return retval;}
            	    MismatchedSetException mse =
            	        new MismatchedSetException(null,input);
            	    RecoverFromMismatchedSet(input,mse,FOLLOW_set_in_logicalOrOperator0);    throw mse;
            	}

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 92, logicalOrOperator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end logicalOrOperator

    public class logicalAndExpression_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start logicalAndExpression
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1268:1: logicalAndExpression : bitwiseOrExpression (op= logicalAndOperator bitwiseOrExpression )* ;
    public logicalAndExpression_return logicalAndExpression() // throws RecognitionException [1]
    {   
        logicalAndExpression_return retval = new logicalAndExpression_return();
        retval.start = input.LT(1);
        int logicalAndExpression_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        logicalAndOperator_return op = null;

        bitwiseOrExpression_return bitwiseOrExpression239 = null;

        bitwiseOrExpression_return bitwiseOrExpression240 = null;
        
        
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 93) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1269:4: ( bitwiseOrExpression (op= logicalAndOperator bitwiseOrExpression )* )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1269:4: bitwiseOrExpression (op= logicalAndOperator bitwiseOrExpression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	PushFollow(FOLLOW_bitwiseOrExpression_in_logicalAndExpression4398);
            	bitwiseOrExpression239 = bitwiseOrExpression();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, bitwiseOrExpression239.Tree);
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1270:3: (op= logicalAndOperator bitwiseOrExpression )*
            	do 
            	{
            	    int alt67 = 2;
            	    int LA67_0 = input.LA(1);
            	    
            	    if ( (LA67_0 == LAND || LA67_0 == 186) )
            	    {
            	        alt67 = 1;
            	    }
            	    
            	
            	    switch (alt67) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1271:4: op= logicalAndOperator bitwiseOrExpression
            			    {
            			    	PushFollow(FOLLOW_logicalAndOperator_in_logicalAndExpression4409);
            			    	op = logicalAndOperator();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) root_0 = (CommonTree)adaptor.BecomeRoot(op.Tree, root_0);
            			    	if ( backtracking == 0 ) 
            			    	{
            			    	   
            			    	  														if(options.SpaceBetweenOperators) buffer.Append(" ");
            			    	  														buffer.Append(((CommonTree)op.Tree).Text ); 
            			    	  														if(options.SpaceBetweenOperators) buffer.Append(" "); 
            			    	  													
            			    	}
            			    	PushFollow(FOLLOW_bitwiseOrExpression_in_logicalAndExpression4421);
            			    	bitwiseOrExpression240 = bitwiseOrExpression();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) adaptor.AddChild(root_0, bitwiseOrExpression240.Tree);
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop67;
            	    }
            	} while (true);
            	
            	loop67:
            		;	// Stops C# compiler whinging that label 'loop67' has no statements

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 93, logicalAndExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end logicalAndExpression

    public class logicalAndOperator_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start logicalAndOperator
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1280:1: logicalAndOperator : ( LAND | 'and' );
    public logicalAndOperator_return logicalAndOperator() // throws RecognitionException [1]
    {   
        logicalAndOperator_return retval = new logicalAndOperator_return();
        retval.start = input.LT(1);
        int logicalAndOperator_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken set241 = null;
        
        CommonTree set241_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 94) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1281:4: ( LAND | 'and' )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	set241 = (CommonToken)input.LT(1);
            	if ( input.LA(1) == LAND || input.LA(1) == 186 ) 
            	{
            	    input.Consume();
            	    if ( backtracking==0 ) adaptor.AddChild(root_0, adaptor.Create(set241));
            	    errorRecovery = false;failed = false;
            	}
            	else 
            	{
            	    if ( backtracking > 0 ) {failed = true; return retval;}
            	    MismatchedSetException mse =
            	        new MismatchedSetException(null,input);
            	    RecoverFromMismatchedSet(input,mse,FOLLOW_set_in_logicalAndOperator0);    throw mse;
            	}

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 94, logicalAndOperator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end logicalAndOperator

    public class bitwiseOrExpression_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start bitwiseOrExpression
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1285:1: bitwiseOrExpression : bitwiseXorExpression ( BOR bitwiseXorExpression )* ;
    public bitwiseOrExpression_return bitwiseOrExpression() // throws RecognitionException [1]
    {   
        bitwiseOrExpression_return retval = new bitwiseOrExpression_return();
        retval.start = input.LT(1);
        int bitwiseOrExpression_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken BOR243 = null;
        bitwiseXorExpression_return bitwiseXorExpression242 = null;

        bitwiseXorExpression_return bitwiseXorExpression244 = null;
        
        
        CommonTree BOR243_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 95) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1286:4: ( bitwiseXorExpression ( BOR bitwiseXorExpression )* )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1286:4: bitwiseXorExpression ( BOR bitwiseXorExpression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	PushFollow(FOLLOW_bitwiseXorExpression_in_bitwiseOrExpression4453);
            	bitwiseXorExpression242 = bitwiseXorExpression();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, bitwiseXorExpression242.Tree);
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1287:3: ( BOR bitwiseXorExpression )*
            	do 
            	{
            	    int alt68 = 2;
            	    int LA68_0 = input.LA(1);
            	    
            	    if ( (LA68_0 == BOR) )
            	    {
            	        alt68 = 1;
            	    }
            	    
            	
            	    switch (alt68) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1287:4: BOR bitwiseXorExpression
            			    {
            			    	BOR243 = (CommonToken)input.LT(1);
            			    	Match(input,BOR,FOLLOW_BOR_in_bitwiseOrExpression4458); if (failed) return retval;
            			    	if ( backtracking==0 ) {
            			    	BOR243_tree = (CommonTree)adaptor.Create(BOR243);
            			    	root_0 = (CommonTree)adaptor.BecomeRoot(BOR243_tree, root_0);
            			    	}
            			    	PushFollow(FOLLOW_bitwiseXorExpression_in_bitwiseOrExpression4461);
            			    	bitwiseXorExpression244 = bitwiseXorExpression();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) adaptor.AddChild(root_0, bitwiseXorExpression244.Tree);
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop68;
            	    }
            	} while (true);
            	
            	loop68:
            		;	// Stops C# compiler whinging that label 'loop68' has no statements

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 95, bitwiseOrExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end bitwiseOrExpression

    public class bitwiseXorExpression_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start bitwiseXorExpression
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1291:1: bitwiseXorExpression : bitwiseAndExpression ( BXOR bitwiseAndExpression )* ;
    public bitwiseXorExpression_return bitwiseXorExpression() // throws RecognitionException [1]
    {   
        bitwiseXorExpression_return retval = new bitwiseXorExpression_return();
        retval.start = input.LT(1);
        int bitwiseXorExpression_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken BXOR246 = null;
        bitwiseAndExpression_return bitwiseAndExpression245 = null;

        bitwiseAndExpression_return bitwiseAndExpression247 = null;
        
        
        CommonTree BXOR246_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 96) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1292:4: ( bitwiseAndExpression ( BXOR bitwiseAndExpression )* )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1292:4: bitwiseAndExpression ( BXOR bitwiseAndExpression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	PushFollow(FOLLOW_bitwiseAndExpression_in_bitwiseXorExpression4475);
            	bitwiseAndExpression245 = bitwiseAndExpression();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, bitwiseAndExpression245.Tree);
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1293:3: ( BXOR bitwiseAndExpression )*
            	do 
            	{
            	    int alt69 = 2;
            	    int LA69_0 = input.LA(1);
            	    
            	    if ( (LA69_0 == BXOR) )
            	    {
            	        alt69 = 1;
            	    }
            	    
            	
            	    switch (alt69) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1293:4: BXOR bitwiseAndExpression
            			    {
            			    	BXOR246 = (CommonToken)input.LT(1);
            			    	Match(input,BXOR,FOLLOW_BXOR_in_bitwiseXorExpression4480); if (failed) return retval;
            			    	if ( backtracking==0 ) {
            			    	BXOR246_tree = (CommonTree)adaptor.Create(BXOR246);
            			    	root_0 = (CommonTree)adaptor.BecomeRoot(BXOR246_tree, root_0);
            			    	}
            			    	PushFollow(FOLLOW_bitwiseAndExpression_in_bitwiseXorExpression4483);
            			    	bitwiseAndExpression247 = bitwiseAndExpression();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) adaptor.AddChild(root_0, bitwiseAndExpression247.Tree);
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop69;
            	    }
            	} while (true);
            	
            	loop69:
            		;	// Stops C# compiler whinging that label 'loop69' has no statements

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 96, bitwiseXorExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end bitwiseXorExpression

    public class bitwiseAndExpression_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start bitwiseAndExpression
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1297:1: bitwiseAndExpression : equalityExpression ( BAND equalityExpression )* ;
    public bitwiseAndExpression_return bitwiseAndExpression() // throws RecognitionException [1]
    {   
        bitwiseAndExpression_return retval = new bitwiseAndExpression_return();
        retval.start = input.LT(1);
        int bitwiseAndExpression_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken BAND249 = null;
        equalityExpression_return equalityExpression248 = null;

        equalityExpression_return equalityExpression250 = null;
        
        
        CommonTree BAND249_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 97) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1298:4: ( equalityExpression ( BAND equalityExpression )* )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1298:4: equalityExpression ( BAND equalityExpression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	PushFollow(FOLLOW_equalityExpression_in_bitwiseAndExpression4497);
            	equalityExpression248 = equalityExpression();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, equalityExpression248.Tree);
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1299:3: ( BAND equalityExpression )*
            	do 
            	{
            	    int alt70 = 2;
            	    int LA70_0 = input.LA(1);
            	    
            	    if ( (LA70_0 == BAND) )
            	    {
            	        alt70 = 1;
            	    }
            	    
            	
            	    switch (alt70) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1299:4: BAND equalityExpression
            			    {
            			    	BAND249 = (CommonToken)input.LT(1);
            			    	Match(input,BAND,FOLLOW_BAND_in_bitwiseAndExpression4502); if (failed) return retval;
            			    	if ( backtracking==0 ) {
            			    	BAND249_tree = (CommonTree)adaptor.Create(BAND249);
            			    	root_0 = (CommonTree)adaptor.BecomeRoot(BAND249_tree, root_0);
            			    	}
            			    	PushFollow(FOLLOW_equalityExpression_in_bitwiseAndExpression4505);
            			    	equalityExpression250 = equalityExpression();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) adaptor.AddChild(root_0, equalityExpression250.Tree);
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop70;
            	    }
            	} while (true);
            	
            	loop70:
            		;	// Stops C# compiler whinging that label 'loop70' has no statements

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 97, bitwiseAndExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end bitwiseAndExpression

    public class equalityExpression_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start equalityExpression
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1303:1: equalityExpression : relationalExpression (op= equalityOperator relationalExpression )* ;
    public equalityExpression_return equalityExpression() // throws RecognitionException [1]
    {   
        equalityExpression_return retval = new equalityExpression_return();
        retval.start = input.LT(1);
        int equalityExpression_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        equalityOperator_return op = null;

        relationalExpression_return relationalExpression251 = null;

        relationalExpression_return relationalExpression252 = null;
        
        
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 98) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1304:4: ( relationalExpression (op= equalityOperator relationalExpression )* )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1304:4: relationalExpression (op= equalityOperator relationalExpression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	PushFollow(FOLLOW_relationalExpression_in_equalityExpression4519);
            	relationalExpression251 = relationalExpression();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, relationalExpression251.Tree);
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1305:2: (op= equalityOperator relationalExpression )*
            	do 
            	{
            	    int alt71 = 2;
            	    int LA71_0 = input.LA(1);
            	    
            	    if ( ((LA71_0 >= STRICT_EQUAL && LA71_0 <= EQUAL)) )
            	    {
            	        alt71 = 1;
            	    }
            	    
            	
            	    switch (alt71) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1306:3: op= equalityOperator relationalExpression
            			    {
            			    	PushFollow(FOLLOW_equalityOperator_in_equalityExpression4529);
            			    	op = equalityOperator();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) root_0 = (CommonTree)adaptor.BecomeRoot(op.Tree, root_0);
            			    	if ( backtracking == 0 ) 
            			    	{
            			    	   
            			    	  														if(options.SpaceBetweenOperators) buffer.Append(" ");
            			    	  														buffer.Append(((CommonTree)op.Tree).Text ); 
            			    	  														if(options.SpaceBetweenOperators) buffer.Append(" "); 
            			    	  													
            			    	}
            			    	PushFollow(FOLLOW_relationalExpression_in_equalityExpression4541);
            			    	relationalExpression252 = relationalExpression();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) adaptor.AddChild(root_0, relationalExpression252.Tree);
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop71;
            	    }
            	} while (true);
            	
            	loop71:
            		;	// Stops C# compiler whinging that label 'loop71' has no statements

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 98, equalityExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end equalityExpression

    public class equalityOperator_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start equalityOperator
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1315:1: equalityOperator : ( STRICT_EQUAL | STRICT_NOT_EQUAL | NOT_EQUAL | EQUAL );
    public equalityOperator_return equalityOperator() // throws RecognitionException [1]
    {   
        equalityOperator_return retval = new equalityOperator_return();
        retval.start = input.LT(1);
        int equalityOperator_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken set253 = null;
        
        CommonTree set253_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 99) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1316:4: ( STRICT_EQUAL | STRICT_NOT_EQUAL | NOT_EQUAL | EQUAL )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	set253 = (CommonToken)input.LT(1);
            	if ( (input.LA(1) >= STRICT_EQUAL && input.LA(1) <= EQUAL) ) 
            	{
            	    input.Consume();
            	    if ( backtracking==0 ) adaptor.AddChild(root_0, adaptor.Create(set253));
            	    errorRecovery = false;failed = false;
            	}
            	else 
            	{
            	    if ( backtracking > 0 ) {failed = true; return retval;}
            	    MismatchedSetException mse =
            	        new MismatchedSetException(null,input);
            	    RecoverFromMismatchedSet(input,mse,FOLLOW_set_in_equalityOperator0);    throw mse;
            	}

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 99, equalityOperator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end equalityOperator

    public class relationalExpression_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start relationalExpression
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1320:1: relationalExpression : shiftExpression ( ( relationalOperator )=>op= relationalOperator shiftExpression )* ;
    public relationalExpression_return relationalExpression() // throws RecognitionException [1]
    {   
        relationalExpression_return retval = new relationalExpression_return();
        retval.start = input.LT(1);
        int relationalExpression_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        relationalOperator_return op = null;

        shiftExpression_return shiftExpression254 = null;

        shiftExpression_return shiftExpression255 = null;
        
        
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 100) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1321:4: ( shiftExpression ( ( relationalOperator )=>op= relationalOperator shiftExpression )* )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1321:4: shiftExpression ( ( relationalOperator )=>op= relationalOperator shiftExpression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	PushFollow(FOLLOW_shiftExpression_in_relationalExpression4581);
            	shiftExpression254 = shiftExpression();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, shiftExpression254.Tree);
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1322:3: ( ( relationalOperator )=>op= relationalOperator shiftExpression )*
            	do 
            	{
            	    int alt72 = 2;
            	    int LA72_0 = input.LA(1);
            	    
            	    if ( (LA72_0 == IS) )
            	    {
            	        switch ( input.LA(2) ) 
            	        {
            	        case LBRACK:
            	        	{
            	            int LA72_78 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LPAREN:
            	        	{
            	            int LA72_79 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case INC:
            	        	{
            	            int LA72_80 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case DEC:
            	        	{
            	            int LA72_81 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case MINUS:
            	        	{
            	            int LA72_83 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case IS:
            	        	{
            	            int LA72_90 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case AS:
            	        	{
            	            int LA72_91 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LCURLY:
            	        	{
            	            int LA72_107 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case PLUS:
            	        	{
            	            int LA72_109 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case DELETE:
            	        	{
            	            int LA72_110 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case VOID:
            	        	{
            	            int LA72_111 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case TYPEOF:
            	        	{
            	            int LA72_112 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LNOT:
            	        	{
            	            int LA72_113 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case BNOT:
            	        	{
            	            int LA72_114 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case UNDEFINED:
            	        	{
            	            int LA72_115 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case HEX_LITERAL:
            	        case DECIMAL_LITERAL:
            	        case OCTAL_LITERAL:
            	        case FLOAT_LITERAL:
            	        	{
            	            int LA72_116 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case STRING_LITERAL:
            	        	{
            	            int LA72_117 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case TRUE:
            	        	{
            	            int LA72_118 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case FALSE:
            	        	{
            	            int LA72_119 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case NULL:
            	        	{
            	            int LA72_120 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case FUNCTION:
            	        	{
            	            int LA72_121 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case NEW:
            	        	{
            	            int LA72_122 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case IDENT:
            	        	{
            	            int LA72_123 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case USE:
            	        	{
            	            int LA72_124 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case XML:
            	        	{
            	            int LA72_125 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case DYNAMIC:
            	        	{
            	            int LA72_126 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case GET:
            	        	{
            	            int LA72_127 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case SET:
            	        	{
            	            int LA72_128 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        
            	        }
            	    
            	    }
            	    else if ( (LA72_0 == AS) )
            	    {
            	        switch ( input.LA(2) ) 
            	        {
            	        case LBRACK:
            	        	{
            	            int LA72_143 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LPAREN:
            	        	{
            	            int LA72_144 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case INC:
            	        	{
            	            int LA72_145 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case DEC:
            	        	{
            	            int LA72_146 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case MINUS:
            	        	{
            	            int LA72_148 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case IS:
            	        	{
            	            int LA72_155 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case AS:
            	        	{
            	            int LA72_156 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LCURLY:
            	        	{
            	            int LA72_169 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case PLUS:
            	        	{
            	            int LA72_171 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case DELETE:
            	        	{
            	            int LA72_172 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case VOID:
            	        	{
            	            int LA72_173 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case TYPEOF:
            	        	{
            	            int LA72_174 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LNOT:
            	        	{
            	            int LA72_175 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case BNOT:
            	        	{
            	            int LA72_176 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case UNDEFINED:
            	        	{
            	            int LA72_177 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case HEX_LITERAL:
            	        case DECIMAL_LITERAL:
            	        case OCTAL_LITERAL:
            	        case FLOAT_LITERAL:
            	        	{
            	            int LA72_178 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case STRING_LITERAL:
            	        	{
            	            int LA72_179 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case TRUE:
            	        	{
            	            int LA72_180 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case FALSE:
            	        	{
            	            int LA72_181 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case NULL:
            	        	{
            	            int LA72_182 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case FUNCTION:
            	        	{
            	            int LA72_183 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case NEW:
            	        	{
            	            int LA72_184 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case IDENT:
            	        	{
            	            int LA72_185 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case USE:
            	        	{
            	            int LA72_186 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case XML:
            	        	{
            	            int LA72_187 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case DYNAMIC:
            	        	{
            	            int LA72_188 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case GET:
            	        	{
            	            int LA72_189 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case SET:
            	        	{
            	            int LA72_190 = input.LA(3);
            	            
            	            if ( (synpred126()) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        
            	        }
            	    
            	    }
            	    else if ( (LA72_0 == IN) )
            	    {
            	        switch ( input.LA(2) ) 
            	        {
            	        case INC:
            	        	{
            	            int LA72_207 = input.LA(3);
            	            
            	            if ( ((synpred126() && ((InOperator_scope)InOperator_stack.Peek()).allowed)) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case DEC:
            	        	{
            	            int LA72_208 = input.LA(3);
            	            
            	            if ( ((synpred126() && ((InOperator_scope)InOperator_stack.Peek()).allowed)) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case MINUS:
            	        	{
            	            int LA72_209 = input.LA(3);
            	            
            	            if ( ((synpred126() && ((InOperator_scope)InOperator_stack.Peek()).allowed)) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case PLUS:
            	        	{
            	            int LA72_210 = input.LA(3);
            	            
            	            if ( ((synpred126() && ((InOperator_scope)InOperator_stack.Peek()).allowed)) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case DELETE:
            	        	{
            	            int LA72_211 = input.LA(3);
            	            
            	            if ( ((synpred126() && ((InOperator_scope)InOperator_stack.Peek()).allowed)) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case VOID:
            	        	{
            	            int LA72_212 = input.LA(3);
            	            
            	            if ( ((synpred126() && ((InOperator_scope)InOperator_stack.Peek()).allowed)) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case TYPEOF:
            	        	{
            	            int LA72_213 = input.LA(3);
            	            
            	            if ( ((synpred126() && ((InOperator_scope)InOperator_stack.Peek()).allowed)) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LNOT:
            	        	{
            	            int LA72_214 = input.LA(3);
            	            
            	            if ( ((synpred126() && ((InOperator_scope)InOperator_stack.Peek()).allowed)) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case BNOT:
            	        	{
            	            int LA72_215 = input.LA(3);
            	            
            	            if ( ((synpred126() && ((InOperator_scope)InOperator_stack.Peek()).allowed)) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case UNDEFINED:
            	        	{
            	            int LA72_216 = input.LA(3);
            	            
            	            if ( ((synpred126() && ((InOperator_scope)InOperator_stack.Peek()).allowed)) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case HEX_LITERAL:
            	        case DECIMAL_LITERAL:
            	        case OCTAL_LITERAL:
            	        case FLOAT_LITERAL:
            	        	{
            	            int LA72_217 = input.LA(3);
            	            
            	            if ( ((synpred126() && ((InOperator_scope)InOperator_stack.Peek()).allowed)) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case STRING_LITERAL:
            	        	{
            	            int LA72_218 = input.LA(3);
            	            
            	            if ( ((synpred126() && ((InOperator_scope)InOperator_stack.Peek()).allowed)) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case TRUE:
            	        	{
            	            int LA72_219 = input.LA(3);
            	            
            	            if ( ((synpred126() && ((InOperator_scope)InOperator_stack.Peek()).allowed)) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case FALSE:
            	        	{
            	            int LA72_220 = input.LA(3);
            	            
            	            if ( ((synpred126() && ((InOperator_scope)InOperator_stack.Peek()).allowed)) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case NULL:
            	        	{
            	            int LA72_221 = input.LA(3);
            	            
            	            if ( ((synpred126() && ((InOperator_scope)InOperator_stack.Peek()).allowed)) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LBRACK:
            	        	{
            	            int LA72_222 = input.LA(3);
            	            
            	            if ( ((synpred126() && ((InOperator_scope)InOperator_stack.Peek()).allowed)) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LCURLY:
            	        	{
            	            int LA72_223 = input.LA(3);
            	            
            	            if ( ((synpred126() && ((InOperator_scope)InOperator_stack.Peek()).allowed)) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case FUNCTION:
            	        	{
            	            int LA72_224 = input.LA(3);
            	            
            	            if ( ((synpred126() && ((InOperator_scope)InOperator_stack.Peek()).allowed)) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case NEW:
            	        	{
            	            int LA72_225 = input.LA(3);
            	            
            	            if ( ((synpred126() && ((InOperator_scope)InOperator_stack.Peek()).allowed)) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LPAREN:
            	        	{
            	            int LA72_226 = input.LA(3);
            	            
            	            if ( ((synpred126() && ((InOperator_scope)InOperator_stack.Peek()).allowed)) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case IDENT:
            	        	{
            	            int LA72_227 = input.LA(3);
            	            
            	            if ( ((synpred126() && ((InOperator_scope)InOperator_stack.Peek()).allowed)) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case USE:
            	        	{
            	            int LA72_228 = input.LA(3);
            	            
            	            if ( ((synpred126() && ((InOperator_scope)InOperator_stack.Peek()).allowed)) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case XML:
            	        	{
            	            int LA72_229 = input.LA(3);
            	            
            	            if ( ((synpred126() && ((InOperator_scope)InOperator_stack.Peek()).allowed)) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case DYNAMIC:
            	        	{
            	            int LA72_230 = input.LA(3);
            	            
            	            if ( ((synpred126() && ((InOperator_scope)InOperator_stack.Peek()).allowed)) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case IS:
            	        	{
            	            int LA72_231 = input.LA(3);
            	            
            	            if ( ((synpred126() && ((InOperator_scope)InOperator_stack.Peek()).allowed)) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case AS:
            	        	{
            	            int LA72_232 = input.LA(3);
            	            
            	            if ( ((synpred126() && ((InOperator_scope)InOperator_stack.Peek()).allowed)) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case GET:
            	        	{
            	            int LA72_233 = input.LA(3);
            	            
            	            if ( ((synpred126() && ((InOperator_scope)InOperator_stack.Peek()).allowed)) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case SET:
            	        	{
            	            int LA72_234 = input.LA(3);
            	            
            	            if ( ((synpred126() && ((InOperator_scope)InOperator_stack.Peek()).allowed)) )
            	            {
            	                alt72 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        
            	        }
            	    
            	    }
            	    else if ( (LA72_0 == LT) && (synpred126()) )
            	    {
            	        alt72 = 1;
            	    }
            	    else if ( (LA72_0 == GT) && (synpred126()) )
            	    {
            	        alt72 = 1;
            	    }
            	    else if ( (LA72_0 == LE) && (synpred126()) )
            	    {
            	        alt72 = 1;
            	    }
            	    else if ( (LA72_0 == GE) && (synpred126()) )
            	    {
            	        alt72 = 1;
            	    }
            	    else if ( (LA72_0 == INSTANCEOF) && (synpred126()) )
            	    {
            	        alt72 = 1;
            	    }
            	    
            	
            	    switch (alt72) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1323:4: ( relationalOperator )=>op= relationalOperator shiftExpression
            			    {
            			    	PushFollow(FOLLOW_relationalOperator_in_relationalExpression4597);
            			    	op = relationalOperator();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) root_0 = (CommonTree)adaptor.BecomeRoot(op.Tree, root_0);
            			    	if ( backtracking == 0 ) 
            			    	{
            			    	   
            			    	  																buffer.Append(" ");
            			    	  																buffer.Append(((CommonTree)op.Tree).Text ); 
            			    	  																buffer.Append(" "); 
            			    	  															
            			    	}
            			    	PushFollow(FOLLOW_shiftExpression_in_relationalExpression4605);
            			    	shiftExpression255 = shiftExpression();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) adaptor.AddChild(root_0, shiftExpression255.Tree);
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop72;
            	    }
            	} while (true);
            	
            	loop72:
            		;	// Stops C# compiler whinging that label 'loop72' has no statements

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 100, relationalExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end relationalExpression

    public class relationalOperator_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start relationalOperator
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1332:1: relationalOperator : ({...}? IN | LT | GT | LE | GE | IS | AS | INSTANCEOF );
    public relationalOperator_return relationalOperator() // throws RecognitionException [1]
    {   
        relationalOperator_return retval = new relationalOperator_return();
        retval.start = input.LT(1);
        int relationalOperator_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken IN256 = null;
        CommonToken LT257 = null;
        CommonToken GT258 = null;
        CommonToken LE259 = null;
        CommonToken GE260 = null;
        CommonToken IS261 = null;
        CommonToken AS262 = null;
        CommonToken INSTANCEOF263 = null;
        
        CommonTree IN256_tree=null;
        CommonTree LT257_tree=null;
        CommonTree GT258_tree=null;
        CommonTree LE259_tree=null;
        CommonTree GE260_tree=null;
        CommonTree IS261_tree=null;
        CommonTree AS262_tree=null;
        CommonTree INSTANCEOF263_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 101) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1333:4: ({...}? IN | LT | GT | LE | GE | IS | AS | INSTANCEOF )
            int alt73 = 8;
            switch ( input.LA(1) ) 
            {
            case IN:
            	{
                alt73 = 1;
                }
                break;
            case LT:
            	{
                alt73 = 2;
                }
                break;
            case GT:
            	{
                alt73 = 3;
                }
                break;
            case LE:
            	{
                alt73 = 4;
                }
                break;
            case GE:
            	{
                alt73 = 5;
                }
                break;
            case IS:
            	{
                alt73 = 6;
                }
                break;
            case AS:
            	{
                alt73 = 7;
                }
                break;
            case INSTANCEOF:
            	{
                alt73 = 8;
                }
                break;
            	default:
            	    if ( backtracking > 0 ) {failed = true; return retval;}
            	    NoViableAltException nvae_d73s0 =
            	        new NoViableAltException("1332:1: relationalOperator : ({...}? IN | LT | GT | LE | GE | IS | AS | INSTANCEOF );", 73, 0, input);
            
            	    throw nvae_d73s0;
            }
            
            switch (alt73) 
            {
                case 1 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1333:4: {...}? IN
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	if ( !(((InOperator_scope)InOperator_stack.Peek()).allowed) ) 
                    	{
                    	    if ( backtracking > 0 ) {failed = true; return retval;}
                    	    throw new FailedPredicateException(input, "relationalOperator", "$InOperator::allowed");
                    	}
                    	IN256 = (CommonToken)input.LT(1);
                    	Match(input,IN,FOLLOW_IN_in_relationalOperator4623); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	IN256_tree = (CommonTree)adaptor.Create(IN256);
                    	adaptor.AddChild(root_0, IN256_tree);
                    	}
                    
                    }
                    break;
                case 2 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1334:4: LT
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	LT257 = (CommonToken)input.LT(1);
                    	Match(input,LT,FOLLOW_LT_in_relationalOperator4628); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	LT257_tree = (CommonTree)adaptor.Create(LT257);
                    	adaptor.AddChild(root_0, LT257_tree);
                    	}
                    
                    }
                    break;
                case 3 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1334:9: GT
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	GT258 = (CommonToken)input.LT(1);
                    	Match(input,GT,FOLLOW_GT_in_relationalOperator4632); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	GT258_tree = (CommonTree)adaptor.Create(GT258);
                    	adaptor.AddChild(root_0, GT258_tree);
                    	}
                    
                    }
                    break;
                case 4 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1334:14: LE
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	LE259 = (CommonToken)input.LT(1);
                    	Match(input,LE,FOLLOW_LE_in_relationalOperator4636); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	LE259_tree = (CommonTree)adaptor.Create(LE259);
                    	adaptor.AddChild(root_0, LE259_tree);
                    	}
                    
                    }
                    break;
                case 5 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1334:19: GE
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	GE260 = (CommonToken)input.LT(1);
                    	Match(input,GE,FOLLOW_GE_in_relationalOperator4640); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	GE260_tree = (CommonTree)adaptor.Create(GE260);
                    	adaptor.AddChild(root_0, GE260_tree);
                    	}
                    
                    }
                    break;
                case 6 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1334:24: IS
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	IS261 = (CommonToken)input.LT(1);
                    	Match(input,IS,FOLLOW_IS_in_relationalOperator4644); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	IS261_tree = (CommonTree)adaptor.Create(IS261);
                    	adaptor.AddChild(root_0, IS261_tree);
                    	}
                    
                    }
                    break;
                case 7 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1334:29: AS
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	AS262 = (CommonToken)input.LT(1);
                    	Match(input,AS,FOLLOW_AS_in_relationalOperator4648); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	AS262_tree = (CommonTree)adaptor.Create(AS262);
                    	adaptor.AddChild(root_0, AS262_tree);
                    	}
                    
                    }
                    break;
                case 8 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1334:34: INSTANCEOF
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	INSTANCEOF263 = (CommonToken)input.LT(1);
                    	Match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_relationalOperator4652); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	INSTANCEOF263_tree = (CommonTree)adaptor.Create(INSTANCEOF263);
                    	adaptor.AddChild(root_0, INSTANCEOF263_tree);
                    	}
                    
                    }
                    break;
            
            }
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 101, relationalOperator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end relationalOperator

    public class shiftExpression_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start shiftExpression
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1338:1: shiftExpression : additiveExpression (op= shiftOperator additiveExpression )* ;
    public shiftExpression_return shiftExpression() // throws RecognitionException [1]
    {   
        shiftExpression_return retval = new shiftExpression_return();
        retval.start = input.LT(1);
        int shiftExpression_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        shiftOperator_return op = null;

        additiveExpression_return additiveExpression264 = null;

        additiveExpression_return additiveExpression265 = null;
        
        
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 102) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1339:4: ( additiveExpression (op= shiftOperator additiveExpression )* )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1339:4: additiveExpression (op= shiftOperator additiveExpression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	PushFollow(FOLLOW_additiveExpression_in_shiftExpression4664);
            	additiveExpression264 = additiveExpression();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, additiveExpression264.Tree);
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1340:3: (op= shiftOperator additiveExpression )*
            	do 
            	{
            	    int alt74 = 2;
            	    int LA74_0 = input.LA(1);
            	    
            	    if ( ((LA74_0 >= SL && LA74_0 <= BSR)) )
            	    {
            	        alt74 = 1;
            	    }
            	    
            	
            	    switch (alt74) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1341:4: op= shiftOperator additiveExpression
            			    {
            			    	PushFollow(FOLLOW_shiftOperator_in_shiftExpression4675);
            			    	op = shiftOperator();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) root_0 = (CommonTree)adaptor.BecomeRoot(op.Tree, root_0);
            			    	if ( backtracking == 0 ) 
            			    	{
            			    	   
            			    	  											if(options.SpaceBetweenOperators) buffer.Append(" ");
            			    	  											buffer.Append(((CommonTree)op.Tree).Text ); 
            			    	  											if(options.SpaceBetweenOperators) buffer.Append(" "); 
            			    	  										
            			    	}
            			    	PushFollow(FOLLOW_additiveExpression_in_shiftExpression4685);
            			    	additiveExpression265 = additiveExpression();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) adaptor.AddChild(root_0, additiveExpression265.Tree);
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop74;
            	    }
            	} while (true);
            	
            	loop74:
            		;	// Stops C# compiler whinging that label 'loop74' has no statements

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 102, shiftExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end shiftExpression

    public class shiftOperator_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start shiftOperator
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1350:1: shiftOperator : ( SL | SR | BSR );
    public shiftOperator_return shiftOperator() // throws RecognitionException [1]
    {   
        shiftOperator_return retval = new shiftOperator_return();
        retval.start = input.LT(1);
        int shiftOperator_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken set266 = null;
        
        CommonTree set266_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 103) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1351:4: ( SL | SR | BSR )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	set266 = (CommonToken)input.LT(1);
            	if ( (input.LA(1) >= SL && input.LA(1) <= BSR) ) 
            	{
            	    input.Consume();
            	    if ( backtracking==0 ) adaptor.AddChild(root_0, adaptor.Create(set266));
            	    errorRecovery = false;failed = false;
            	}
            	else 
            	{
            	    if ( backtracking > 0 ) {failed = true; return retval;}
            	    MismatchedSetException mse =
            	        new MismatchedSetException(null,input);
            	    RecoverFromMismatchedSet(input,mse,FOLLOW_set_in_shiftOperator0);    throw mse;
            	}

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 103, shiftOperator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end shiftOperator

    public class additiveExpression_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start additiveExpression
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1355:1: additiveExpression : multiplicativeExpression (op= additiveOperator multiplicativeExpression )* ;
    public additiveExpression_return additiveExpression() // throws RecognitionException [1]
    {   
        additiveExpression_return retval = new additiveExpression_return();
        retval.start = input.LT(1);
        int additiveExpression_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        additiveOperator_return op = null;

        multiplicativeExpression_return multiplicativeExpression267 = null;

        multiplicativeExpression_return multiplicativeExpression268 = null;
        
        
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 104) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1356:4: ( multiplicativeExpression (op= additiveOperator multiplicativeExpression )* )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1356:4: multiplicativeExpression (op= additiveOperator multiplicativeExpression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	PushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression4721);
            	multiplicativeExpression267 = multiplicativeExpression();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, multiplicativeExpression267.Tree);
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1357:3: (op= additiveOperator multiplicativeExpression )*
            	do 
            	{
            	    int alt75 = 2;
            	    int LA75_0 = input.LA(1);
            	    
            	    if ( (LA75_0 == MINUS) )
            	    {
            	        switch ( input.LA(2) ) 
            	        {
            	        case INC:
            	        	{
            	            int LA75_78 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case DEC:
            	        	{
            	            int LA75_79 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case MINUS:
            	        	{
            	            int LA75_80 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case PLUS:
            	        	{
            	            int LA75_81 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case DELETE:
            	        	{
            	            int LA75_82 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case VOID:
            	        	{
            	            int LA75_83 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case TYPEOF:
            	        	{
            	            int LA75_84 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LNOT:
            	        	{
            	            int LA75_85 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case BNOT:
            	        	{
            	            int LA75_86 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case UNDEFINED:
            	        	{
            	            int LA75_87 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case HEX_LITERAL:
            	        case DECIMAL_LITERAL:
            	        case OCTAL_LITERAL:
            	        case FLOAT_LITERAL:
            	        	{
            	            int LA75_88 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case STRING_LITERAL:
            	        	{
            	            int LA75_89 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case TRUE:
            	        	{
            	            int LA75_90 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case FALSE:
            	        	{
            	            int LA75_91 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case NULL:
            	        	{
            	            int LA75_92 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LBRACK:
            	        	{
            	            int LA75_93 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LCURLY:
            	        	{
            	            int LA75_94 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case FUNCTION:
            	        	{
            	            int LA75_95 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case NEW:
            	        	{
            	            int LA75_96 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LPAREN:
            	        	{
            	            int LA75_97 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case IDENT:
            	        	{
            	            int LA75_98 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case USE:
            	        	{
            	            int LA75_99 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case XML:
            	        	{
            	            int LA75_100 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case DYNAMIC:
            	        	{
            	            int LA75_101 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case IS:
            	        	{
            	            int LA75_102 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case AS:
            	        	{
            	            int LA75_103 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case GET:
            	        	{
            	            int LA75_104 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case SET:
            	        	{
            	            int LA75_105 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        
            	        }
            	    
            	    }
            	    else if ( (LA75_0 == PLUS) )
            	    {
            	        switch ( input.LA(2) ) 
            	        {
            	        case INC:
            	        	{
            	            int LA75_106 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case DEC:
            	        	{
            	            int LA75_107 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case MINUS:
            	        	{
            	            int LA75_108 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case PLUS:
            	        	{
            	            int LA75_109 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case DELETE:
            	        	{
            	            int LA75_110 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case VOID:
            	        	{
            	            int LA75_111 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case TYPEOF:
            	        	{
            	            int LA75_112 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LNOT:
            	        	{
            	            int LA75_113 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case BNOT:
            	        	{
            	            int LA75_114 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case UNDEFINED:
            	        	{
            	            int LA75_115 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case HEX_LITERAL:
            	        case DECIMAL_LITERAL:
            	        case OCTAL_LITERAL:
            	        case FLOAT_LITERAL:
            	        	{
            	            int LA75_116 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case STRING_LITERAL:
            	        	{
            	            int LA75_117 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case TRUE:
            	        	{
            	            int LA75_118 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case FALSE:
            	        	{
            	            int LA75_119 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case NULL:
            	        	{
            	            int LA75_120 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LBRACK:
            	        	{
            	            int LA75_121 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LCURLY:
            	        	{
            	            int LA75_122 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case FUNCTION:
            	        	{
            	            int LA75_123 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case NEW:
            	        	{
            	            int LA75_124 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LPAREN:
            	        	{
            	            int LA75_125 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case IDENT:
            	        	{
            	            int LA75_126 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case USE:
            	        	{
            	            int LA75_127 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case XML:
            	        	{
            	            int LA75_128 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case DYNAMIC:
            	        	{
            	            int LA75_129 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case IS:
            	        	{
            	            int LA75_130 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case AS:
            	        	{
            	            int LA75_131 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case GET:
            	        	{
            	            int LA75_132 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case SET:
            	        	{
            	            int LA75_133 = input.LA(3);
            	            
            	            if ( (synpred137()) )
            	            {
            	                alt75 = 1;
            	            }
            	            
            	        
            	            }
            	            break;
            	        
            	        }
            	    
            	    }
            	    
            	
            	    switch (alt75) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1358:4: op= additiveOperator multiplicativeExpression
            			    {
            			    	PushFollow(FOLLOW_additiveOperator_in_additiveExpression4732);
            			    	op = additiveOperator();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) root_0 = (CommonTree)adaptor.BecomeRoot(op.Tree, root_0);
            			    	if ( backtracking == 0 ) 
            			    	{
            			    	   
            			    	  											if(options.SpaceBetweenOperators) buffer.Append(" ");
            			    	  											buffer.Append(((CommonTree)op.Tree).Text ); 
            			    	  											if(options.SpaceBetweenOperators) buffer.Append(" "); 
            			    	  										
            			    	}
            			    	PushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression4742);
            			    	multiplicativeExpression268 = multiplicativeExpression();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) adaptor.AddChild(root_0, multiplicativeExpression268.Tree);
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop75;
            	    }
            	} while (true);
            	
            	loop75:
            		;	// Stops C# compiler whinging that label 'loop75' has no statements

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 104, additiveExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end additiveExpression

    public class additiveOperator_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start additiveOperator
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1367:1: additiveOperator : ( PLUS | MINUS );
    public additiveOperator_return additiveOperator() // throws RecognitionException [1]
    {   
        additiveOperator_return retval = new additiveOperator_return();
        retval.start = input.LT(1);
        int additiveOperator_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken set269 = null;
        
        CommonTree set269_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 105) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1368:4: ( PLUS | MINUS )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	set269 = (CommonToken)input.LT(1);
            	if ( (input.LA(1) >= PLUS && input.LA(1) <= MINUS) ) 
            	{
            	    input.Consume();
            	    if ( backtracking==0 ) adaptor.AddChild(root_0, adaptor.Create(set269));
            	    errorRecovery = false;failed = false;
            	}
            	else 
            	{
            	    if ( backtracking > 0 ) {failed = true; return retval;}
            	    MismatchedSetException mse =
            	        new MismatchedSetException(null,input);
            	    RecoverFromMismatchedSet(input,mse,FOLLOW_set_in_additiveOperator0);    throw mse;
            	}

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 105, additiveOperator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end additiveOperator

    public class multiplicativeExpression_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start multiplicativeExpression
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1372:1: multiplicativeExpression : unaryExpression (op= multiplicativeOperator unaryExpression )* ;
    public multiplicativeExpression_return multiplicativeExpression() // throws RecognitionException [1]
    {   
        multiplicativeExpression_return retval = new multiplicativeExpression_return();
        retval.start = input.LT(1);
        int multiplicativeExpression_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        multiplicativeOperator_return op = null;

        unaryExpression_return unaryExpression270 = null;

        unaryExpression_return unaryExpression271 = null;
        
        
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 106) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1373:4: ( unaryExpression (op= multiplicativeOperator unaryExpression )* )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1373:4: unaryExpression (op= multiplicativeOperator unaryExpression )*
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	PushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression4774);
            	unaryExpression270 = unaryExpression();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, unaryExpression270.Tree);
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1374:3: (op= multiplicativeOperator unaryExpression )*
            	do 
            	{
            	    int alt76 = 2;
            	    int LA76_0 = input.LA(1);
            	    
            	    if ( (LA76_0 == STAR || (LA76_0 >= DIV && LA76_0 <= MOD)) )
            	    {
            	        alt76 = 1;
            	    }
            	    
            	
            	    switch (alt76) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1375:4: op= multiplicativeOperator unaryExpression
            			    {
            			    	PushFollow(FOLLOW_multiplicativeOperator_in_multiplicativeExpression4786);
            			    	op = multiplicativeOperator();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) root_0 = (CommonTree)adaptor.BecomeRoot(op.Tree, root_0);
            			    	if ( backtracking == 0 ) 
            			    	{
            			    	   
            			    	  											if(options.SpaceBetweenOperators) buffer.Append(" ");
            			    	  											buffer.Append(((CommonTree)op.Tree).Text ); 
            			    	  											if(options.SpaceBetweenOperators) buffer.Append(" "); 
            			    	  										
            			    	}
            			    	PushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression4794);
            			    	unaryExpression271 = unaryExpression();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) adaptor.AddChild(root_0, unaryExpression271.Tree);
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop76;
            	    }
            	} while (true);
            	
            	loop76:
            		;	// Stops C# compiler whinging that label 'loop76' has no statements

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 106, multiplicativeExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end multiplicativeExpression

    public class multiplicativeOperator_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start multiplicativeOperator
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1384:1: multiplicativeOperator : ( STAR | DIV | MOD );
    public multiplicativeOperator_return multiplicativeOperator() // throws RecognitionException [1]
    {   
        multiplicativeOperator_return retval = new multiplicativeOperator_return();
        retval.start = input.LT(1);
        int multiplicativeOperator_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken set272 = null;
        
        CommonTree set272_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 107) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1385:4: ( STAR | DIV | MOD )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	set272 = (CommonToken)input.LT(1);
            	if ( input.LA(1) == STAR || (input.LA(1) >= DIV && input.LA(1) <= MOD) ) 
            	{
            	    input.Consume();
            	    if ( backtracking==0 ) adaptor.AddChild(root_0, adaptor.Create(set272));
            	    errorRecovery = false;failed = false;
            	}
            	else 
            	{
            	    if ( backtracking > 0 ) {failed = true; return retval;}
            	    MismatchedSetException mse =
            	        new MismatchedSetException(null,input);
            	    RecoverFromMismatchedSet(input,mse,FOLLOW_set_in_multiplicativeOperator0);    throw mse;
            	}

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 107, multiplicativeOperator_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end multiplicativeOperator

    public class unaryExpression_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start unaryExpression
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1389:1: unaryExpression : (iin= INC unaryExpression -> ^( PRE_INC[$iin] unaryExpression ) | dde= DEC unaryExpression -> ^( PRE_DEC[$dde] unaryExpression ) | tmin= MINUS unaryExpression -> ^( UNARY_MINUS unaryExpression ) | tplus= PLUS unaryExpression -> ^( UNARY_PLUS unaryExpression ) | unaryExpressionNotPlusMinus );
    public unaryExpression_return unaryExpression() // throws RecognitionException [1]
    {   
        unaryExpression_return retval = new unaryExpression_return();
        retval.start = input.LT(1);
        int unaryExpression_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken iin = null;
        CommonToken dde = null;
        CommonToken tmin = null;
        CommonToken tplus = null;
        unaryExpression_return unaryExpression273 = null;

        unaryExpression_return unaryExpression274 = null;

        unaryExpression_return unaryExpression275 = null;

        unaryExpression_return unaryExpression276 = null;

        unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus277 = null;
        
        
        CommonTree iin_tree=null;
        CommonTree dde_tree=null;
        CommonTree tmin_tree=null;
        CommonTree tplus_tree=null;
        RewriteRuleTokenStream stream_PLUS = new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_INC = new RewriteRuleTokenStream(adaptor,"token INC");
        RewriteRuleTokenStream stream_MINUS = new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_DEC = new RewriteRuleTokenStream(adaptor,"token DEC");
        RewriteRuleSubtreeStream stream_unaryExpression = new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 108) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1390:4: (iin= INC unaryExpression -> ^( PRE_INC[$iin] unaryExpression ) | dde= DEC unaryExpression -> ^( PRE_DEC[$dde] unaryExpression ) | tmin= MINUS unaryExpression -> ^( UNARY_MINUS unaryExpression ) | tplus= PLUS unaryExpression -> ^( UNARY_PLUS unaryExpression ) | unaryExpressionNotPlusMinus )
            int alt77 = 5;
            switch ( input.LA(1) ) 
            {
            case INC:
            	{
                alt77 = 1;
                }
                break;
            case DEC:
            	{
                alt77 = 2;
                }
                break;
            case MINUS:
            	{
                alt77 = 3;
                }
                break;
            case PLUS:
            	{
                alt77 = 4;
                }
                break;
            case LCURLY:
            case STRING_LITERAL:
            case FUNCTION:
            case GET:
            case SET:
            case LPAREN:
            case VOID:
            case IDENT:
            case LBRACK:
            case DYNAMIC:
            case IS:
            case AS:
            case DELETE:
            case TYPEOF:
            case LNOT:
            case BNOT:
            case UNDEFINED:
            case TRUE:
            case FALSE:
            case NULL:
            case HEX_LITERAL:
            case DECIMAL_LITERAL:
            case OCTAL_LITERAL:
            case FLOAT_LITERAL:
            case NEW:
            case USE:
            case XML:
            	{
                alt77 = 5;
                }
                break;
            	default:
            	    if ( backtracking > 0 ) {failed = true; return retval;}
            	    NoViableAltException nvae_d77s0 =
            	        new NoViableAltException("1389:1: unaryExpression : (iin= INC unaryExpression -> ^( PRE_INC[$iin] unaryExpression ) | dde= DEC unaryExpression -> ^( PRE_DEC[$dde] unaryExpression ) | tmin= MINUS unaryExpression -> ^( UNARY_MINUS unaryExpression ) | tplus= PLUS unaryExpression -> ^( UNARY_PLUS unaryExpression ) | unaryExpressionNotPlusMinus );", 77, 0, input);
            
            	    throw nvae_d77s0;
            }
            
            switch (alt77) 
            {
                case 1 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1390:4: iin= INC unaryExpression
                    {
                    	iin = (CommonToken)input.LT(1);
                    	Match(input,INC,FOLLOW_INC_in_unaryExpression4832); if (failed) return retval;
                    	if ( backtracking==0 ) stream_INC.Add(iin);

                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(iin.Text); 
                    	}
                    	PushFollow(FOLLOW_unaryExpression_in_unaryExpression4837);
                    	unaryExpression273 = unaryExpression();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) stream_unaryExpression.Add(unaryExpression273.Tree);
                    	
                    	// AST REWRITE
                    	// elements:          unaryExpression
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( backtracking==0 ) {
                    	retval.tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
                    	
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 1390:59: -> ^( PRE_INC[$iin] unaryExpression )
                    	{
                    	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1390:62: ^( PRE_INC[$iin] unaryExpression )
                    	    {
                    	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                    	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(PRE_INC, iin), root_1);
                    	    
                    	    adaptor.AddChild(root_1, stream_unaryExpression.Next());
                    	    
                    	    adaptor.AddChild(root_0, root_1);
                    	    }
                    	
                    	}
                    	
                    	}
                    
                    }
                    break;
                case 2 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1391:4: dde= DEC unaryExpression
                    {
                    	dde = (CommonToken)input.LT(1);
                    	Match(input,DEC,FOLLOW_DEC_in_unaryExpression4854); if (failed) return retval;
                    	if ( backtracking==0 ) stream_DEC.Add(dde);

                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(dde.Text); 
                    	}
                    	PushFollow(FOLLOW_unaryExpression_in_unaryExpression4859);
                    	unaryExpression274 = unaryExpression();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) stream_unaryExpression.Add(unaryExpression274.Tree);
                    	
                    	// AST REWRITE
                    	// elements:          unaryExpression
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( backtracking==0 ) {
                    	retval.tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
                    	
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 1391:59: -> ^( PRE_DEC[$dde] unaryExpression )
                    	{
                    	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1391:62: ^( PRE_DEC[$dde] unaryExpression )
                    	    {
                    	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                    	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(PRE_DEC, dde), root_1);
                    	    
                    	    adaptor.AddChild(root_1, stream_unaryExpression.Next());
                    	    
                    	    adaptor.AddChild(root_0, root_1);
                    	    }
                    	
                    	}
                    	
                    	}
                    
                    }
                    break;
                case 3 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1392:4: tmin= MINUS unaryExpression
                    {
                    	tmin = (CommonToken)input.LT(1);
                    	Match(input,MINUS,FOLLOW_MINUS_in_unaryExpression4876); if (failed) return retval;
                    	if ( backtracking==0 ) stream_MINUS.Add(tmin);

                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(tmin.Text);  
                    	}
                    	PushFollow(FOLLOW_unaryExpression_in_unaryExpression4880);
                    	unaryExpression275 = unaryExpression();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) stream_unaryExpression.Add(unaryExpression275.Tree);
                    	
                    	// AST REWRITE
                    	// elements:          unaryExpression
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( backtracking==0 ) {
                    	retval.tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
                    	
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 1392:63: -> ^( UNARY_MINUS unaryExpression )
                    	{
                    	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1392:66: ^( UNARY_MINUS unaryExpression )
                    	    {
                    	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                    	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(UNARY_MINUS, "UNARY_MINUS"), root_1);
                    	    
                    	    adaptor.AddChild(root_1, stream_unaryExpression.Next());
                    	    
                    	    adaptor.AddChild(root_0, root_1);
                    	    }
                    	
                    	}
                    	
                    	}
                    
                    }
                    break;
                case 4 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1393:4: tplus= PLUS unaryExpression
                    {
                    	tplus = (CommonToken)input.LT(1);
                    	Match(input,PLUS,FOLLOW_PLUS_in_unaryExpression4896); if (failed) return retval;
                    	if ( backtracking==0 ) stream_PLUS.Add(tplus);

                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(tplus.Text); 
                    	}
                    	PushFollow(FOLLOW_unaryExpression_in_unaryExpression4900);
                    	unaryExpression276 = unaryExpression();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) stream_unaryExpression.Add(unaryExpression276.Tree);
                    	
                    	// AST REWRITE
                    	// elements:          unaryExpression
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( backtracking==0 ) {
                    	retval.tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
                    	
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 1393:63: -> ^( UNARY_PLUS unaryExpression )
                    	{
                    	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1393:66: ^( UNARY_PLUS unaryExpression )
                    	    {
                    	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                    	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(UNARY_PLUS, "UNARY_PLUS"), root_1);
                    	    
                    	    adaptor.AddChild(root_1, stream_unaryExpression.Next());
                    	    
                    	    adaptor.AddChild(root_0, root_1);
                    	    }
                    	
                    	}
                    	
                    	}
                    
                    }
                    break;
                case 5 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1394:4: unaryExpressionNotPlusMinus
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression4914);
                    	unaryExpressionNotPlusMinus277 = unaryExpressionNotPlusMinus();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, unaryExpressionNotPlusMinus277.Tree);
                    
                    }
                    break;
            
            }
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 108, unaryExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end unaryExpression

    public class unaryExpressionNotPlusMinus_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start unaryExpressionNotPlusMinus
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1397:1: unaryExpressionNotPlusMinus : (tk1= DELETE postfixExpression -> ^( DELETE postfixExpression ) | tk2= VOID unaryExpression -> ^( VOID unaryExpression ) | tk3= TYPEOF unaryExpression -> ^( TYPEOF unaryExpression ) | tk4= LNOT unaryExpression -> ^( LNOT unaryExpression ) | tk5= BNOT unaryExpression -> ^( BNOT unaryExpression ) | postfixExpression );
    public unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() // throws RecognitionException [1]
    {   
        unaryExpressionNotPlusMinus_return retval = new unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);
        int unaryExpressionNotPlusMinus_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken tk1 = null;
        CommonToken tk2 = null;
        CommonToken tk3 = null;
        CommonToken tk4 = null;
        CommonToken tk5 = null;
        postfixExpression_return postfixExpression278 = null;

        unaryExpression_return unaryExpression279 = null;

        unaryExpression_return unaryExpression280 = null;

        unaryExpression_return unaryExpression281 = null;

        unaryExpression_return unaryExpression282 = null;

        postfixExpression_return postfixExpression283 = null;
        
        
        CommonTree tk1_tree=null;
        CommonTree tk2_tree=null;
        CommonTree tk3_tree=null;
        CommonTree tk4_tree=null;
        CommonTree tk5_tree=null;
        RewriteRuleTokenStream stream_BNOT = new RewriteRuleTokenStream(adaptor,"token BNOT");
        RewriteRuleTokenStream stream_LNOT = new RewriteRuleTokenStream(adaptor,"token LNOT");
        RewriteRuleTokenStream stream_TYPEOF = new RewriteRuleTokenStream(adaptor,"token TYPEOF");
        RewriteRuleTokenStream stream_DELETE = new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleTokenStream stream_VOID = new RewriteRuleTokenStream(adaptor,"token VOID");
        RewriteRuleSubtreeStream stream_unaryExpression = new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_postfixExpression = new RewriteRuleSubtreeStream(adaptor,"rule postfixExpression");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 109) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1398:4: (tk1= DELETE postfixExpression -> ^( DELETE postfixExpression ) | tk2= VOID unaryExpression -> ^( VOID unaryExpression ) | tk3= TYPEOF unaryExpression -> ^( TYPEOF unaryExpression ) | tk4= LNOT unaryExpression -> ^( LNOT unaryExpression ) | tk5= BNOT unaryExpression -> ^( BNOT unaryExpression ) | postfixExpression )
            int alt78 = 6;
            switch ( input.LA(1) ) 
            {
            case DELETE:
            	{
                alt78 = 1;
                }
                break;
            case VOID:
            	{
                alt78 = 2;
                }
                break;
            case TYPEOF:
            	{
                alt78 = 3;
                }
                break;
            case LNOT:
            	{
                alt78 = 4;
                }
                break;
            case BNOT:
            	{
                alt78 = 5;
                }
                break;
            case LCURLY:
            case STRING_LITERAL:
            case FUNCTION:
            case GET:
            case SET:
            case LPAREN:
            case IDENT:
            case LBRACK:
            case DYNAMIC:
            case IS:
            case AS:
            case UNDEFINED:
            case TRUE:
            case FALSE:
            case NULL:
            case HEX_LITERAL:
            case DECIMAL_LITERAL:
            case OCTAL_LITERAL:
            case FLOAT_LITERAL:
            case NEW:
            case USE:
            case XML:
            	{
                alt78 = 6;
                }
                break;
            	default:
            	    if ( backtracking > 0 ) {failed = true; return retval;}
            	    NoViableAltException nvae_d78s0 =
            	        new NoViableAltException("1397:1: unaryExpressionNotPlusMinus : (tk1= DELETE postfixExpression -> ^( DELETE postfixExpression ) | tk2= VOID unaryExpression -> ^( VOID unaryExpression ) | tk3= TYPEOF unaryExpression -> ^( TYPEOF unaryExpression ) | tk4= LNOT unaryExpression -> ^( LNOT unaryExpression ) | tk5= BNOT unaryExpression -> ^( BNOT unaryExpression ) | postfixExpression );", 78, 0, input);
            
            	    throw nvae_d78s0;
            }
            
            switch (alt78) 
            {
                case 1 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1398:4: tk1= DELETE postfixExpression
                    {
                    	tk1 = (CommonToken)input.LT(1);
                    	Match(input,DELETE,FOLLOW_DELETE_in_unaryExpressionNotPlusMinus4927); if (failed) return retval;
                    	if ( backtracking==0 ) stream_DELETE.Add(tk1);

                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(tk1.Text + " ");  
                    	}
                    	PushFollow(FOLLOW_postfixExpression_in_unaryExpressionNotPlusMinus4932);
                    	postfixExpression278 = postfixExpression();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) stream_postfixExpression.Add(postfixExpression278.Tree);
                    	
                    	// AST REWRITE
                    	// elements:          DELETE, postfixExpression
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( backtracking==0 ) {
                    	retval.tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
                    	
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 1398:70: -> ^( DELETE postfixExpression )
                    	{
                    	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1398:73: ^( DELETE postfixExpression )
                    	    {
                    	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                    	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_DELETE.Next(), root_1);
                    	    
                    	    adaptor.AddChild(root_1, stream_postfixExpression.Next());
                    	    
                    	    adaptor.AddChild(root_0, root_1);
                    	    }
                    	
                    	}
                    	
                    	}
                    
                    }
                    break;
                case 2 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1399:4: tk2= VOID unaryExpression
                    {
                    	tk2 = (CommonToken)input.LT(1);
                    	Match(input,VOID,FOLLOW_VOID_in_unaryExpressionNotPlusMinus4947); if (failed) return retval;
                    	if ( backtracking==0 ) stream_VOID.Add(tk2);

                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(tk2.Text + " ");  
                    	}
                    	PushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus4951);
                    	unaryExpression279 = unaryExpression();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) stream_unaryExpression.Add(unaryExpression279.Tree);
                    	
                    	// AST REWRITE
                    	// elements:          VOID, unaryExpression
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( backtracking==0 ) {
                    	retval.tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
                    	
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 1399:65: -> ^( VOID unaryExpression )
                    	{
                    	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1399:68: ^( VOID unaryExpression )
                    	    {
                    	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                    	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_VOID.Next(), root_1);
                    	    
                    	    adaptor.AddChild(root_1, stream_unaryExpression.Next());
                    	    
                    	    adaptor.AddChild(root_0, root_1);
                    	    }
                    	
                    	}
                    	
                    	}
                    
                    }
                    break;
                case 3 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1400:4: tk3= TYPEOF unaryExpression
                    {
                    	tk3 = (CommonToken)input.LT(1);
                    	Match(input,TYPEOF,FOLLOW_TYPEOF_in_unaryExpressionNotPlusMinus4966); if (failed) return retval;
                    	if ( backtracking==0 ) stream_TYPEOF.Add(tk3);

                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(tk3.Text + " ");  
                    	}
                    	PushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus4970);
                    	unaryExpression280 = unaryExpression();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) stream_unaryExpression.Add(unaryExpression280.Tree);
                    	
                    	// AST REWRITE
                    	// elements:          unaryExpression, TYPEOF
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( backtracking==0 ) {
                    	retval.tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
                    	
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 1400:67: -> ^( TYPEOF unaryExpression )
                    	{
                    	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1400:70: ^( TYPEOF unaryExpression )
                    	    {
                    	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                    	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_TYPEOF.Next(), root_1);
                    	    
                    	    adaptor.AddChild(root_1, stream_unaryExpression.Next());
                    	    
                    	    adaptor.AddChild(root_0, root_1);
                    	    }
                    	
                    	}
                    	
                    	}
                    
                    }
                    break;
                case 4 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1401:4: tk4= LNOT unaryExpression
                    {
                    	tk4 = (CommonToken)input.LT(1);
                    	Match(input,LNOT,FOLLOW_LNOT_in_unaryExpressionNotPlusMinus4985); if (failed) return retval;
                    	if ( backtracking==0 ) stream_LNOT.Add(tk4);

                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(tk4.Text + " ");  
                    	}
                    	PushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus4989);
                    	unaryExpression281 = unaryExpression();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) stream_unaryExpression.Add(unaryExpression281.Tree);
                    	
                    	// AST REWRITE
                    	// elements:          unaryExpression, LNOT
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( backtracking==0 ) {
                    	retval.tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
                    	
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 1401:65: -> ^( LNOT unaryExpression )
                    	{
                    	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1401:68: ^( LNOT unaryExpression )
                    	    {
                    	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                    	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_LNOT.Next(), root_1);
                    	    
                    	    adaptor.AddChild(root_1, stream_unaryExpression.Next());
                    	    
                    	    adaptor.AddChild(root_0, root_1);
                    	    }
                    	
                    	}
                    	
                    	}
                    
                    }
                    break;
                case 5 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1402:4: tk5= BNOT unaryExpression
                    {
                    	tk5 = (CommonToken)input.LT(1);
                    	Match(input,BNOT,FOLLOW_BNOT_in_unaryExpressionNotPlusMinus5004); if (failed) return retval;
                    	if ( backtracking==0 ) stream_BNOT.Add(tk5);

                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(tk5.Text + " ");  
                    	}
                    	PushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus5008);
                    	unaryExpression282 = unaryExpression();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) stream_unaryExpression.Add(unaryExpression282.Tree);
                    	
                    	// AST REWRITE
                    	// elements:          unaryExpression, BNOT
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( backtracking==0 ) {
                    	retval.tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
                    	
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 1402:65: -> ^( BNOT unaryExpression )
                    	{
                    	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1402:68: ^( BNOT unaryExpression )
                    	    {
                    	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                    	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_BNOT.Next(), root_1);
                    	    
                    	    adaptor.AddChild(root_1, stream_unaryExpression.Next());
                    	    
                    	    adaptor.AddChild(root_0, root_1);
                    	    }
                    	
                    	}
                    	
                    	}
                    
                    }
                    break;
                case 6 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1403:4: postfixExpression
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_postfixExpression_in_unaryExpressionNotPlusMinus5021);
                    	postfixExpression283 = postfixExpression();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, postfixExpression283.Tree);
                    
                    }
                    break;
            
            }
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 109, unaryExpressionNotPlusMinus_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end unaryExpressionNotPlusMinus

    public class postfixExpression_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start postfixExpression
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1407:1: postfixExpression : ( primaryExpression -> primaryExpression ) (poi= propOrIdent[root_0, retval.start] -> $poi | LBRACK expression RBRACK -> ^( ARRAY_ACC $postfixExpression expression ) | arguments -> ^( METHOD_CALL $postfixExpression arguments ) )* (iin= INC -> ^( POST_INC[$iin] $postfixExpression) | dde= DEC -> ^( POST_DEC[$dde] $postfixExpression) )? ;
    public postfixExpression_return postfixExpression() // throws RecognitionException [1]
    {   
        postfixExpression_return retval = new postfixExpression_return();
        retval.start = input.LT(1);
        int postfixExpression_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken iin = null;
        CommonToken dde = null;
        CommonToken LBRACK285 = null;
        CommonToken RBRACK287 = null;
        propOrIdent_return poi = null;

        primaryExpression_return primaryExpression284 = null;

        expression_return expression286 = null;

        arguments_return arguments288 = null;
        
        
        CommonTree iin_tree=null;
        CommonTree dde_tree=null;
        CommonTree LBRACK285_tree=null;
        CommonTree RBRACK287_tree=null;
        RewriteRuleTokenStream stream_LBRACK = new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_INC = new RewriteRuleTokenStream(adaptor,"token INC");
        RewriteRuleTokenStream stream_RBRACK = new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_DEC = new RewriteRuleTokenStream(adaptor,"token DEC");
        RewriteRuleSubtreeStream stream_arguments = new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_primaryExpression = new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
        RewriteRuleSubtreeStream stream_propOrIdent = new RewriteRuleSubtreeStream(adaptor,"rule propOrIdent");
        RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 110) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1408:4: ( ( primaryExpression -> primaryExpression ) (poi= propOrIdent[root_0, retval.start] -> $poi | LBRACK expression RBRACK -> ^( ARRAY_ACC $postfixExpression expression ) | arguments -> ^( METHOD_CALL $postfixExpression arguments ) )* (iin= INC -> ^( POST_INC[$iin] $postfixExpression) | dde= DEC -> ^( POST_DEC[$dde] $postfixExpression) )? )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1408:4: ( primaryExpression -> primaryExpression ) (poi= propOrIdent[root_0, retval.start] -> $poi | LBRACK expression RBRACK -> ^( ARRAY_ACC $postfixExpression expression ) | arguments -> ^( METHOD_CALL $postfixExpression arguments ) )* (iin= INC -> ^( POST_INC[$iin] $postfixExpression) | dde= DEC -> ^( POST_DEC[$dde] $postfixExpression) )?
            {
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1408:4: ( primaryExpression -> primaryExpression )
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1408:5: primaryExpression
            	{
            		PushFollow(FOLLOW_primaryExpression_in_postfixExpression5034);
            		primaryExpression284 = primaryExpression();
            		followingStackPointer_--;
            		if (failed) return retval;
            		if ( backtracking==0 ) stream_primaryExpression.Add(primaryExpression284.Tree);
            		
            		// AST REWRITE
            		// elements:          primaryExpression
            		// token labels:      
            		// rule labels:       retval
            		// token list labels: 
            		// rule list labels:  
            		if ( backtracking==0 ) {
            		retval.tree = root_0;
            		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            		
            		root_0 = (CommonTree)adaptor.GetNilNode();
            		// 1408:23: -> primaryExpression
            		{
            		    adaptor.AddChild(root_0, stream_primaryExpression.Next());
            		
            		}
            		
            		}
            	
            	}

            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1409:3: (poi= propOrIdent[root_0, retval.start] -> $poi | LBRACK expression RBRACK -> ^( ARRAY_ACC $postfixExpression expression ) | arguments -> ^( METHOD_CALL $postfixExpression arguments ) )*
            	do 
            	{
            	    int alt79 = 4;
            	    switch ( input.LA(1) ) 
            	    {
            	    case LBRACK:
            	    	{
            	        switch ( input.LA(2) ) 
            	        {
            	        case INC:
            	        	{
            	            int LA79_80 = input.LA(3);
            	            
            	            if ( (synpred152()) )
            	            {
            	                alt79 = 2;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case DEC:
            	        	{
            	            int LA79_81 = input.LA(3);
            	            
            	            if ( (synpred152()) )
            	            {
            	                alt79 = 2;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case MINUS:
            	        	{
            	            int LA79_82 = input.LA(3);
            	            
            	            if ( (synpred152()) )
            	            {
            	                alt79 = 2;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case PLUS:
            	        	{
            	            int LA79_83 = input.LA(3);
            	            
            	            if ( (synpred152()) )
            	            {
            	                alt79 = 2;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case DELETE:
            	        	{
            	            int LA79_84 = input.LA(3);
            	            
            	            if ( (synpred152()) )
            	            {
            	                alt79 = 2;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case VOID:
            	        	{
            	            int LA79_85 = input.LA(3);
            	            
            	            if ( (synpred152()) )
            	            {
            	                alt79 = 2;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case TYPEOF:
            	        	{
            	            int LA79_86 = input.LA(3);
            	            
            	            if ( (synpred152()) )
            	            {
            	                alt79 = 2;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LNOT:
            	        	{
            	            int LA79_87 = input.LA(3);
            	            
            	            if ( (synpred152()) )
            	            {
            	                alt79 = 2;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case BNOT:
            	        	{
            	            int LA79_88 = input.LA(3);
            	            
            	            if ( (synpred152()) )
            	            {
            	                alt79 = 2;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case UNDEFINED:
            	        	{
            	            int LA79_89 = input.LA(3);
            	            
            	            if ( (synpred152()) )
            	            {
            	                alt79 = 2;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case HEX_LITERAL:
            	        case DECIMAL_LITERAL:
            	        case OCTAL_LITERAL:
            	        case FLOAT_LITERAL:
            	        	{
            	            int LA79_90 = input.LA(3);
            	            
            	            if ( (synpred152()) )
            	            {
            	                alt79 = 2;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case STRING_LITERAL:
            	        	{
            	            int LA79_91 = input.LA(3);
            	            
            	            if ( (synpred152()) )
            	            {
            	                alt79 = 2;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case TRUE:
            	        	{
            	            int LA79_92 = input.LA(3);
            	            
            	            if ( (synpred152()) )
            	            {
            	                alt79 = 2;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case FALSE:
            	        	{
            	            int LA79_93 = input.LA(3);
            	            
            	            if ( (synpred152()) )
            	            {
            	                alt79 = 2;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case NULL:
            	        	{
            	            int LA79_94 = input.LA(3);
            	            
            	            if ( (synpred152()) )
            	            {
            	                alt79 = 2;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LBRACK:
            	        	{
            	            int LA79_95 = input.LA(3);
            	            
            	            if ( (synpred152()) )
            	            {
            	                alt79 = 2;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LCURLY:
            	        	{
            	            int LA79_96 = input.LA(3);
            	            
            	            if ( (synpred152()) )
            	            {
            	                alt79 = 2;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case FUNCTION:
            	        	{
            	            int LA79_97 = input.LA(3);
            	            
            	            if ( (synpred152()) )
            	            {
            	                alt79 = 2;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case NEW:
            	        	{
            	            int LA79_98 = input.LA(3);
            	            
            	            if ( (synpred152()) )
            	            {
            	                alt79 = 2;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LPAREN:
            	        	{
            	            int LA79_99 = input.LA(3);
            	            
            	            if ( (synpred152()) )
            	            {
            	                alt79 = 2;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case IDENT:
            	        	{
            	            int LA79_100 = input.LA(3);
            	            
            	            if ( (synpred152()) )
            	            {
            	                alt79 = 2;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case USE:
            	        	{
            	            int LA79_101 = input.LA(3);
            	            
            	            if ( (synpred152()) )
            	            {
            	                alt79 = 2;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case XML:
            	        	{
            	            int LA79_102 = input.LA(3);
            	            
            	            if ( (synpred152()) )
            	            {
            	                alt79 = 2;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case DYNAMIC:
            	        	{
            	            int LA79_103 = input.LA(3);
            	            
            	            if ( (synpred152()) )
            	            {
            	                alt79 = 2;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case IS:
            	        	{
            	            int LA79_104 = input.LA(3);
            	            
            	            if ( (synpred152()) )
            	            {
            	                alt79 = 2;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case AS:
            	        	{
            	            int LA79_105 = input.LA(3);
            	            
            	            if ( (synpred152()) )
            	            {
            	                alt79 = 2;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case GET:
            	        	{
            	            int LA79_106 = input.LA(3);
            	            
            	            if ( (synpred152()) )
            	            {
            	                alt79 = 2;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case SET:
            	        	{
            	            int LA79_107 = input.LA(3);
            	            
            	            if ( (synpred152()) )
            	            {
            	                alt79 = 2;
            	            }
            	            
            	        
            	            }
            	            break;
            	        
            	        }
            	    
            	        }
            	        break;
            	    case LPAREN:
            	    	{
            	        switch ( input.LA(2) ) 
            	        {
            	        case RPAREN:
            	        	{
            	            alt79 = 3;
            	            }
            	            break;
            	        case INC:
            	        	{
            	            int LA79_110 = input.LA(3);
            	            
            	            if ( (synpred153()) )
            	            {
            	                alt79 = 3;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case DEC:
            	        	{
            	            int LA79_111 = input.LA(3);
            	            
            	            if ( (synpred153()) )
            	            {
            	                alt79 = 3;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case MINUS:
            	        	{
            	            int LA79_112 = input.LA(3);
            	            
            	            if ( (synpred153()) )
            	            {
            	                alt79 = 3;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case PLUS:
            	        	{
            	            int LA79_113 = input.LA(3);
            	            
            	            if ( (synpred153()) )
            	            {
            	                alt79 = 3;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case DELETE:
            	        	{
            	            int LA79_114 = input.LA(3);
            	            
            	            if ( (synpred153()) )
            	            {
            	                alt79 = 3;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case VOID:
            	        	{
            	            int LA79_115 = input.LA(3);
            	            
            	            if ( (synpred153()) )
            	            {
            	                alt79 = 3;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case TYPEOF:
            	        	{
            	            int LA79_116 = input.LA(3);
            	            
            	            if ( (synpred153()) )
            	            {
            	                alt79 = 3;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LNOT:
            	        	{
            	            int LA79_117 = input.LA(3);
            	            
            	            if ( (synpred153()) )
            	            {
            	                alt79 = 3;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case BNOT:
            	        	{
            	            int LA79_118 = input.LA(3);
            	            
            	            if ( (synpred153()) )
            	            {
            	                alt79 = 3;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case UNDEFINED:
            	        	{
            	            int LA79_119 = input.LA(3);
            	            
            	            if ( (synpred153()) )
            	            {
            	                alt79 = 3;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case HEX_LITERAL:
            	        case DECIMAL_LITERAL:
            	        case OCTAL_LITERAL:
            	        case FLOAT_LITERAL:
            	        	{
            	            int LA79_120 = input.LA(3);
            	            
            	            if ( (synpred153()) )
            	            {
            	                alt79 = 3;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case STRING_LITERAL:
            	        	{
            	            int LA79_121 = input.LA(3);
            	            
            	            if ( (synpred153()) )
            	            {
            	                alt79 = 3;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case TRUE:
            	        	{
            	            int LA79_122 = input.LA(3);
            	            
            	            if ( (synpred153()) )
            	            {
            	                alt79 = 3;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case FALSE:
            	        	{
            	            int LA79_123 = input.LA(3);
            	            
            	            if ( (synpred153()) )
            	            {
            	                alt79 = 3;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case NULL:
            	        	{
            	            int LA79_124 = input.LA(3);
            	            
            	            if ( (synpred153()) )
            	            {
            	                alt79 = 3;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LBRACK:
            	        	{
            	            int LA79_125 = input.LA(3);
            	            
            	            if ( (synpred153()) )
            	            {
            	                alt79 = 3;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LCURLY:
            	        	{
            	            int LA79_126 = input.LA(3);
            	            
            	            if ( (synpred153()) )
            	            {
            	                alt79 = 3;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case FUNCTION:
            	        	{
            	            int LA79_127 = input.LA(3);
            	            
            	            if ( (synpred153()) )
            	            {
            	                alt79 = 3;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case NEW:
            	        	{
            	            int LA79_128 = input.LA(3);
            	            
            	            if ( (synpred153()) )
            	            {
            	                alt79 = 3;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case LPAREN:
            	        	{
            	            int LA79_129 = input.LA(3);
            	            
            	            if ( (synpred153()) )
            	            {
            	                alt79 = 3;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case IDENT:
            	        	{
            	            int LA79_130 = input.LA(3);
            	            
            	            if ( (synpred153()) )
            	            {
            	                alt79 = 3;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case USE:
            	        	{
            	            int LA79_131 = input.LA(3);
            	            
            	            if ( (synpred153()) )
            	            {
            	                alt79 = 3;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case XML:
            	        	{
            	            int LA79_132 = input.LA(3);
            	            
            	            if ( (synpred153()) )
            	            {
            	                alt79 = 3;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case DYNAMIC:
            	        	{
            	            int LA79_133 = input.LA(3);
            	            
            	            if ( (synpred153()) )
            	            {
            	                alt79 = 3;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case IS:
            	        	{
            	            int LA79_134 = input.LA(3);
            	            
            	            if ( (synpred153()) )
            	            {
            	                alt79 = 3;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case AS:
            	        	{
            	            int LA79_135 = input.LA(3);
            	            
            	            if ( (synpred153()) )
            	            {
            	                alt79 = 3;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case GET:
            	        	{
            	            int LA79_136 = input.LA(3);
            	            
            	            if ( (synpred153()) )
            	            {
            	                alt79 = 3;
            	            }
            	            
            	        
            	            }
            	            break;
            	        case SET:
            	        	{
            	            int LA79_137 = input.LA(3);
            	            
            	            if ( (synpred153()) )
            	            {
            	                alt79 = 3;
            	            }
            	            
            	        
            	            }
            	            break;
            	        
            	        }
            	    
            	        }
            	        break;
            	    case DOT:
            	    	{
            	        alt79 = 1;
            	        }
            	        break;
            	    
            	    }
            	
            	    switch (alt79) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1409:5: poi= propOrIdent[root_0, retval.start]
            			    {
            			    	PushFollow(FOLLOW_propOrIdent_in_postfixExpression5047);
            			    	poi = propOrIdent(root_0,  retval.start);
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) stream_propOrIdent.Add(poi.Tree);
            			    	if ( backtracking == 0 ) 
            			    	{
            			    	   
            			    	}
            			    	
            			    	// AST REWRITE
            			    	// elements:          poi
            			    	// token labels:      
            			    	// rule labels:       retval, poi
            			    	// token list labels: 
            			    	// rule list labels:  
            			    	if ( backtracking==0 ) {
            			    	retval.tree = root_0;
            			    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            			    	RewriteRuleSubtreeStream stream_poi = new RewriteRuleSubtreeStream(adaptor, "token poi", (poi!=null ? poi.Tree : null));
            			    	
            			    	root_0 = (CommonTree)adaptor.GetNilNode();
            			    	// 1409:47: -> $poi
            			    	{
            			    	    adaptor.AddChild(root_0, stream_poi.Next());
            			    	
            			    	}
            			    	
            			    	}
            			    
            			    }
            			    break;
            			case 2 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1410:5: LBRACK expression RBRACK
            			    {
            			    	LBRACK285 = (CommonToken)input.LT(1);
            			    	Match(input,LBRACK,FOLLOW_LBRACK_in_postfixExpression5061); if (failed) return retval;
            			    	if ( backtracking==0 ) stream_LBRACK.Add(LBRACK285);

            			    	if ( backtracking == 0 ) 
            			    	{
            			    	   buffer.Append("["); 
            			    	}
            			    	PushFollow(FOLLOW_expression_in_postfixExpression5065);
            			    	expression286 = expression();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) stream_expression.Add(expression286.Tree);
            			    	RBRACK287 = (CommonToken)input.LT(1);
            			    	Match(input,RBRACK,FOLLOW_RBRACK_in_postfixExpression5067); if (failed) return retval;
            			    	if ( backtracking==0 ) stream_RBRACK.Add(RBRACK287);

            			    	if ( backtracking == 0 ) 
            			    	{
            			    	   buffer.Append("]"); 
            			    	}
            			    	
            			    	// AST REWRITE
            			    	// elements:          expression, postfixExpression
            			    	// token labels:      
            			    	// rule labels:       retval
            			    	// token list labels: 
            			    	// rule list labels:  
            			    	if ( backtracking==0 ) {
            			    	retval.tree = root_0;
            			    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            			    	
            			    	root_0 = (CommonTree)adaptor.GetNilNode();
            			    	// 1410:78: -> ^( ARRAY_ACC $postfixExpression expression )
            			    	{
            			    	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1410:81: ^( ARRAY_ACC $postfixExpression expression )
            			    	    {
            			    	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            			    	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(ARRAY_ACC, "ARRAY_ACC"), root_1);
            			    	    
            			    	    adaptor.AddChild(root_1, stream_retval.Next());
            			    	    adaptor.AddChild(root_1, stream_expression.Next());
            			    	    
            			    	    adaptor.AddChild(root_0, root_1);
            			    	    }
            			    	
            			    	}
            			    	
            			    	}
            			    
            			    }
            			    break;
            			case 3 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1411:5: arguments
            			    {
            			    	PushFollow(FOLLOW_arguments_in_postfixExpression5086);
            			    	arguments288 = arguments();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) stream_arguments.Add(arguments288.Tree);
            			    	
            			    	// AST REWRITE
            			    	// elements:          arguments, postfixExpression
            			    	// token labels:      
            			    	// rule labels:       retval
            			    	// token list labels: 
            			    	// rule list labels:  
            			    	if ( backtracking==0 ) {
            			    	retval.tree = root_0;
            			    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            			    	
            			    	root_0 = (CommonTree)adaptor.GetNilNode();
            			    	// 1411:15: -> ^( METHOD_CALL $postfixExpression arguments )
            			    	{
            			    	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1411:18: ^( METHOD_CALL $postfixExpression arguments )
            			    	    {
            			    	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            			    	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);
            			    	    
            			    	    adaptor.AddChild(root_1, stream_retval.Next());
            			    	    adaptor.AddChild(root_1, stream_arguments.Next());
            			    	    
            			    	    adaptor.AddChild(root_0, root_1);
            			    	    }
            			    	
            			    	}
            			    	
            			    	}
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop79;
            	    }
            	} while (true);
            	
            	loop79:
            		;	// Stops C# compiler whinging that label 'loop79' has no statements

            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1414:3: (iin= INC -> ^( POST_INC[$iin] $postfixExpression) | dde= DEC -> ^( POST_DEC[$dde] $postfixExpression) )?
            	int alt80 = 3;
            	int LA80_0 = input.LA(1);
            	
            	if ( (LA80_0 == INC) )
            	{
            	    switch ( input.LA(2) ) 
            	    {
            	        case INC:
            	        	{
            	            int LA80_79 = input.LA(3);
            	            
            	            if ( (synpred154()) )
            	            {
            	                alt80 = 1;
            	            }
            	            }
            	            break;
            	        case DEC:
            	        	{
            	            int LA80_80 = input.LA(3);
            	            
            	            if ( (synpred154()) )
            	            {
            	                alt80 = 1;
            	            }
            	            }
            	            break;
            	        case MINUS:
            	        	{
            	            int LA80_81 = input.LA(3);
            	            
            	            if ( (synpred154()) )
            	            {
            	                alt80 = 1;
            	            }
            	            }
            	            break;
            	        case PLUS:
            	        	{
            	            int LA80_82 = input.LA(3);
            	            
            	            if ( (synpred154()) )
            	            {
            	                alt80 = 1;
            	            }
            	            }
            	            break;
            	        case DELETE:
            	        	{
            	            int LA80_83 = input.LA(3);
            	            
            	            if ( (synpred154()) )
            	            {
            	                alt80 = 1;
            	            }
            	            }
            	            break;
            	        case VOID:
            	        	{
            	            int LA80_84 = input.LA(3);
            	            
            	            if ( (synpred154()) )
            	            {
            	                alt80 = 1;
            	            }
            	            }
            	            break;
            	        case TYPEOF:
            	        	{
            	            int LA80_85 = input.LA(3);
            	            
            	            if ( (synpred154()) )
            	            {
            	                alt80 = 1;
            	            }
            	            }
            	            break;
            	        case LNOT:
            	        	{
            	            int LA80_86 = input.LA(3);
            	            
            	            if ( (synpred154()) )
            	            {
            	                alt80 = 1;
            	            }
            	            }
            	            break;
            	        case BNOT:
            	        	{
            	            int LA80_87 = input.LA(3);
            	            
            	            if ( (synpred154()) )
            	            {
            	                alt80 = 1;
            	            }
            	            }
            	            break;
            	        case UNDEFINED:
            	        	{
            	            int LA80_88 = input.LA(3);
            	            
            	            if ( (synpred154()) )
            	            {
            	                alt80 = 1;
            	            }
            	            }
            	            break;
            	        case HEX_LITERAL:
            	        case DECIMAL_LITERAL:
            	        case OCTAL_LITERAL:
            	        case FLOAT_LITERAL:
            	        	{
            	            int LA80_89 = input.LA(3);
            	            
            	            if ( (synpred154()) )
            	            {
            	                alt80 = 1;
            	            }
            	            }
            	            break;
            	        case STRING_LITERAL:
            	        	{
            	            int LA80_90 = input.LA(3);
            	            
            	            if ( (synpred154()) )
            	            {
            	                alt80 = 1;
            	            }
            	            }
            	            break;
            	        case TRUE:
            	        	{
            	            int LA80_91 = input.LA(3);
            	            
            	            if ( (synpred154()) )
            	            {
            	                alt80 = 1;
            	            }
            	            }
            	            break;
            	        case FALSE:
            	        	{
            	            int LA80_92 = input.LA(3);
            	            
            	            if ( (synpred154()) )
            	            {
            	                alt80 = 1;
            	            }
            	            }
            	            break;
            	        case NULL:
            	        	{
            	            int LA80_93 = input.LA(3);
            	            
            	            if ( (synpred154()) )
            	            {
            	                alt80 = 1;
            	            }
            	            }
            	            break;
            	        case LBRACK:
            	        	{
            	            int LA80_94 = input.LA(3);
            	            
            	            if ( (synpred154()) )
            	            {
            	                alt80 = 1;
            	            }
            	            }
            	            break;
            	        case LCURLY:
            	        	{
            	            int LA80_95 = input.LA(3);
            	            
            	            if ( (synpred154()) )
            	            {
            	                alt80 = 1;
            	            }
            	            }
            	            break;
            	        case FUNCTION:
            	        	{
            	            int LA80_96 = input.LA(3);
            	            
            	            if ( (synpred154()) )
            	            {
            	                alt80 = 1;
            	            }
            	            }
            	            break;
            	        case NEW:
            	        	{
            	            int LA80_97 = input.LA(3);
            	            
            	            if ( (synpred154()) )
            	            {
            	                alt80 = 1;
            	            }
            	            }
            	            break;
            	        case LPAREN:
            	        	{
            	            int LA80_98 = input.LA(3);
            	            
            	            if ( (synpred154()) )
            	            {
            	                alt80 = 1;
            	            }
            	            }
            	            break;
            	        case IDENT:
            	        	{
            	            int LA80_99 = input.LA(3);
            	            
            	            if ( (synpred154()) )
            	            {
            	                alt80 = 1;
            	            }
            	            }
            	            break;
            	        case USE:
            	        	{
            	            int LA80_100 = input.LA(3);
            	            
            	            if ( (synpred154()) )
            	            {
            	                alt80 = 1;
            	            }
            	            }
            	            break;
            	        case XML:
            	        	{
            	            int LA80_101 = input.LA(3);
            	            
            	            if ( (synpred154()) )
            	            {
            	                alt80 = 1;
            	            }
            	            }
            	            break;
            	        case DYNAMIC:
            	        	{
            	            int LA80_102 = input.LA(3);
            	            
            	            if ( (synpred154()) )
            	            {
            	                alt80 = 1;
            	            }
            	            }
            	            break;
            	        case IS:
            	        	{
            	            int LA80_103 = input.LA(3);
            	            
            	            if ( (synpred154()) )
            	            {
            	                alt80 = 1;
            	            }
            	            }
            	            break;
            	        case AS:
            	        	{
            	            int LA80_104 = input.LA(3);
            	            
            	            if ( (synpred154()) )
            	            {
            	                alt80 = 1;
            	            }
            	            }
            	            break;
            	        case GET:
            	        	{
            	            int LA80_105 = input.LA(3);
            	            
            	            if ( (synpred154()) )
            	            {
            	                alt80 = 1;
            	            }
            	            }
            	            break;
            	        case SET:
            	        	{
            	            int LA80_106 = input.LA(3);
            	            
            	            if ( (synpred154()) )
            	            {
            	                alt80 = 1;
            	            }
            	            }
            	            break;
            	        case EOF:
            	        case IMPORT:
            	        case SEMI:
            	        case COMMA:
            	        case RCURLY:
            	        case INCLUDE_DIRECTIVE:
            	        case VAR:
            	        case CONST:
            	        case ASSIGN:
            	        case RPAREN:
            	        case IF:
            	        case ELSE:
            	        case RETURN:
            	        case CONTINUE:
            	        case BREAK:
            	        case SWITCH:
            	        case CASE:
            	        case COLON:
            	        case DEFAULT:
            	        case FOR:
            	        case IN:
            	        case WHILE:
            	        case DO:
            	        case WITH:
            	        case STAR:
            	        case PUBLIC:
            	        case PRIVATE:
            	        case PROTECTED:
            	        case INTERNAL:
            	        case RBRACK:
            	        case STATIC:
            	        case STAR_ASSIGN:
            	        case DIV_ASSIGN:
            	        case MOD_ASSIGN:
            	        case PLUS_ASSIGN:
            	        case MINUS_ASSIGN:
            	        case SL_ASSIGN:
            	        case SR_ASSIGN:
            	        case BSR_ASSIGN:
            	        case BAND_ASSIGN:
            	        case BXOR_ASSIGN:
            	        case BOR_ASSIGN:
            	        case LAND_ASSIGN:
            	        case LOR_ASSIGN:
            	        case QUESTION:
            	        case LOR:
            	        case LAND:
            	        case BOR:
            	        case BXOR:
            	        case BAND:
            	        case STRICT_EQUAL:
            	        case STRICT_NOT_EQUAL:
            	        case NOT_EQUAL:
            	        case EQUAL:
            	        case LT:
            	        case GT:
            	        case LE:
            	        case GE:
            	        case INSTANCEOF:
            	        case SL:
            	        case SR:
            	        case BSR:
            	        case DIV:
            	        case MOD:
            	        case SL_COMMENT:
            	        case ML_COMMENT:
            	        case 175:
            	        case 176:
            	        case 177:
            	        case 180:
            	        case 181:
            	        case 182:
            	        case 183:
            	        case 184:
            	        case 185:
            	        case 186:
            	        	{
            	            alt80 = 1;
            	            }
            	            break;
            	    }
            	
            	}
            	else if ( (LA80_0 == DEC) )
            	{
            	    switch ( input.LA(2) ) 
            	    {
            	        case INC:
            	        	{
            	            int LA80_157 = input.LA(3);
            	            
            	            if ( (synpred155()) )
            	            {
            	                alt80 = 2;
            	            }
            	            }
            	            break;
            	        case DEC:
            	        	{
            	            int LA80_158 = input.LA(3);
            	            
            	            if ( (synpred155()) )
            	            {
            	                alt80 = 2;
            	            }
            	            }
            	            break;
            	        case MINUS:
            	        	{
            	            int LA80_159 = input.LA(3);
            	            
            	            if ( (synpred155()) )
            	            {
            	                alt80 = 2;
            	            }
            	            }
            	            break;
            	        case PLUS:
            	        	{
            	            int LA80_160 = input.LA(3);
            	            
            	            if ( (synpred155()) )
            	            {
            	                alt80 = 2;
            	            }
            	            }
            	            break;
            	        case DELETE:
            	        	{
            	            int LA80_161 = input.LA(3);
            	            
            	            if ( (synpred155()) )
            	            {
            	                alt80 = 2;
            	            }
            	            }
            	            break;
            	        case VOID:
            	        	{
            	            int LA80_162 = input.LA(3);
            	            
            	            if ( (synpred155()) )
            	            {
            	                alt80 = 2;
            	            }
            	            }
            	            break;
            	        case TYPEOF:
            	        	{
            	            int LA80_163 = input.LA(3);
            	            
            	            if ( (synpred155()) )
            	            {
            	                alt80 = 2;
            	            }
            	            }
            	            break;
            	        case LNOT:
            	        	{
            	            int LA80_164 = input.LA(3);
            	            
            	            if ( (synpred155()) )
            	            {
            	                alt80 = 2;
            	            }
            	            }
            	            break;
            	        case BNOT:
            	        	{
            	            int LA80_165 = input.LA(3);
            	            
            	            if ( (synpred155()) )
            	            {
            	                alt80 = 2;
            	            }
            	            }
            	            break;
            	        case UNDEFINED:
            	        	{
            	            int LA80_166 = input.LA(3);
            	            
            	            if ( (synpred155()) )
            	            {
            	                alt80 = 2;
            	            }
            	            }
            	            break;
            	        case HEX_LITERAL:
            	        case DECIMAL_LITERAL:
            	        case OCTAL_LITERAL:
            	        case FLOAT_LITERAL:
            	        	{
            	            int LA80_167 = input.LA(3);
            	            
            	            if ( (synpred155()) )
            	            {
            	                alt80 = 2;
            	            }
            	            }
            	            break;
            	        case STRING_LITERAL:
            	        	{
            	            int LA80_168 = input.LA(3);
            	            
            	            if ( (synpred155()) )
            	            {
            	                alt80 = 2;
            	            }
            	            }
            	            break;
            	        case TRUE:
            	        	{
            	            int LA80_169 = input.LA(3);
            	            
            	            if ( (synpred155()) )
            	            {
            	                alt80 = 2;
            	            }
            	            }
            	            break;
            	        case FALSE:
            	        	{
            	            int LA80_170 = input.LA(3);
            	            
            	            if ( (synpred155()) )
            	            {
            	                alt80 = 2;
            	            }
            	            }
            	            break;
            	        case NULL:
            	        	{
            	            int LA80_171 = input.LA(3);
            	            
            	            if ( (synpred155()) )
            	            {
            	                alt80 = 2;
            	            }
            	            }
            	            break;
            	        case LBRACK:
            	        	{
            	            int LA80_172 = input.LA(3);
            	            
            	            if ( (synpred155()) )
            	            {
            	                alt80 = 2;
            	            }
            	            }
            	            break;
            	        case LCURLY:
            	        	{
            	            int LA80_173 = input.LA(3);
            	            
            	            if ( (synpred155()) )
            	            {
            	                alt80 = 2;
            	            }
            	            }
            	            break;
            	        case FUNCTION:
            	        	{
            	            int LA80_174 = input.LA(3);
            	            
            	            if ( (synpred155()) )
            	            {
            	                alt80 = 2;
            	            }
            	            }
            	            break;
            	        case NEW:
            	        	{
            	            int LA80_175 = input.LA(3);
            	            
            	            if ( (synpred155()) )
            	            {
            	                alt80 = 2;
            	            }
            	            }
            	            break;
            	        case LPAREN:
            	        	{
            	            int LA80_176 = input.LA(3);
            	            
            	            if ( (synpred155()) )
            	            {
            	                alt80 = 2;
            	            }
            	            }
            	            break;
            	        case IDENT:
            	        	{
            	            int LA80_177 = input.LA(3);
            	            
            	            if ( (synpred155()) )
            	            {
            	                alt80 = 2;
            	            }
            	            }
            	            break;
            	        case USE:
            	        	{
            	            int LA80_178 = input.LA(3);
            	            
            	            if ( (synpred155()) )
            	            {
            	                alt80 = 2;
            	            }
            	            }
            	            break;
            	        case XML:
            	        	{
            	            int LA80_179 = input.LA(3);
            	            
            	            if ( (synpred155()) )
            	            {
            	                alt80 = 2;
            	            }
            	            }
            	            break;
            	        case DYNAMIC:
            	        	{
            	            int LA80_180 = input.LA(3);
            	            
            	            if ( (synpred155()) )
            	            {
            	                alt80 = 2;
            	            }
            	            }
            	            break;
            	        case IS:
            	        	{
            	            int LA80_181 = input.LA(3);
            	            
            	            if ( (synpred155()) )
            	            {
            	                alt80 = 2;
            	            }
            	            }
            	            break;
            	        case AS:
            	        	{
            	            int LA80_182 = input.LA(3);
            	            
            	            if ( (synpred155()) )
            	            {
            	                alt80 = 2;
            	            }
            	            }
            	            break;
            	        case GET:
            	        	{
            	            int LA80_183 = input.LA(3);
            	            
            	            if ( (synpred155()) )
            	            {
            	                alt80 = 2;
            	            }
            	            }
            	            break;
            	        case SET:
            	        	{
            	            int LA80_184 = input.LA(3);
            	            
            	            if ( (synpred155()) )
            	            {
            	                alt80 = 2;
            	            }
            	            }
            	            break;
            	        case EOF:
            	        case IMPORT:
            	        case SEMI:
            	        case COMMA:
            	        case RCURLY:
            	        case INCLUDE_DIRECTIVE:
            	        case VAR:
            	        case CONST:
            	        case ASSIGN:
            	        case RPAREN:
            	        case IF:
            	        case ELSE:
            	        case RETURN:
            	        case CONTINUE:
            	        case BREAK:
            	        case SWITCH:
            	        case CASE:
            	        case COLON:
            	        case DEFAULT:
            	        case FOR:
            	        case IN:
            	        case WHILE:
            	        case DO:
            	        case WITH:
            	        case STAR:
            	        case PUBLIC:
            	        case PRIVATE:
            	        case PROTECTED:
            	        case INTERNAL:
            	        case RBRACK:
            	        case STATIC:
            	        case STAR_ASSIGN:
            	        case DIV_ASSIGN:
            	        case MOD_ASSIGN:
            	        case PLUS_ASSIGN:
            	        case MINUS_ASSIGN:
            	        case SL_ASSIGN:
            	        case SR_ASSIGN:
            	        case BSR_ASSIGN:
            	        case BAND_ASSIGN:
            	        case BXOR_ASSIGN:
            	        case BOR_ASSIGN:
            	        case LAND_ASSIGN:
            	        case LOR_ASSIGN:
            	        case QUESTION:
            	        case LOR:
            	        case LAND:
            	        case BOR:
            	        case BXOR:
            	        case BAND:
            	        case STRICT_EQUAL:
            	        case STRICT_NOT_EQUAL:
            	        case NOT_EQUAL:
            	        case EQUAL:
            	        case LT:
            	        case GT:
            	        case LE:
            	        case GE:
            	        case INSTANCEOF:
            	        case SL:
            	        case SR:
            	        case BSR:
            	        case DIV:
            	        case MOD:
            	        case SL_COMMENT:
            	        case ML_COMMENT:
            	        case 175:
            	        case 176:
            	        case 177:
            	        case 180:
            	        case 181:
            	        case 182:
            	        case 183:
            	        case 184:
            	        case 185:
            	        case 186:
            	        	{
            	            alt80 = 2;
            	            }
            	            break;
            	    }
            	
            	}
            	switch (alt80) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1414:6: iin= INC
            	        {
            	        	iin = (CommonToken)input.LT(1);
            	        	Match(input,INC,FOLLOW_INC_in_postfixExpression5112); if (failed) return retval;
            	        	if ( backtracking==0 ) stream_INC.Add(iin);

            	        	if ( backtracking == 0 ) 
            	        	{
            	        	   buffer.Append(iin.Text); 
            	        	}
            	        	
            	        	// AST REWRITE
            	        	// elements:          postfixExpression
            	        	// token labels:      
            	        	// rule labels:       retval
            	        	// token list labels: 
            	        	// rule list labels:  
            	        	if ( backtracking==0 ) {
            	        	retval.tree = root_0;
            	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	        	
            	        	root_0 = (CommonTree)adaptor.GetNilNode();
            	        	// 1414:43: -> ^( POST_INC[$iin] $postfixExpression)
            	        	{
            	        	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1414:46: ^( POST_INC[$iin] $postfixExpression)
            	        	    {
            	        	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	        	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(POST_INC, iin), root_1);
            	        	    
            	        	    adaptor.AddChild(root_1, stream_retval.Next());
            	        	    
            	        	    adaptor.AddChild(root_0, root_1);
            	        	    }
            	        	
            	        	}
            	        	
            	        	}
            	        
            	        }
            	        break;
            	    case 2 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1415:6: dde= DEC
            	        {
            	        	dde = (CommonToken)input.LT(1);
            	        	Match(input,DEC,FOLLOW_DEC_in_postfixExpression5133); if (failed) return retval;
            	        	if ( backtracking==0 ) stream_DEC.Add(dde);

            	        	if ( backtracking == 0 ) 
            	        	{
            	        	   buffer.Append(dde.Text); 
            	        	}
            	        	
            	        	// AST REWRITE
            	        	// elements:          postfixExpression
            	        	// token labels:      
            	        	// rule labels:       retval
            	        	// token list labels: 
            	        	// rule list labels:  
            	        	if ( backtracking==0 ) {
            	        	retval.tree = root_0;
            	        	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	        	
            	        	root_0 = (CommonTree)adaptor.GetNilNode();
            	        	// 1415:43: -> ^( POST_DEC[$dde] $postfixExpression)
            	        	{
            	        	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1415:46: ^( POST_DEC[$dde] $postfixExpression)
            	        	    {
            	        	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	        	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(POST_DEC, dde), root_1);
            	        	    
            	        	    adaptor.AddChild(root_1, stream_retval.Next());
            	        	    
            	        	    adaptor.AddChild(root_0, root_1);
            	        	    }
            	        	
            	        	}
            	        	
            	        	}
            	        
            	        }
            	        break;
            	
            	}

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 110, postfixExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end postfixExpression

    public class primaryExpression_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start primaryExpression
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1419:1: primaryExpression : (und= UNDEFINED | c= constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | encapsulatedExpression | qualifiedIdent );
    public primaryExpression_return primaryExpression() // throws RecognitionException [1]
    {   
        primaryExpression_return retval = new primaryExpression_return();
        retval.start = input.LT(1);
        int primaryExpression_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken und = null;
        constant_return c = null;

        arrayLiteral_return arrayLiteral289 = null;

        objectLiteral_return objectLiteral290 = null;

        functionDefinition_return functionDefinition291 = null;

        newFullExpression_return newFullExpression292 = null;

        encapsulatedExpression_return encapsulatedExpression293 = null;

        qualifiedIdent_return qualifiedIdent294 = null;
        
        
        CommonTree und_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 111) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1420:4: (und= UNDEFINED | c= constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | encapsulatedExpression | qualifiedIdent )
            int alt81 = 8;
            switch ( input.LA(1) ) 
            {
            case UNDEFINED:
            	{
                alt81 = 1;
                }
                break;
            case STRING_LITERAL:
            case TRUE:
            case FALSE:
            case NULL:
            case HEX_LITERAL:
            case DECIMAL_LITERAL:
            case OCTAL_LITERAL:
            case FLOAT_LITERAL:
            	{
                alt81 = 2;
                }
                break;
            case LBRACK:
            	{
                alt81 = 3;
                }
                break;
            case LCURLY:
            	{
                alt81 = 4;
                }
                break;
            case FUNCTION:
            	{
                alt81 = 5;
                }
                break;
            case NEW:
            	{
                alt81 = 6;
                }
                break;
            case LPAREN:
            	{
                alt81 = 7;
                }
                break;
            case GET:
            case SET:
            case IDENT:
            case DYNAMIC:
            case IS:
            case AS:
            case USE:
            case XML:
            	{
                alt81 = 8;
                }
                break;
            	default:
            	    if ( backtracking > 0 ) {failed = true; return retval;}
            	    NoViableAltException nvae_d81s0 =
            	        new NoViableAltException("1419:1: primaryExpression : (und= UNDEFINED | c= constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | encapsulatedExpression | qualifiedIdent );", 81, 0, input);
            
            	    throw nvae_d81s0;
            }
            
            switch (alt81) 
            {
                case 1 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1420:4: und= UNDEFINED
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	und = (CommonToken)input.LT(1);
                    	Match(input,UNDEFINED,FOLLOW_UNDEFINED_in_primaryExpression5164); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	und_tree = (CommonTree)adaptor.Create(und);
                    	adaptor.AddChild(root_0, und_tree);
                    	}
                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(und.Text); 
                    	}
                    
                    }
                    break;
                case 2 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1421:4: c= constant
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_constant_in_primaryExpression5176);
                    	c = constant();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, c.Tree);
                    	if ( backtracking == 0 ) 
                    	{
                    	   buffer.Append(((CommonTree)c.Tree).Text); 
                    	}
                    
                    }
                    break;
                case 3 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1422:4: arrayLiteral
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_arrayLiteral_in_primaryExpression5187);
                    	arrayLiteral289 = arrayLiteral();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, arrayLiteral289.Tree);
                    
                    }
                    break;
                case 4 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1423:4: objectLiteral
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_objectLiteral_in_primaryExpression5192);
                    	objectLiteral290 = objectLiteral();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, objectLiteral290.Tree);
                    
                    }
                    break;
                case 5 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1424:4: functionDefinition
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_functionDefinition_in_primaryExpression5197);
                    	functionDefinition291 = functionDefinition();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, functionDefinition291.Tree);
                    
                    }
                    break;
                case 6 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1425:4: newFullExpression
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_newFullExpression_in_primaryExpression5202);
                    	newFullExpression292 = newFullExpression();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, newFullExpression292.Tree);
                    
                    }
                    break;
                case 7 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1426:4: encapsulatedExpression
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_encapsulatedExpression_in_primaryExpression5207);
                    	encapsulatedExpression293 = encapsulatedExpression();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, encapsulatedExpression293.Tree);
                    
                    }
                    break;
                case 8 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1427:4: qualifiedIdent
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_qualifiedIdent_in_primaryExpression5212);
                    	qualifiedIdent294 = qualifiedIdent();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, qualifiedIdent294.Tree);
                    
                    }
                    break;
            
            }
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 111, primaryExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end primaryExpression

    public class propOrIdent_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start propOrIdent
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1431:1: propOrIdent[CommonTree identPrimary, IToken startToken] : DOT propId= qualifiedIdent -> ^( PROPERTY_OR_IDENTIFIER $propId) ;
    public propOrIdent_return propOrIdent(CommonTree identPrimary, IToken startToken) // throws RecognitionException [1]
    {   
        propOrIdent_return retval = new propOrIdent_return();
        retval.start = input.LT(1);
        int propOrIdent_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken DOT295 = null;
        qualifiedIdent_return propId = null;
        
        
        CommonTree DOT295_tree=null;
        RewriteRuleTokenStream stream_DOT = new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_qualifiedIdent = new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdent");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 112) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1433:9: ( DOT propId= qualifiedIdent -> ^( PROPERTY_OR_IDENTIFIER $propId) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1433:9: DOT propId= qualifiedIdent
            {
            	if ( backtracking == 0 ) 
            	{
            	   retval.start = startToken; 
            	}
            	DOT295 = (CommonToken)input.LT(1);
            	Match(input,DOT,FOLLOW_DOT_in_propOrIdent5238); if (failed) return retval;
            	if ( backtracking==0 ) stream_DOT.Add(DOT295);

            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append("."); 
            	}
            	PushFollow(FOLLOW_qualifiedIdent_in_propOrIdent5251);
            	propId = qualifiedIdent();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_qualifiedIdent.Add(propId.Tree);
            	
            	// AST REWRITE
            	// elements:          propId
            	// token labels:      
            	// rule labels:       propId, retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_propId = new RewriteRuleSubtreeStream(adaptor, "token propId", (propId!=null ? propId.Tree : null));
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 1436:3: -> ^( PROPERTY_OR_IDENTIFIER $propId)
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1436:6: ^( PROPERTY_OR_IDENTIFIER $propId)
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(PROPERTY_OR_IDENTIFIER, "PROPERTY_OR_IDENTIFIER"), root_1);
            	    
            	    adaptor.AddChild(root_1, identPrimary);
            	    adaptor.AddChild(root_1, stream_propId.Next());
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 112, propOrIdent_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end propOrIdent

    public class constant_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start constant
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1439:1: constant : ( number | STRING_LITERAL | TRUE | FALSE | NULL );
    public constant_return constant() // throws RecognitionException [1]
    {   
        constant_return retval = new constant_return();
        retval.start = input.LT(1);
        int constant_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken STRING_LITERAL297 = null;
        CommonToken TRUE298 = null;
        CommonToken FALSE299 = null;
        CommonToken NULL300 = null;
        number_return number296 = null;
        
        
        CommonTree STRING_LITERAL297_tree=null;
        CommonTree TRUE298_tree=null;
        CommonTree FALSE299_tree=null;
        CommonTree NULL300_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 113) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1440:4: ( number | STRING_LITERAL | TRUE | FALSE | NULL )
            int alt82 = 5;
            switch ( input.LA(1) ) 
            {
            case HEX_LITERAL:
            case DECIMAL_LITERAL:
            case OCTAL_LITERAL:
            case FLOAT_LITERAL:
            	{
                alt82 = 1;
                }
                break;
            case STRING_LITERAL:
            	{
                alt82 = 2;
                }
                break;
            case TRUE:
            	{
                alt82 = 3;
                }
                break;
            case FALSE:
            	{
                alt82 = 4;
                }
                break;
            case NULL:
            	{
                alt82 = 5;
                }
                break;
            	default:
            	    if ( backtracking > 0 ) {failed = true; return retval;}
            	    NoViableAltException nvae_d82s0 =
            	        new NoViableAltException("1439:1: constant : ( number | STRING_LITERAL | TRUE | FALSE | NULL );", 82, 0, input);
            
            	    throw nvae_d82s0;
            }
            
            switch (alt82) 
            {
                case 1 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1440:4: number
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	PushFollow(FOLLOW_number_in_constant5275);
                    	number296 = number();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) adaptor.AddChild(root_0, number296.Tree);
                    
                    }
                    break;
                case 2 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1441:4: STRING_LITERAL
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	STRING_LITERAL297 = (CommonToken)input.LT(1);
                    	Match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_constant5280); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	STRING_LITERAL297_tree = (CommonTree)adaptor.Create(STRING_LITERAL297);
                    	adaptor.AddChild(root_0, STRING_LITERAL297_tree);
                    	}
                    
                    }
                    break;
                case 3 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1442:4: TRUE
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	TRUE298 = (CommonToken)input.LT(1);
                    	Match(input,TRUE,FOLLOW_TRUE_in_constant5285); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	TRUE298_tree = (CommonTree)adaptor.Create(TRUE298);
                    	adaptor.AddChild(root_0, TRUE298_tree);
                    	}
                    
                    }
                    break;
                case 4 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1443:4: FALSE
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	FALSE299 = (CommonToken)input.LT(1);
                    	Match(input,FALSE,FOLLOW_FALSE_in_constant5290); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	FALSE299_tree = (CommonTree)adaptor.Create(FALSE299);
                    	adaptor.AddChild(root_0, FALSE299_tree);
                    	}
                    
                    }
                    break;
                case 5 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1444:4: NULL
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	NULL300 = (CommonToken)input.LT(1);
                    	Match(input,NULL,FOLLOW_NULL_in_constant5295); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	NULL300_tree = (CommonTree)adaptor.Create(NULL300);
                    	adaptor.AddChild(root_0, NULL300_tree);
                    	}
                    
                    }
                    break;
            
            }
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 113, constant_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end constant

    public class number_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start number
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1447:1: number : ( HEX_LITERAL | DECIMAL_LITERAL | OCTAL_LITERAL | FLOAT_LITERAL );
    public number_return number() // throws RecognitionException [1]
    {   
        number_return retval = new number_return();
        retval.start = input.LT(1);
        int number_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken set301 = null;
        
        CommonTree set301_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 114) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1448:4: ( HEX_LITERAL | DECIMAL_LITERAL | OCTAL_LITERAL | FLOAT_LITERAL )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	set301 = (CommonToken)input.LT(1);
            	if ( (input.LA(1) >= HEX_LITERAL && input.LA(1) <= FLOAT_LITERAL) ) 
            	{
            	    input.Consume();
            	    if ( backtracking==0 ) adaptor.AddChild(root_0, adaptor.Create(set301));
            	    errorRecovery = false;failed = false;
            	}
            	else 
            	{
            	    if ( backtracking > 0 ) {failed = true; return retval;}
            	    MismatchedSetException mse =
            	        new MismatchedSetException(null,input);
            	    RecoverFromMismatchedSet(input,mse,FOLLOW_set_in_number0);    throw mse;
            	}

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 114, number_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end number

    public class newFullExpression_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start newFullExpression
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1455:1: newFullExpression : n= NEW fullNewSubexpression arguments ;
    public newFullExpression_return newFullExpression() // throws RecognitionException [1]
    {   
        newFullExpression_return retval = new newFullExpression_return();
        retval.start = input.LT(1);
        int newFullExpression_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken n = null;
        fullNewSubexpression_return fullNewSubexpression302 = null;

        arguments_return arguments303 = null;
        
        
        CommonTree n_tree=null;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 115) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1456:4: (n= NEW fullNewSubexpression arguments )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1456:4: n= NEW fullNewSubexpression arguments
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	n = (CommonToken)input.LT(1);
            	Match(input,NEW,FOLLOW_NEW_in_newFullExpression5337); if (failed) return retval;
            	if ( backtracking==0 ) {
            	n_tree = (CommonTree)adaptor.Create(n);
            	root_0 = (CommonTree)adaptor.BecomeRoot(n_tree, root_0);
            	}
            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append(n.Text + " "); 
            	}
            	PushFollow(FOLLOW_fullNewSubexpression_in_newFullExpression5348);
            	fullNewSubexpression302 = fullNewSubexpression();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, fullNewSubexpression302.Tree);
            	if ( backtracking == 0 ) 
            	{
            	   
            	}
            	PushFollow(FOLLOW_arguments_in_newFullExpression5354);
            	arguments303 = arguments();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, arguments303.Tree);
            	if ( backtracking == 0 ) 
            	{
            	   
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 115, newFullExpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end newFullExpression

    public class fullNewSubexpression_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start fullNewSubexpression
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1461:1: fullNewSubexpression : ( primaryExpression -> primaryExpression ) ( DOT qualifiedIdent -> ^( DOT $fullNewSubexpression qualifiedIdent ) | brackets -> ^( ARRAY_ACC $fullNewSubexpression brackets ) )* ;
    public fullNewSubexpression_return fullNewSubexpression() // throws RecognitionException [1]
    {   
        fullNewSubexpression_return retval = new fullNewSubexpression_return();
        retval.start = input.LT(1);
        int fullNewSubexpression_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken DOT305 = null;
        primaryExpression_return primaryExpression304 = null;

        qualifiedIdent_return qualifiedIdent306 = null;

        brackets_return brackets307 = null;
        
        
        CommonTree DOT305_tree=null;
        RewriteRuleTokenStream stream_DOT = new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_primaryExpression = new RewriteRuleSubtreeStream(adaptor,"rule primaryExpression");
        RewriteRuleSubtreeStream stream_brackets = new RewriteRuleSubtreeStream(adaptor,"rule brackets");
        RewriteRuleSubtreeStream stream_qualifiedIdent = new RewriteRuleSubtreeStream(adaptor,"rule qualifiedIdent");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 116) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1462:4: ( ( primaryExpression -> primaryExpression ) ( DOT qualifiedIdent -> ^( DOT $fullNewSubexpression qualifiedIdent ) | brackets -> ^( ARRAY_ACC $fullNewSubexpression brackets ) )* )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1462:4: ( primaryExpression -> primaryExpression ) ( DOT qualifiedIdent -> ^( DOT $fullNewSubexpression qualifiedIdent ) | brackets -> ^( ARRAY_ACC $fullNewSubexpression brackets ) )*
            {
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1462:4: ( primaryExpression -> primaryExpression )
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1462:6: primaryExpression
            	{
            		PushFollow(FOLLOW_primaryExpression_in_fullNewSubexpression5372);
            		primaryExpression304 = primaryExpression();
            		followingStackPointer_--;
            		if (failed) return retval;
            		if ( backtracking==0 ) stream_primaryExpression.Add(primaryExpression304.Tree);
            		
            		// AST REWRITE
            		// elements:          primaryExpression
            		// token labels:      
            		// rule labels:       retval
            		// token list labels: 
            		// rule list labels:  
            		if ( backtracking==0 ) {
            		retval.tree = root_0;
            		RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            		
            		root_0 = (CommonTree)adaptor.GetNilNode();
            		// 1462:24: -> primaryExpression
            		{
            		    adaptor.AddChild(root_0, stream_primaryExpression.Next());
            		
            		}
            		
            		}
            	
            	}

            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1464:3: ( DOT qualifiedIdent -> ^( DOT $fullNewSubexpression qualifiedIdent ) | brackets -> ^( ARRAY_ACC $fullNewSubexpression brackets ) )*
            	do 
            	{
            	    int alt83 = 3;
            	    int LA83_0 = input.LA(1);
            	    
            	    if ( (LA83_0 == DOT) )
            	    {
            	        alt83 = 1;
            	    }
            	    else if ( (LA83_0 == LBRACK) )
            	    {
            	        alt83 = 2;
            	    }
            	    
            	
            	    switch (alt83) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1464:5: DOT qualifiedIdent
            			    {
            			    	DOT305 = (CommonToken)input.LT(1);
            			    	Match(input,DOT,FOLLOW_DOT_in_fullNewSubexpression5386); if (failed) return retval;
            			    	if ( backtracking==0 ) stream_DOT.Add(DOT305);

            			    	if ( backtracking == 0 ) 
            			    	{
            			    	   buffer.Append("."); 
            			    	}
            			    	PushFollow(FOLLOW_qualifiedIdent_in_fullNewSubexpression5391);
            			    	qualifiedIdent306 = qualifiedIdent();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) stream_qualifiedIdent.Add(qualifiedIdent306.Tree);
            			    	
            			    	// AST REWRITE
            			    	// elements:          qualifiedIdent, fullNewSubexpression, DOT
            			    	// token labels:      
            			    	// rule labels:       retval
            			    	// token list labels: 
            			    	// rule list labels:  
            			    	if ( backtracking==0 ) {
            			    	retval.tree = root_0;
            			    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            			    	
            			    	root_0 = (CommonTree)adaptor.GetNilNode();
            			    	// 1464:49: -> ^( DOT $fullNewSubexpression qualifiedIdent )
            			    	{
            			    	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1464:52: ^( DOT $fullNewSubexpression qualifiedIdent )
            			    	    {
            			    	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            			    	    root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.Next(), root_1);
            			    	    
            			    	    adaptor.AddChild(root_1, stream_retval.Next());
            			    	    adaptor.AddChild(root_1, stream_qualifiedIdent.Next());
            			    	    
            			    	    adaptor.AddChild(root_0, root_1);
            			    	    }
            			    	
            			    	}
            			    	
            			    	}
            			    
            			    }
            			    break;
            			case 2 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1465:5: brackets
            			    {
            			    	PushFollow(FOLLOW_brackets_in_fullNewSubexpression5408);
            			    	brackets307 = brackets();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) stream_brackets.Add(brackets307.Tree);
            			    	if ( backtracking == 0 ) 
            			    	{
            			    	   
            			    	}
            			    	
            			    	// AST REWRITE
            			    	// elements:          fullNewSubexpression, brackets
            			    	// token labels:      
            			    	// rule labels:       retval
            			    	// token list labels: 
            			    	// rule list labels:  
            			    	if ( backtracking==0 ) {
            			    	retval.tree = root_0;
            			    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            			    	
            			    	root_0 = (CommonTree)adaptor.GetNilNode();
            			    	// 1465:21: -> ^( ARRAY_ACC $fullNewSubexpression brackets )
            			    	{
            			    	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1465:24: ^( ARRAY_ACC $fullNewSubexpression brackets )
            			    	    {
            			    	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            			    	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(ARRAY_ACC, "ARRAY_ACC"), root_1);
            			    	    
            			    	    adaptor.AddChild(root_1, stream_retval.Next());
            			    	    adaptor.AddChild(root_1, stream_brackets.Next());
            			    	    
            			    	    adaptor.AddChild(root_0, root_1);
            			    	    }
            			    	
            			    	}
            			    	
            			    	}
            			    
            			    }
            			    break;
            	
            			default:
            			    goto loop83;
            	    }
            	} while (true);
            	
            	loop83:
            		;	// Stops C# compiler whinging that label 'loop83' has no statements

            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 116, fullNewSubexpression_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end fullNewSubexpression

    public class comments_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start comments
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1470:1: comments : ( comment )+ -> ^( COMMENT_LIST ( comment )+ ) ;
    public comments_return comments() // throws RecognitionException [1]
    {   
        comments_return retval = new comments_return();
        retval.start = input.LT(1);
        int comments_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        comment_return comment308 = null;
        
        
        RewriteRuleSubtreeStream stream_comment = new RewriteRuleSubtreeStream(adaptor,"rule comment");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 117) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1478:4: ( ( comment )+ -> ^( COMMENT_LIST ( comment )+ ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1478:4: ( comment )+
            {
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1478:4: ( comment )+
            	int cnt84 = 0;
            	do 
            	{
            	    int alt84 = 2;
            	    int LA84_0 = input.LA(1);
            	    
            	    if ( (LA84_0 == SL_COMMENT) )
            	    {
            	        int LA84_15 = input.LA(2);
            	        
            	        if ( (synpred172()) )
            	        {
            	            alt84 = 1;
            	        }
            	        
            	    
            	    }
            	    else if ( (LA84_0 == ML_COMMENT) )
            	    {
            	        int LA84_16 = input.LA(2);
            	        
            	        if ( (synpred172()) )
            	        {
            	            alt84 = 1;
            	        }
            	        
            	    
            	    }
            	    
            	
            	    switch (alt84) 
            		{
            			case 1 :
            			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:0:0: comment
            			    {
            			    	PushFollow(FOLLOW_comment_in_comments5450);
            			    	comment308 = comment();
            			    	followingStackPointer_--;
            			    	if (failed) return retval;
            			    	if ( backtracking==0 ) stream_comment.Add(comment308.Tree);
            			    
            			    }
            			    break;
            	
            			default:
            			    if ( cnt84 >= 1 ) goto loop84;
            			    if ( backtracking > 0 ) {failed = true; return retval;}
            		            EarlyExitException eee =
            		                new EarlyExitException(84, input);
            		            throw eee;
            	    }
            	    cnt84++;
            	} while (true);
            	
            	loop84:
            		;	// Stops C# compiler whinging that label 'loop84' has no statements

            	
            	// AST REWRITE
            	// elements:          comment
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 1478:13: -> ^( COMMENT_LIST ( comment )+ )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1478:16: ^( COMMENT_LIST ( comment )+ )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(COMMENT_LIST, "COMMENT_LIST"), root_1);
            	    
            	    if ( !(stream_comment.HasNext()) ) {
            	        throw new RewriteEarlyExitException();
            	    }
            	    while ( stream_comment.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_comment.Next());
            	    
            	    }
            	    stream_comment.Reset();
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 117, comments_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end comments

    public class comment_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start comment
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1481:1: comment : ( singleCommentStatement ( comment )* -> ^( COMMENT_ENTRY singleCommentStatement ) ( comment )* | multiCommentStatement ( comment )* -> ^( COMMENT_ENTRY multiCommentStatement ) ( comment )* );
    public comment_return comment() // throws RecognitionException [1]
    {   
        comment_return retval = new comment_return();
        retval.start = input.LT(1);
        int comment_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        singleCommentStatement_return singleCommentStatement309 = null;

        comment_return comment310 = null;

        multiCommentStatement_return multiCommentStatement311 = null;

        comment_return comment312 = null;
        
        
        RewriteRuleSubtreeStream stream_multiCommentStatement = new RewriteRuleSubtreeStream(adaptor,"rule multiCommentStatement");
        RewriteRuleSubtreeStream stream_singleCommentStatement = new RewriteRuleSubtreeStream(adaptor,"rule singleCommentStatement");
        RewriteRuleSubtreeStream stream_comment = new RewriteRuleSubtreeStream(adaptor,"rule comment");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 118) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1482:4: ( singleCommentStatement ( comment )* -> ^( COMMENT_ENTRY singleCommentStatement ) ( comment )* | multiCommentStatement ( comment )* -> ^( COMMENT_ENTRY multiCommentStatement ) ( comment )* )
            int alt87 = 2;
            int LA87_0 = input.LA(1);
            
            if ( (LA87_0 == SL_COMMENT) )
            {
                alt87 = 1;
            }
            else if ( (LA87_0 == ML_COMMENT) )
            {
                alt87 = 2;
            }
            else 
            {
                if ( backtracking > 0 ) {failed = true; return retval;}
                NoViableAltException nvae_d87s0 =
                    new NoViableAltException("1481:1: comment : ( singleCommentStatement ( comment )* -> ^( COMMENT_ENTRY singleCommentStatement ) ( comment )* | multiCommentStatement ( comment )* -> ^( COMMENT_ENTRY multiCommentStatement ) ( comment )* );", 87, 0, input);
            
                throw nvae_d87s0;
            }
            switch (alt87) 
            {
                case 1 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1482:4: singleCommentStatement ( comment )*
                    {
                    	PushFollow(FOLLOW_singleCommentStatement_in_comment5471);
                    	singleCommentStatement309 = singleCommentStatement();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) stream_singleCommentStatement.Add(singleCommentStatement309.Tree);
                    	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1482:27: ( comment )*
                    	do 
                    	{
                    	    int alt85 = 2;
                    	    int LA85_0 = input.LA(1);
                    	    
                    	    if ( (LA85_0 == SL_COMMENT) )
                    	    {
                    	        int LA85_15 = input.LA(2);
                    	        
                    	        if ( (synpred173()) )
                    	        {
                    	            alt85 = 1;
                    	        }
                    	        
                    	    
                    	    }
                    	    else if ( (LA85_0 == ML_COMMENT) )
                    	    {
                    	        int LA85_16 = input.LA(2);
                    	        
                    	        if ( (synpred173()) )
                    	        {
                    	            alt85 = 1;
                    	        }
                    	        
                    	    
                    	    }
                    	    
                    	
                    	    switch (alt85) 
                    		{
                    			case 1 :
                    			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:0:0: comment
                    			    {
                    			    	PushFollow(FOLLOW_comment_in_comment5473);
                    			    	comment310 = comment();
                    			    	followingStackPointer_--;
                    			    	if (failed) return retval;
                    			    	if ( backtracking==0 ) stream_comment.Add(comment310.Tree);
                    			    
                    			    }
                    			    break;
                    	
                    			default:
                    			    goto loop85;
                    	    }
                    	} while (true);
                    	
                    	loop85:
                    		;	// Stops C# compiler whinging that label 'loop85' has no statements

                    	
                    	// AST REWRITE
                    	// elements:          comment, singleCommentStatement
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( backtracking==0 ) {
                    	retval.tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
                    	
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 1482:36: -> ^( COMMENT_ENTRY singleCommentStatement ) ( comment )*
                    	{
                    	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1482:39: ^( COMMENT_ENTRY singleCommentStatement )
                    	    {
                    	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                    	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(COMMENT_ENTRY, "COMMENT_ENTRY"), root_1);
                    	    
                    	    adaptor.AddChild(root_1, stream_singleCommentStatement.Next());
                    	    
                    	    adaptor.AddChild(root_0, root_1);
                    	    }
                    	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1482:79: ( comment )*
                    	    while ( stream_comment.HasNext() )
                    	    {
                    	        adaptor.AddChild(root_0, stream_comment.Next());
                    	    
                    	    }
                    	    stream_comment.Reset();
                    	
                    	}
                    	
                    	}
                    
                    }
                    break;
                case 2 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1483:4: multiCommentStatement ( comment )*
                    {
                    	PushFollow(FOLLOW_multiCommentStatement_in_comment5490);
                    	multiCommentStatement311 = multiCommentStatement();
                    	followingStackPointer_--;
                    	if (failed) return retval;
                    	if ( backtracking==0 ) stream_multiCommentStatement.Add(multiCommentStatement311.Tree);
                    	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1483:27: ( comment )*
                    	do 
                    	{
                    	    int alt86 = 2;
                    	    int LA86_0 = input.LA(1);
                    	    
                    	    if ( (LA86_0 == SL_COMMENT) )
                    	    {
                    	        int LA86_15 = input.LA(2);
                    	        
                    	        if ( (synpred175()) )
                    	        {
                    	            alt86 = 1;
                    	        }
                    	        
                    	    
                    	    }
                    	    else if ( (LA86_0 == ML_COMMENT) )
                    	    {
                    	        int LA86_16 = input.LA(2);
                    	        
                    	        if ( (synpred175()) )
                    	        {
                    	            alt86 = 1;
                    	        }
                    	        
                    	    
                    	    }
                    	    
                    	
                    	    switch (alt86) 
                    		{
                    			case 1 :
                    			    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:0:0: comment
                    			    {
                    			    	PushFollow(FOLLOW_comment_in_comment5493);
                    			    	comment312 = comment();
                    			    	followingStackPointer_--;
                    			    	if (failed) return retval;
                    			    	if ( backtracking==0 ) stream_comment.Add(comment312.Tree);
                    			    
                    			    }
                    			    break;
                    	
                    			default:
                    			    goto loop86;
                    	    }
                    	} while (true);
                    	
                    	loop86:
                    		;	// Stops C# compiler whinging that label 'loop86' has no statements

                    	
                    	// AST REWRITE
                    	// elements:          comment, multiCommentStatement
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( backtracking==0 ) {
                    	retval.tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
                    	
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 1483:36: -> ^( COMMENT_ENTRY multiCommentStatement ) ( comment )*
                    	{
                    	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1483:39: ^( COMMENT_ENTRY multiCommentStatement )
                    	    {
                    	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                    	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(COMMENT_ENTRY, "COMMENT_ENTRY"), root_1);
                    	    
                    	    adaptor.AddChild(root_1, stream_multiCommentStatement.Next());
                    	    
                    	    adaptor.AddChild(root_0, root_1);
                    	    }
                    	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1483:78: ( comment )*
                    	    while ( stream_comment.HasNext() )
                    	    {
                    	        adaptor.AddChild(root_0, stream_comment.Next());
                    	    
                    	    }
                    	    stream_comment.Reset();
                    	
                    	}
                    	
                    	}
                    
                    }
                    break;
            
            }
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 118, comment_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end comment

    public class singleCommentStatement_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start singleCommentStatement
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1486:1: singleCommentStatement : SL_COMMENT -> ^( SINGLELINE_COMMENT SL_COMMENT ) ;
    public singleCommentStatement_return singleCommentStatement() // throws RecognitionException [1]
    {   
        singleCommentStatement_return retval = new singleCommentStatement_return();
        retval.start = input.LT(1);
        int singleCommentStatement_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken SL_COMMENT313 = null;
        
        CommonTree SL_COMMENT313_tree=null;
        RewriteRuleTokenStream stream_SL_COMMENT = new RewriteRuleTokenStream(adaptor,"token SL_COMMENT");
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 119) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1487:4: ( SL_COMMENT -> ^( SINGLELINE_COMMENT SL_COMMENT ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1487:4: SL_COMMENT
            {
            	SL_COMMENT313 = (CommonToken)input.LT(1);
            	Match(input,SL_COMMENT,FOLLOW_SL_COMMENT_in_singleCommentStatement5516); if (failed) return retval;
            	if ( backtracking==0 ) stream_SL_COMMENT.Add(SL_COMMENT313);

            	
            	// AST REWRITE
            	// elements:          SL_COMMENT
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 1487:15: -> ^( SINGLELINE_COMMENT SL_COMMENT )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1487:18: ^( SINGLELINE_COMMENT SL_COMMENT )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(SINGLELINE_COMMENT, "SINGLELINE_COMMENT"), root_1);
            	    
            	    adaptor.AddChild(root_1, stream_SL_COMMENT.Next());
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 119, singleCommentStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end singleCommentStatement

    public class multiCommentStatement_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start multiCommentStatement
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1490:1: multiCommentStatement : ML_COMMENT -> ^( MULTILINE_COMMENT ML_COMMENT ) ;
    public multiCommentStatement_return multiCommentStatement() // throws RecognitionException [1]
    {   
        multiCommentStatement_return retval = new multiCommentStatement_return();
        retval.start = input.LT(1);
        int multiCommentStatement_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken ML_COMMENT314 = null;
        
        CommonTree ML_COMMENT314_tree=null;
        RewriteRuleTokenStream stream_ML_COMMENT = new RewriteRuleTokenStream(adaptor,"token ML_COMMENT");
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 120) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1491:4: ( ML_COMMENT -> ^( MULTILINE_COMMENT ML_COMMENT ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1491:4: ML_COMMENT
            {
            	ML_COMMENT314 = (CommonToken)input.LT(1);
            	Match(input,ML_COMMENT,FOLLOW_ML_COMMENT_in_multiCommentStatement5536); if (failed) return retval;
            	if ( backtracking==0 ) stream_ML_COMMENT.Add(ML_COMMENT314);

            	
            	// AST REWRITE
            	// elements:          ML_COMMENT
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 1491:15: -> ^( MULTILINE_COMMENT ML_COMMENT )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1491:18: ^( MULTILINE_COMMENT ML_COMMENT )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(MULTILINE_COMMENT, "MULTILINE_COMMENT"), root_1);
            	    
            	    adaptor.AddChild(root_1, stream_ML_COMMENT.Next());
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 120, multiCommentStatement_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end multiCommentStatement

    public class brackets_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start brackets
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1494:1: brackets : LBRACK expressionList RBRACK ;
    public brackets_return brackets() // throws RecognitionException [1]
    {   
        brackets_return retval = new brackets_return();
        retval.start = input.LT(1);
        int brackets_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken LBRACK315 = null;
        CommonToken RBRACK317 = null;
        expressionList_return expressionList316 = null;
        
        
        CommonTree LBRACK315_tree=null;
        CommonTree RBRACK317_tree=null;
    
        
        	((InOperator_scope)InOperator_stack.Peek()).allowed =  true;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 121) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1501:4: ( LBRACK expressionList RBRACK )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1501:4: LBRACK expressionList RBRACK
            {
            	root_0 = (CommonTree)adaptor.GetNilNode();
            
            	LBRACK315 = (CommonToken)input.LT(1);
            	Match(input,LBRACK,FOLLOW_LBRACK_in_brackets5564); if (failed) return retval;
            	if ( backtracking==0 ) {
            	LBRACK315_tree = (CommonTree)adaptor.Create(LBRACK315);
            	adaptor.AddChild(root_0, LBRACK315_tree);
            	}
            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append("["); 
            	}
            	PushFollow(FOLLOW_expressionList_in_brackets5572);
            	expressionList316 = expressionList();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) adaptor.AddChild(root_0, expressionList316.Tree);
            	RBRACK317 = (CommonToken)input.LT(1);
            	Match(input,RBRACK,FOLLOW_RBRACK_in_brackets5577); if (failed) return retval;
            	if ( backtracking==0 ) {
            	RBRACK317_tree = (CommonTree)adaptor.Create(RBRACK317);
            	adaptor.AddChild(root_0, RBRACK317_tree);
            	}
            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append("]"); 
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 121, brackets_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end brackets

    public class encapsulatedExpression_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start encapsulatedExpression
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1506:1: encapsulatedExpression : LPAREN assignmentExpression RPAREN -> ^( ENCPS_EXPR assignmentExpression ) ;
    public encapsulatedExpression_return encapsulatedExpression() // throws RecognitionException [1]
    {   
        InOperator_stack.Push(new InOperator_scope());
    
        encapsulatedExpression_return retval = new encapsulatedExpression_return();
        retval.start = input.LT(1);
        int encapsulatedExpression_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken LPAREN318 = null;
        CommonToken RPAREN320 = null;
        assignmentExpression_return assignmentExpression319 = null;
        
        
        CommonTree LPAREN318_tree=null;
        CommonTree RPAREN320_tree=null;
        RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_assignmentExpression = new RewriteRuleSubtreeStream(adaptor,"rule assignmentExpression");
        
        	((InOperator_scope)InOperator_stack.Peek()).allowed =  true;
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 122) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1511:4: ( LPAREN assignmentExpression RPAREN -> ^( ENCPS_EXPR assignmentExpression ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1511:4: LPAREN assignmentExpression RPAREN
            {
            	LPAREN318 = (CommonToken)input.LT(1);
            	Match(input,LPAREN,FOLLOW_LPAREN_in_encapsulatedExpression5602); if (failed) return retval;
            	if ( backtracking==0 ) stream_LPAREN.Add(LPAREN318);

            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append("("); 
            	}
            	PushFollow(FOLLOW_assignmentExpression_in_encapsulatedExpression5612);
            	assignmentExpression319 = assignmentExpression();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_assignmentExpression.Add(assignmentExpression319.Tree);
            	RPAREN320 = (CommonToken)input.LT(1);
            	Match(input,RPAREN,FOLLOW_RPAREN_in_encapsulatedExpression5617); if (failed) return retval;
            	if ( backtracking==0 ) stream_RPAREN.Add(RPAREN320);

            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append(")"); 
            	}
            	
            	// AST REWRITE
            	// elements:          assignmentExpression
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 1514:3: -> ^( ENCPS_EXPR assignmentExpression )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1514:6: ^( ENCPS_EXPR assignmentExpression )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(ENCPS_EXPR, "ENCPS_EXPR"), root_1);
            	    
            	    adaptor.AddChild(root_1, stream_assignmentExpression.Next());
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 122, encapsulatedExpression_StartIndex); 
            }
            InOperator_stack.Pop();
    
        }
        return retval;
    }
    // $ANTLR end encapsulatedExpression

    public class functionDefinition_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start functionDefinition
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1518:1: functionDefinition : f= FUNCTION parameterDeclarationList (type_exp= typeExpression )? block -> ^( FUNC_DEF parameterDeclarationList ( typeExpression )? block ) ;
    public functionDefinition_return functionDefinition() // throws RecognitionException [1]
    {   
        functionDefinition_return retval = new functionDefinition_return();
        retval.start = input.LT(1);
        int functionDefinition_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken f = null;
        typeExpression_return type_exp = null;

        parameterDeclarationList_return parameterDeclarationList321 = null;

        block_return block322 = null;
        
        
        CommonTree f_tree=null;
        RewriteRuleTokenStream stream_FUNCTION = new RewriteRuleTokenStream(adaptor,"token FUNCTION");
        RewriteRuleSubtreeStream stream_parameterDeclarationList = new RewriteRuleSubtreeStream(adaptor,"rule parameterDeclarationList");
        RewriteRuleSubtreeStream stream_block = new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_typeExpression = new RewriteRuleSubtreeStream(adaptor,"rule typeExpression");
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 123) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1519:4: (f= FUNCTION parameterDeclarationList (type_exp= typeExpression )? block -> ^( FUNC_DEF parameterDeclarationList ( typeExpression )? block ) )
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1519:4: f= FUNCTION parameterDeclarationList (type_exp= typeExpression )? block
            {
            	f = (CommonToken)input.LT(1);
            	Match(input,FUNCTION,FOLLOW_FUNCTION_in_functionDefinition5647); if (failed) return retval;
            	if ( backtracking==0 ) stream_FUNCTION.Add(f);

            	if ( backtracking == 0 ) 
            	{
            	   buffer.Append(f.Text + (options.SpaceBeforeMethodDef ? " " : "")); 
            	}
            	PushFollow(FOLLOW_parameterDeclarationList_in_functionDefinition5654);
            	parameterDeclarationList321 = parameterDeclarationList();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_parameterDeclarationList.Add(parameterDeclarationList321.Tree);
            	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1521:11: (type_exp= typeExpression )?
            	int alt88 = 2;
            	int LA88_0 = input.LA(1);
            	
            	if ( (LA88_0 == COLON) )
            	{
            	    alt88 = 1;
            	}
            	switch (alt88) 
            	{
            	    case 1 :
            	        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:0:0: type_exp= typeExpression
            	        {
            	        	PushFollow(FOLLOW_typeExpression_in_functionDefinition5661);
            	        	type_exp = typeExpression();
            	        	followingStackPointer_--;
            	        	if (failed) return retval;
            	        	if ( backtracking==0 ) stream_typeExpression.Add(type_exp.Tree);
            	        
            	        }
            	        break;
            	
            	}

            	if ( backtracking == 0 ) 
            	{
            	  
            	  										if(options.NewlineAfterMethod) buffer.Append(NewLine + tab);
            	  										buffer.Append("{");
            	  										CurrentTab++;
            	  									
            	}
            	PushFollow(FOLLOW_block_in_functionDefinition5677);
            	block322 = block();
            	followingStackPointer_--;
            	if (failed) return retval;
            	if ( backtracking==0 ) stream_block.Add(block322.Tree);
            	if ( backtracking == 0 ) 
            	{
            	  
            	  										CurrentTab--;
            	  										buffer.Append(NewLine + tab);
            	  										buffer.Append("}");
            	  										buffer.Append(NewLine + tab);
            	  									
            	}
            	
            	// AST REWRITE
            	// elements:          parameterDeclarationList, typeExpression, block
            	// token labels:      
            	// rule labels:       retval
            	// token list labels: 
            	// rule list labels:  
            	if ( backtracking==0 ) {
            	retval.tree = root_0;
            	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
            	
            	root_0 = (CommonTree)adaptor.GetNilNode();
            	// 1534:3: -> ^( FUNC_DEF parameterDeclarationList ( typeExpression )? block )
            	{
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1534:6: ^( FUNC_DEF parameterDeclarationList ( typeExpression )? block )
            	    {
            	    CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
            	    root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(FUNC_DEF, "FUNC_DEF"), root_1);
            	    
            	    adaptor.AddChild(root_1, stream_parameterDeclarationList.Next());
            	    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1534:42: ( typeExpression )?
            	    if ( stream_typeExpression.HasNext() )
            	    {
            	        adaptor.AddChild(root_1, stream_typeExpression.Next());
            	    
            	    }
            	    stream_typeExpression.Reset();
            	    adaptor.AddChild(root_1, stream_block.Next());
            	    
            	    adaptor.AddChild(root_0, root_1);
            	    }
            	
            	}
            	
            	}
            
            }
    
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 123, functionDefinition_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end functionDefinition

    public class ident_return : ParserRuleReturnScope 
    {
        internal CommonTree tree;
        override public object Tree
        {
        	get { return tree; }
        }
    };
    
    // $ANTLR start ident
    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1538:1: ident : ( IDENT | i= USE -> IDENT[$i] | i= XML -> IDENT[$i] | i= DYNAMIC -> IDENT[$i] | i= IS -> IDENT[$i] | i= AS -> IDENT[$i] | i= GET -> IDENT[$i] | i= SET -> IDENT[$i] );
    public ident_return ident() // throws RecognitionException [1]
    {   
        ident_return retval = new ident_return();
        retval.start = input.LT(1);
        int ident_StartIndex = input.Index();
        CommonTree root_0 = null;
    
        CommonToken i = null;
        CommonToken IDENT323 = null;
        
        CommonTree i_tree=null;
        CommonTree IDENT323_tree=null;
        RewriteRuleTokenStream stream_GET = new RewriteRuleTokenStream(adaptor,"token GET");
        RewriteRuleTokenStream stream_XML = new RewriteRuleTokenStream(adaptor,"token XML");
        RewriteRuleTokenStream stream_AS = new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_DYNAMIC = new RewriteRuleTokenStream(adaptor,"token DYNAMIC");
        RewriteRuleTokenStream stream_SET = new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_IS = new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_USE = new RewriteRuleTokenStream(adaptor,"token USE");
    
        try 
    	{
    	    if ( (backtracking > 0) && AlreadyParsedRule(input, 124) ) 
    	    {
    	    	return retval; 
    	    }
            // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1539:4: ( IDENT | i= USE -> IDENT[$i] | i= XML -> IDENT[$i] | i= DYNAMIC -> IDENT[$i] | i= IS -> IDENT[$i] | i= AS -> IDENT[$i] | i= GET -> IDENT[$i] | i= SET -> IDENT[$i] )
            int alt89 = 8;
            switch ( input.LA(1) ) 
            {
            case IDENT:
            	{
                alt89 = 1;
                }
                break;
            case USE:
            	{
                alt89 = 2;
                }
                break;
            case XML:
            	{
                alt89 = 3;
                }
                break;
            case DYNAMIC:
            	{
                alt89 = 4;
                }
                break;
            case IS:
            	{
                alt89 = 5;
                }
                break;
            case AS:
            	{
                alt89 = 6;
                }
                break;
            case GET:
            	{
                alt89 = 7;
                }
                break;
            case SET:
            	{
                alt89 = 8;
                }
                break;
            	default:
            	    if ( backtracking > 0 ) {failed = true; return retval;}
            	    NoViableAltException nvae_d89s0 =
            	        new NoViableAltException("1538:1: ident : ( IDENT | i= USE -> IDENT[$i] | i= XML -> IDENT[$i] | i= DYNAMIC -> IDENT[$i] | i= IS -> IDENT[$i] | i= AS -> IDENT[$i] | i= GET -> IDENT[$i] | i= SET -> IDENT[$i] );", 89, 0, input);
            
            	    throw nvae_d89s0;
            }
            
            switch (alt89) 
            {
                case 1 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1539:4: IDENT
                    {
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    
                    	IDENT323 = (CommonToken)input.LT(1);
                    	Match(input,IDENT,FOLLOW_IDENT_in_ident5715); if (failed) return retval;
                    	if ( backtracking==0 ) {
                    	IDENT323_tree = (CommonTree)adaptor.Create(IDENT323);
                    	adaptor.AddChild(root_0, IDENT323_tree);
                    	}
                    
                    }
                    break;
                case 2 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1540:4: i= USE
                    {
                    	i = (CommonToken)input.LT(1);
                    	Match(input,USE,FOLLOW_USE_in_ident5722); if (failed) return retval;
                    	if ( backtracking==0 ) stream_USE.Add(i);

                    	
                    	// AST REWRITE
                    	// elements:          
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( backtracking==0 ) {
                    	retval.tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
                    	
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 1540:10: -> IDENT[$i]
                    	{
                    	    adaptor.AddChild(root_0, adaptor.Create(IDENT, i));
                    	
                    	}
                    	
                    	}
                    
                    }
                    break;
                case 3 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1541:4: i= XML
                    {
                    	i = (CommonToken)input.LT(1);
                    	Match(input,XML,FOLLOW_XML_in_ident5734); if (failed) return retval;
                    	if ( backtracking==0 ) stream_XML.Add(i);

                    	
                    	// AST REWRITE
                    	// elements:          
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( backtracking==0 ) {
                    	retval.tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
                    	
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 1541:10: -> IDENT[$i]
                    	{
                    	    adaptor.AddChild(root_0, adaptor.Create(IDENT, i));
                    	
                    	}
                    	
                    	}
                    
                    }
                    break;
                case 4 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1542:4: i= DYNAMIC
                    {
                    	i = (CommonToken)input.LT(1);
                    	Match(input,DYNAMIC,FOLLOW_DYNAMIC_in_ident5746); if (failed) return retval;
                    	if ( backtracking==0 ) stream_DYNAMIC.Add(i);

                    	
                    	// AST REWRITE
                    	// elements:          
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( backtracking==0 ) {
                    	retval.tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
                    	
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 1542:14: -> IDENT[$i]
                    	{
                    	    adaptor.AddChild(root_0, adaptor.Create(IDENT, i));
                    	
                    	}
                    	
                    	}
                    
                    }
                    break;
                case 5 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1543:4: i= IS
                    {
                    	i = (CommonToken)input.LT(1);
                    	Match(input,IS,FOLLOW_IS_in_ident5758); if (failed) return retval;
                    	if ( backtracking==0 ) stream_IS.Add(i);

                    	
                    	// AST REWRITE
                    	// elements:          
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( backtracking==0 ) {
                    	retval.tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
                    	
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 1543:9: -> IDENT[$i]
                    	{
                    	    adaptor.AddChild(root_0, adaptor.Create(IDENT, i));
                    	
                    	}
                    	
                    	}
                    
                    }
                    break;
                case 6 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1544:4: i= AS
                    {
                    	i = (CommonToken)input.LT(1);
                    	Match(input,AS,FOLLOW_AS_in_ident5770); if (failed) return retval;
                    	if ( backtracking==0 ) stream_AS.Add(i);

                    	
                    	// AST REWRITE
                    	// elements:          
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( backtracking==0 ) {
                    	retval.tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
                    	
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 1544:9: -> IDENT[$i]
                    	{
                    	    adaptor.AddChild(root_0, adaptor.Create(IDENT, i));
                    	
                    	}
                    	
                    	}
                    
                    }
                    break;
                case 7 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1545:4: i= GET
                    {
                    	i = (CommonToken)input.LT(1);
                    	Match(input,GET,FOLLOW_GET_in_ident5782); if (failed) return retval;
                    	if ( backtracking==0 ) stream_GET.Add(i);

                    	
                    	// AST REWRITE
                    	// elements:          
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( backtracking==0 ) {
                    	retval.tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
                    	
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 1545:10: -> IDENT[$i]
                    	{
                    	    adaptor.AddChild(root_0, adaptor.Create(IDENT, i));
                    	
                    	}
                    	
                    	}
                    
                    }
                    break;
                case 8 :
                    // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1546:4: i= SET
                    {
                    	i = (CommonToken)input.LT(1);
                    	Match(input,SET,FOLLOW_SET_in_ident5794); if (failed) return retval;
                    	if ( backtracking==0 ) stream_SET.Add(i);

                    	
                    	// AST REWRITE
                    	// elements:          
                    	// token labels:      
                    	// rule labels:       retval
                    	// token list labels: 
                    	// rule list labels:  
                    	if ( backtracking==0 ) {
                    	retval.tree = root_0;
                    	RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval!=null ? retval.Tree : null));
                    	
                    	root_0 = (CommonTree)adaptor.GetNilNode();
                    	// 1546:10: -> IDENT[$i]
                    	{
                    	    adaptor.AddChild(root_0, adaptor.Create(IDENT, i));
                    	
                    	}
                    	
                    	}
                    
                    }
                    break;
            
            }
            retval.stop = input.LT(-1);
            
            if ( backtracking==0 )
            {	retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
            	adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
            }
        }
         
        	catch (NoViableAltException e)
        	{
        		Debug.WriteLine("NoValiable alt: token=" + e.Token + " (decision=" + e.decisionNumber + " state " + e.stateNumber + ")" + " decision=<<" + e.grammarDecisionDescription + ">>");
        		throw e;
        	}
        	catch (MismatchedTokenException e)
        	{
                Debug.WriteLine("[" + e.Line + ":" + e.Index + "]: Unexpected " + e.UnexpectedType.ToString() +  "( expecting: "+ e.expecting + " )");
                throw e;
        	}
        finally 
    	{
            if ( backtracking > 0 ) 
            {
            	Memoize(input, 124, ident_StartIndex); 
            }
        }
        return retval;
    }
    // $ANTLR end ident

    // $ANTLR start synpred5
    public void synpred5_fragment() //throws RecognitionException
    {   
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:349:4: ( SEMI )
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:349:4: SEMI
        {
        	Match(input,SEMI,FOLLOW_SEMI_in_synpred5575); if (failed) return ;
        
        }
    }
    // $ANTLR end synpred5

    // $ANTLR start synpred36
    public void synpred36_fragment() //throws RecognitionException
    {   
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:646:4: ( LCURLY )
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:646:5: LCURLY
        {
        	Match(input,LCURLY,FOLLOW_LCURLY_in_synpred361953); if (failed) return ;
        
        }
    }
    // $ANTLR end synpred36

    // $ANTLR start synpred38
    public void synpred38_fragment() //throws RecognitionException
    {   
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:648:4: ( expressionStatement )
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:648:4: expressionStatement
        {
        	PushFollow(FOLLOW_expressionStatement_in_synpred381970);
        	expressionStatement();
        	followingStackPointer_--;
        	if (failed) return ;
        
        }
    }
    // $ANTLR end synpred38

    // $ANTLR start synpred51
    public void synpred51_fragment() //throws RecognitionException
    {   
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:698:4: ( ELSE )
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:698:5: ELSE
        {
        	Match(input,ELSE,FOLLOW_ELSE_in_synpred512189); if (failed) return ;
        
        }
    }
    // $ANTLR end synpred51

    // $ANTLR start synpred55
    public void synpred55_fragment() //throws RecognitionException
    {   
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:781:4: ( RETURN expression semi )
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:781:4: RETURN expression semi
        {
        	Match(input,RETURN,FOLLOW_RETURN_in_synpred552372); if (failed) return ;
        	PushFollow(FOLLOW_expression_in_synpred552377);
        	expression();
        	followingStackPointer_--;
        	if (failed) return ;
        	PushFollow(FOLLOW_semi_in_synpred552379);
        	semi();
        	followingStackPointer_--;
        	if (failed) return ;
        
        }
    }
    // $ANTLR end synpred55

    // $ANTLR start synpred59
    public void synpred59_fragment() //throws RecognitionException
    {   
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:849:4: ( forInClauseDecl IN )
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:849:5: forInClauseDecl IN
        {
        	PushFollow(FOLLOW_forInClauseDecl_in_synpred592666);
        	forInClauseDecl();
        	followingStackPointer_--;
        	if (failed) return ;
        	Match(input,IN,FOLLOW_IN_in_synpred592668); if (failed) return ;
        
        }
    }
    // $ANTLR end synpred59

    // $ANTLR start synpred74
    public void synpred74_fragment() //throws RecognitionException
    {   
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1030:5: ( ( annotation ) )
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1030:5: ( annotation )
        {
        	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1030:5: ( annotation )
        	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1030:7: annotation
        	{
        		if ( backtracking == 0 ) 
        		{
        		   buffer.Append(NewLine + tab); 
        		}
        		PushFollow(FOLLOW_annotation_in_synpred743372);
        		annotation();
        		followingStackPointer_--;
        		if (failed) return ;
        	
        	}

        
        }
    }
    // $ANTLR end synpred74

    // $ANTLR start synpred75
    public void synpred75_fragment() //throws RecognitionException
    {   
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1031:6: ( ( includeDirective ) )
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1031:6: ( includeDirective )
        {
        	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1031:6: ( includeDirective )
        	// C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1031:8: includeDirective
        	{
        		if ( backtracking == 0 ) 
        		{
        		   buffer.Append(NewLine + tab); 
        		}
        		PushFollow(FOLLOW_includeDirective_in_synpred753385);
        		includeDirective();
        		followingStackPointer_--;
        		if (failed) return ;
        	
        	}

        
        }
    }
    // $ANTLR end synpred75

    // $ANTLR start synpred79
    public void synpred79_fragment() //throws RecognitionException
    {   
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1059:3: ( ident ASSIGN constant )
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1059:3: ident ASSIGN constant
        {
        	PushFollow(FOLLOW_ident_in_synpred793555);
        	ident();
        	followingStackPointer_--;
        	if (failed) return ;
        	Match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred793557); if (failed) return ;
        	PushFollow(FOLLOW_constant_in_synpred793561);
        	constant();
        	followingStackPointer_--;
        	if (failed) return ;
        
        }
    }
    // $ANTLR end synpred79

    // $ANTLR start synpred80
    public void synpred80_fragment() //throws RecognitionException
    {   
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1060:4: ( ident ASSIGN ident )
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1060:4: ident ASSIGN ident
        {
        	PushFollow(FOLLOW_ident_in_synpred803580);
        	ident();
        	followingStackPointer_--;
        	if (failed) return ;
        	Match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred803582); if (failed) return ;
        	PushFollow(FOLLOW_ident_in_synpred803586);
        	ident();
        	followingStackPointer_--;
        	if (failed) return ;
        
        }
    }
    // $ANTLR end synpred80

    // $ANTLR start synpred94
    public void synpred94_fragment() //throws RecognitionException
    {   
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1122:4: ( COMMA assignmentExpression )
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1122:4: COMMA assignmentExpression
        {
        	Match(input,COMMA,FOLLOW_COMMA_in_synpred943872); if (failed) return ;
        	PushFollow(FOLLOW_assignmentExpression_in_synpred943884);
        	assignmentExpression();
        	followingStackPointer_--;
        	if (failed) return ;
        
        }
    }
    // $ANTLR end synpred94

    // $ANTLR start synpred100
    public void synpred100_fragment() //throws RecognitionException
    {   
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1202:4: ( assignmentOperator )
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1202:5: assignmentOperator
        {
        	PushFollow(FOLLOW_assignmentOperator_in_synpred1004145);
        	assignmentOperator();
        	followingStackPointer_--;
        	if (failed) return ;
        
        }
    }
    // $ANTLR end synpred100

    // $ANTLR start synpred126
    public void synpred126_fragment() //throws RecognitionException
    {   
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1323:4: ( relationalOperator )
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1323:5: relationalOperator
        {
        	PushFollow(FOLLOW_relationalOperator_in_synpred1264591);
        	relationalOperator();
        	followingStackPointer_--;
        	if (failed) return ;
        
        }
    }
    // $ANTLR end synpred126

    // $ANTLR start synpred137
    public void synpred137_fragment() //throws RecognitionException
    {   
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1358:4: ( additiveOperator multiplicativeExpression )
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1358:4: additiveOperator multiplicativeExpression
        {
        	PushFollow(FOLLOW_additiveOperator_in_synpred1374732);
        	additiveOperator();
        	followingStackPointer_--;
        	if (failed) return ;
        	PushFollow(FOLLOW_multiplicativeExpression_in_synpred1374742);
        	multiplicativeExpression();
        	followingStackPointer_--;
        	if (failed) return ;
        
        }
    }
    // $ANTLR end synpred137

    // $ANTLR start synpred152
    public void synpred152_fragment() //throws RecognitionException
    {   
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1410:5: ( LBRACK expression RBRACK )
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1410:5: LBRACK expression RBRACK
        {
        	Match(input,LBRACK,FOLLOW_LBRACK_in_synpred1525061); if (failed) return ;
        	PushFollow(FOLLOW_expression_in_synpred1525065);
        	expression();
        	followingStackPointer_--;
        	if (failed) return ;
        	Match(input,RBRACK,FOLLOW_RBRACK_in_synpred1525067); if (failed) return ;
        
        }
    }
    // $ANTLR end synpred152

    // $ANTLR start synpred153
    public void synpred153_fragment() //throws RecognitionException
    {   
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1411:5: ( arguments )
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1411:5: arguments
        {
        	PushFollow(FOLLOW_arguments_in_synpred1535086);
        	arguments();
        	followingStackPointer_--;
        	if (failed) return ;
        
        }
    }
    // $ANTLR end synpred153

    // $ANTLR start synpred154
    public void synpred154_fragment() //throws RecognitionException
    {   
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1414:6: ( INC )
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1414:6: INC
        {
        	Match(input,INC,FOLLOW_INC_in_synpred1545112); if (failed) return ;
        
        }
    }
    // $ANTLR end synpred154

    // $ANTLR start synpred155
    public void synpred155_fragment() //throws RecognitionException
    {   
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1415:6: ( DEC )
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1415:6: DEC
        {
        	Match(input,DEC,FOLLOW_DEC_in_synpred1555133); if (failed) return ;
        
        }
    }
    // $ANTLR end synpred155

    // $ANTLR start synpred172
    public void synpred172_fragment() //throws RecognitionException
    {   
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1478:4: ( comment )
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1478:4: comment
        {
        	PushFollow(FOLLOW_comment_in_synpred1725450);
        	comment();
        	followingStackPointer_--;
        	if (failed) return ;
        
        }
    }
    // $ANTLR end synpred172

    // $ANTLR start synpred173
    public void synpred173_fragment() //throws RecognitionException
    {   
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1482:27: ( comment )
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1482:27: comment
        {
        	PushFollow(FOLLOW_comment_in_synpred1735473);
        	comment();
        	followingStackPointer_--;
        	if (failed) return ;
        
        }
    }
    // $ANTLR end synpred173

    // $ANTLR start synpred175
    public void synpred175_fragment() //throws RecognitionException
    {   
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1483:27: ( comment )
        // C:\\Users\\sephiroth\\Documents\\Flash\\fdplugins\\trunk\\Plugins\\CodeReformatter\\AS.g:1483:27: comment
        {
        	PushFollow(FOLLOW_comment_in_synpred1755493);
        	comment();
        	followingStackPointer_--;
        	if (failed) return ;
        
        }
    }
    // $ANTLR end synpred175

   	public bool synpred79() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred79_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}
   	public bool synpred126() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred126_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}
   	public bool synpred75() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred75_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}
   	public bool synpred155() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred155_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}
   	public bool synpred74() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred74_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}
   	public bool synpred154() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred154_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}
   	public bool synpred153() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred153_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}
   	public bool synpred152() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred152_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}
   	public bool synpred59() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred59_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}
   	public bool synpred137() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred137_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}
   	public bool synpred55() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred55_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}
   	public bool synpred51() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred51_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}
   	public bool synpred100() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred100_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}
   	public bool synpred80() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred80_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}
   	public bool synpred38() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred38_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}
   	public bool synpred36() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred36_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}
   	public bool synpred175() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred175_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}
   	public bool synpred94() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred94_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}
   	public bool synpred173() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred173_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}
   	public bool synpred172() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred172_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}
   	public bool synpred5() 
   	{
   	    backtracking++;
   	    int start = input.Mark();
   	    try 
   	    {
   	        synpred5_fragment(); // can never throw exception
   	    }
   	    catch (RecognitionException re) 
   	    {
   	        Console.Error.WriteLine("impossible: "+re);
   	    }
   	    bool success = !failed;
   	    input.Rewind(start);
   	    backtracking--;
   	    failed = false;
   	    return success;
   	}


	private void InitializeCyclicDFAs()
	{
	}

 

    public static readonly BitSet FOLLOW_as2CompilationUnit_in_compilationUnit437 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_importDefinition_in_as2CompilationUnit468 = new BitSet(new ulong[]{0x3400000000000000UL,0x0000006FC0000000UL,0x01F0800018000000UL});
    public static readonly BitSet FOLLOW_annotations_in_as2CompilationUnit474 = new BitSet(new ulong[]{0x3400000000000000UL,0x0000006FC0000000UL,0x01F0800018000000UL});
    public static readonly BitSet FOLLOW_comments_in_as2CompilationUnit484 = new BitSet(new ulong[]{0x3400000000000000UL,0x0000006FC0000000UL,0x01F0800018000000UL});
    public static readonly BitSet FOLLOW_as2Type_in_as2CompilationUnit495 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_modifiers_in_as2Type508 = new BitSet(new ulong[]{0x3000000000000000UL});
    public static readonly BitSet FOLLOW_as2ClassDefinition_in_as2Type514 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_as2InterfaceDefinition_in_as2Type520 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_EOF_in_endOfFile537 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_IMPORT_in_importDefinition549 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400000C0UL,0x000000006000000CUL});
    public static readonly BitSet FOLLOW_identifierStar_in_importDefinition556 = new BitSet(new ulong[]{0x0800000000000002UL});
    public static readonly BitSet FOLLOW_semi_in_importDefinition564 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_SEMI_in_semi575 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_CLASS_in_as2ClassDefinition594 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400000C0UL,0x000000006000000CUL});
    public static readonly BitSet FOLLOW_identifier_in_as2ClassDefinition606 = new BitSet(new ulong[]{0x4000000000000000UL,0x0000000000000003UL});
    public static readonly BitSet FOLLOW_classExtendsClause_in_as2ClassDefinition612 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000003UL});
    public static readonly BitSet FOLLOW_implementsClause_in_as2ClassDefinition619 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL});
    public static readonly BitSet FOLLOW_typeBlock_in_as2ClassDefinition625 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_INTERFACE_in_interfaceDefinition672 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400000C0UL,0x000000006000000CUL});
    public static readonly BitSet FOLLOW_ident_in_interfaceDefinition683 = new BitSet(new ulong[]{0x4000000000000000UL,0x0000000000000002UL});
    public static readonly BitSet FOLLOW_interfaceExtendsClause_in_interfaceDefinition687 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL});
    public static readonly BitSet FOLLOW_interfaceTypeBlock_in_interfaceDefinition693 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_INTERFACE_in_as2InterfaceDefinition729 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400000C0UL,0x000000006000000CUL});
    public static readonly BitSet FOLLOW_identifier_in_as2InterfaceDefinition731 = new BitSet(new ulong[]{0x4000000000000000UL,0x0000000000000002UL});
    public static readonly BitSet FOLLOW_interfaceExtendsClause_in_as2InterfaceDefinition735 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL});
    public static readonly BitSet FOLLOW_interfaceTypeBlock_in_as2InterfaceDefinition739 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_EXTENDS_in_classExtendsClause773 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400000C0UL,0x000000006000000CUL});
    public static readonly BitSet FOLLOW_identifier_in_classExtendsClause785 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_EXTENDS_in_interfaceExtendsClause808 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400000C0UL,0x000000006000000CUL});
    public static readonly BitSet FOLLOW_identifier_in_interfaceExtendsClause820 = new BitSet(new ulong[]{0x8000000000000002UL});
    public static readonly BitSet FOLLOW_COMMA_in_interfaceExtendsClause834 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400000C0UL,0x000000006000000CUL});
    public static readonly BitSet FOLLOW_identifier_in_interfaceExtendsClause848 = new BitSet(new ulong[]{0x8000000000000002UL});
    public static readonly BitSet FOLLOW_IMPLEMENTS_in_implementsClause875 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400000C0UL,0x000000006000000CUL});
    public static readonly BitSet FOLLOW_identifier_in_implementsClause886 = new BitSet(new ulong[]{0x8000000000000002UL});
    public static readonly BitSet FOLLOW_COMMA_in_implementsClause900 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400000C0UL,0x000000006000000CUL});
    public static readonly BitSet FOLLOW_identifier_in_implementsClause913 = new BitSet(new ulong[]{0x8000000000000002UL});
    public static readonly BitSet FOLLOW_LCURLY_in_interfaceTypeBlock939 = new BitSet(new ulong[]{0x0400000000000000UL,0x0000006FC000002CUL,0x01F0800000000000UL});
    public static readonly BitSet FOLLOW_interfaceTypeBlockEntry_in_interfaceTypeBlock944 = new BitSet(new ulong[]{0x0400000000000000UL,0x0000006FC000002CUL,0x01F0800000000000UL});
    public static readonly BitSet FOLLOW_RCURLY_in_interfaceTypeBlock950 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LCURLY_in_typeBlock973 = new BitSet(new ulong[]{0x0400000000000000UL,0x0000006FC000032CUL,0x01F0800018000000UL});
    public static readonly BitSet FOLLOW_typeBlockEntry_in_typeBlock978 = new BitSet(new ulong[]{0x0400000000000000UL,0x0000006FC000032CUL,0x01F0800018000000UL});
    public static readonly BitSet FOLLOW_RCURLY_in_typeBlock984 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_modifiers_in_interfaceTypeBlockEntry1012 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000020UL});
    public static readonly BitSet FOLLOW_interfaceMethodDefinition_in_interfaceTypeBlockEntry1023 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_importDefinition_in_interfaceTypeBlockEntry1033 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_as2IncludeDirective_in_interfaceTypeBlockEntry1040 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_annotations_in_interfaceTypeBlockEntry1047 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_modifiers_in_typeBlockEntry1064 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000320UL});
    public static readonly BitSet FOLLOW_variableDefinition_in_typeBlockEntry1071 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_methodDefinition_in_typeBlockEntry1081 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_importDefinition_in_typeBlockEntry1091 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_as2IncludeDirective_in_typeBlockEntry1098 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_annotations_in_typeBlockEntry1105 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_comments_in_typeBlockEntry1114 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_INCLUDE_DIRECTIVE_in_as2IncludeDirective1127 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000010UL});
    public static readonly BitSet FOLLOW_STRING_LITERAL_in_as2IncludeDirective1131 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_175_in_includeDirective1154 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000010UL});
    public static readonly BitSet FOLLOW_STRING_LITERAL_in_includeDirective1156 = new BitSet(new ulong[]{0x0800000000000002UL});
    public static readonly BitSet FOLLOW_semi_in_includeDirective1158 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_FUNCTION_in_interfaceMethodDefinition1170 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400000C0UL,0x000000006000000CUL});
    public static readonly BitSet FOLLOW_optionalAccessorRole_in_interfaceMethodDefinition1182 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400000C0UL,0x000000006000000CUL});
    public static readonly BitSet FOLLOW_ident_in_interfaceMethodDefinition1188 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000800UL});
    public static readonly BitSet FOLLOW_parameterDeclarationList_in_interfaceMethodDefinition1198 = new BitSet(new ulong[]{0x0800000000000002UL,0x0000000000100000UL});
    public static readonly BitSet FOLLOW_typeExpression_in_interfaceMethodDefinition1204 = new BitSet(new ulong[]{0x0800000000000002UL});
    public static readonly BitSet FOLLOW_semi_in_interfaceMethodDefinition1212 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_FUNCTION_in_methodDefinition1283 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400000C0UL,0x000000006000000CUL});
    public static readonly BitSet FOLLOW_optionalAccessorRole_in_methodDefinition1295 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400000C0UL,0x000000006000000CUL});
    public static readonly BitSet FOLLOW_ident_in_methodDefinition1301 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000800UL});
    public static readonly BitSet FOLLOW_parameterDeclarationList_in_methodDefinition1319 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000100002UL});
    public static readonly BitSet FOLLOW_typeExpression_in_methodDefinition1325 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL});
    public static readonly BitSet FOLLOW_block_in_methodDefinition1341 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_accessorRole_in_optionalAccessorRole1424 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_GET_in_accessorRole1447 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_SET_in_accessorRole1455 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_varOrConst_in_variableDefinition1486 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400000C0UL,0x000000006000000CUL});
    public static readonly BitSet FOLLOW_variableDeclarator_in_variableDefinition1495 = new BitSet(new ulong[]{0x8800000000000002UL});
    public static readonly BitSet FOLLOW_COMMA_in_variableDefinition1515 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400000C0UL,0x000000006000000CUL});
    public static readonly BitSet FOLLOW_variableDeclarator_in_variableDefinition1526 = new BitSet(new ulong[]{0x8800000000000002UL});
    public static readonly BitSet FOLLOW_semi_in_variableDefinition1535 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_varOrConst0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ident_in_variableDeclarator1579 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000100400UL});
    public static readonly BitSet FOLLOW_typeExpression_in_variableDeclarator1592 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000400UL});
    public static readonly BitSet FOLLOW_variableInitializer_in_variableDeclarator1599 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_varOrConst_in_declaration1614 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400000C0UL,0x000000006000000CUL});
    public static readonly BitSet FOLLOW_variableDeclarator_in_declaration1624 = new BitSet(new ulong[]{0x8000000000000002UL});
    public static readonly BitSet FOLLOW_declarationTail_in_declaration1628 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_COMMA_in_declarationTail1654 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400000C0UL,0x000000006000000CUL});
    public static readonly BitSet FOLLOW_variableDeclarator_in_declarationTail1662 = new BitSet(new ulong[]{0x8000000000000002UL});
    public static readonly BitSet FOLLOW_ASSIGN_in_variableInitializer1678 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_variableInitializer1688 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LPAREN_in_parameterDeclarationList1701 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400012C0UL,0x000000006000000CUL});
    public static readonly BitSet FOLLOW_parameterDeclaration_in_parameterDeclarationList1711 = new BitSet(new ulong[]{0x8000000000000000UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_COMMA_in_parameterDeclarationList1722 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400002C0UL,0x000000006000000CUL});
    public static readonly BitSet FOLLOW_parameterDeclaration_in_parameterDeclarationList1731 = new BitSet(new ulong[]{0x8000000000000000UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_parameterDeclarationList1746 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_basicParameterDeclaration_in_parameterDeclaration1773 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_CONST_in_basicParameterDeclaration1784 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400000C0UL,0x000000006000000CUL});
    public static readonly BitSet FOLLOW_ident_in_basicParameterDeclaration1792 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000100400UL});
    public static readonly BitSet FOLLOW_typeExpression_in_basicParameterDeclaration1804 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000400UL});
    public static readonly BitSet FOLLOW_parameterDefault_in_basicParameterDeclaration1811 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ASSIGN_in_parameterDefault1855 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_parameterDefault1858 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LCURLY_in_block1869 = new BitSet(new ulong[]{0x0800000000000000UL,0x000000484F47ABF6UL,0x000300007FFFF30CUL});
    public static readonly BitSet FOLLOW_blockEntry_in_block1873 = new BitSet(new ulong[]{0x0800000000000000UL,0x000000484F47ABF6UL,0x000300007FFFF30CUL});
    public static readonly BitSet FOLLOW_RCURLY_in_block1879 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_statement_in_blockEntry1903 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LPAREN_in_condition1914 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_expression_in_condition1922 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_condition1927 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_block_in_statement1957 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_declarationStatement_in_statement1962 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expressionStatement_in_statement1970 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ifStatement_in_statement1979 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_forStatement_in_statement1984 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_whileStatement_in_statement1989 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_doWhileStatement_in_statement1994 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_withStatement_in_statement1999 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_switchStatement_in_statement2004 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_breakStatement_in_statement2009 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_continueStatement_in_statement2019 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_returnStatement_in_statement2028 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_throwStatement_in_statement2038 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_tryStatement_in_statement2048 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_SEMI_in_statement2053 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_comments_in_statement2061 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_declaration_in_declarationStatement2088 = new BitSet(new ulong[]{0x0800000000000002UL});
    public static readonly BitSet FOLLOW_semi_in_declarationStatement2093 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expressionList_in_expressionStatement2114 = new BitSet(new ulong[]{0x0800000000000002UL});
    public static readonly BitSet FOLLOW_semi_in_expressionStatement2116 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_IF_in_ifStatement2138 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000800UL});
    public static readonly BitSet FOLLOW_condition_in_ifStatement2150 = new BitSet(new ulong[]{0x0800000000000000UL,0x000000484F47ABF2UL,0x000300007FFFF30CUL});
    public static readonly BitSet FOLLOW_statement_in_ifStatement2169 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000004000UL});
    public static readonly BitSet FOLLOW_elseClause_in_ifStatement2192 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ELSE_in_elseClause2212 = new BitSet(new ulong[]{0x0800000000000000UL,0x000000484F47ABF2UL,0x000300007FFFF30CUL});
    public static readonly BitSet FOLLOW_statement_in_elseClause2223 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_176_in_throwStatement2239 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_expression_in_throwStatement2244 = new BitSet(new ulong[]{0x0800000000000002UL});
    public static readonly BitSet FOLLOW_semi_in_throwStatement2246 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_177_in_tryStatement2257 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL});
    public static readonly BitSet FOLLOW_block_in_tryStatement2265 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x000C000000000000UL});
    public static readonly BitSet FOLLOW_catchBlock_in_tryStatement2278 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x000C000000000000UL});
    public static readonly BitSet FOLLOW_finallyBlock_in_tryStatement2288 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_178_in_catchBlock2301 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000800UL});
    public static readonly BitSet FOLLOW_LPAREN_in_catchBlock2308 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400000C0UL,0x000000006000000CUL});
    public static readonly BitSet FOLLOW_ident_in_catchBlock2318 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000101000UL});
    public static readonly BitSet FOLLOW_typeExpression_in_catchBlock2324 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_catchBlock2330 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL});
    public static readonly BitSet FOLLOW_block_in_catchBlock2338 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_179_in_finallyBlock2352 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL});
    public static readonly BitSet FOLLOW_block_in_finallyBlock2358 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_RETURN_in_returnStatement2372 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_expression_in_returnStatement2377 = new BitSet(new ulong[]{0x0800000000000002UL});
    public static readonly BitSet FOLLOW_semi_in_returnStatement2379 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_RETURN_in_returnStatement2384 = new BitSet(new ulong[]{0x0800000000000002UL});
    public static readonly BitSet FOLLOW_semi_in_returnStatement2387 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_CONTINUE_in_continueStatement2402 = new BitSet(new ulong[]{0x0800000000000002UL});
    public static readonly BitSet FOLLOW_semi_in_continueStatement2405 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_BREAK_in_breakStatement2418 = new BitSet(new ulong[]{0x0800000000000002UL});
    public static readonly BitSet FOLLOW_semi_in_breakStatement2421 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_SWITCH_in_switchStatement2435 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000800UL});
    public static readonly BitSet FOLLOW_condition_in_switchStatement2444 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL});
    public static readonly BitSet FOLLOW_switchBlock_in_switchStatement2449 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LCURLY_in_switchBlock2460 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000280004UL});
    public static readonly BitSet FOLLOW_caseStatement_in_switchBlock2477 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000280004UL});
    public static readonly BitSet FOLLOW_defaultStatement_in_switchBlock2487 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_RCURLY_in_switchBlock2493 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_CASE_in_caseStatement2527 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_expression_in_caseStatement2536 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000100000UL});
    public static readonly BitSet FOLLOW_COLON_in_caseStatement2541 = new BitSet(new ulong[]{0x0800000000000002UL,0x000000484F47ABF2UL,0x000300007FFFF30CUL});
    public static readonly BitSet FOLLOW_switchStatementList_in_caseStatement2551 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_DEFAULT_in_defaultStatement2570 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000100000UL});
    public static readonly BitSet FOLLOW_COLON_in_defaultStatement2577 = new BitSet(new ulong[]{0x0800000000000002UL,0x000000484F47ABF2UL,0x000300007FFFF30CUL});
    public static readonly BitSet FOLLOW_switchStatementList_in_defaultStatement2587 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_statement_in_switchStatementList2609 = new BitSet(new ulong[]{0x0800000000000002UL,0x000000484F47ABF2UL,0x000300007FFFF30CUL});
    public static readonly BitSet FOLLOW_FOR_in_forStatement2643 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000800UL});
    public static readonly BitSet FOLLOW_LPAREN_in_forStatement2651 = new BitSet(new ulong[]{0x0800000000000000UL,0x0000004848000BF2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_forInClause_in_forStatement2671 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_forStatement2677 = new BitSet(new ulong[]{0x0800000000000000UL,0x000000484F47ABF2UL,0x000300007FFFF30CUL});
    public static readonly BitSet FOLLOW_statement_in_forStatement2690 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_traditionalForClause_in_forStatement2719 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_forStatement2721 = new BitSet(new ulong[]{0x0800000000000000UL,0x000000484F47ABF2UL,0x000300007FFFF30CUL});
    public static readonly BitSet FOLLOW_statement_in_forStatement2730 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_forInit_in_traditionalForClause2767 = new BitSet(new ulong[]{0x0800000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_traditionalForClause2769 = new BitSet(new ulong[]{0x0800000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_forCond_in_traditionalForClause2779 = new BitSet(new ulong[]{0x0800000000000000UL});
    public static readonly BitSet FOLLOW_SEMI_in_traditionalForClause2781 = new BitSet(new ulong[]{0x0000000000000002UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_forIter_in_traditionalForClause2791 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_forInClauseDecl_in_forInClause2803 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000800000UL});
    public static readonly BitSet FOLLOW_IN_in_forInClause2805 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_forInClauseTail_in_forInClause2810 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_declaration_in_forInClauseDecl2831 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ident_in_forInClauseDecl2839 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expressionList_in_forInClauseTail2865 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_declaration_in_forInit2889 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expressionList_in_forInit2893 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expressionList_in_forCond2931 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expressionList_in_forIter2964 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_WHILE_in_whileStatement2987 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000800UL});
    public static readonly BitSet FOLLOW_condition_in_whileStatement2996 = new BitSet(new ulong[]{0x0800000000000000UL,0x000000484F47ABF2UL,0x000300007FFFF30CUL});
    public static readonly BitSet FOLLOW_statement_in_whileStatement3004 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_DO_in_doWhileStatement3019 = new BitSet(new ulong[]{0x0800000000000000UL,0x000000484F47ABF2UL,0x000300007FFFF30CUL});
    public static readonly BitSet FOLLOW_statement_in_doWhileStatement3029 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000001000000UL});
    public static readonly BitSet FOLLOW_WHILE_in_doWhileStatement3036 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000800UL});
    public static readonly BitSet FOLLOW_condition_in_doWhileStatement3046 = new BitSet(new ulong[]{0x0800000000000002UL});
    public static readonly BitSet FOLLOW_semi_in_doWhileStatement3052 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_WITH_in_withStatement3063 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000800UL});
    public static readonly BitSet FOLLOW_condition_in_withStatement3072 = new BitSet(new ulong[]{0x0800000000000000UL,0x000000484F47ABF2UL,0x000300007FFFF30CUL});
    public static readonly BitSet FOLLOW_statement_in_withStatement3080 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_COLON_in_typeExpression3100 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040580000C0UL,0x000000006000000CUL});
    public static readonly BitSet FOLLOW_identifier_in_typeExpression3113 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_VOID_in_typeExpression3121 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_STAR_in_typeExpression3131 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_qualifiedIdent_in_identifier3169 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_DOT_in_identifier3193 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400000C0UL,0x000000006000000CUL});
    public static readonly BitSet FOLLOW_qualifiedIdent_in_identifier3197 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_ident_in_qualifiedIdent3226 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_IDENT_in_namespaceName3240 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_reservedNamespace_in_namespaceName3244 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_reservedNamespace0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ident_in_identifierStar3283 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_DOT_in_identifierStar3305 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400000C0UL,0x000000006000000CUL});
    public static readonly BitSet FOLLOW_ident_in_identifierStar3309 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000020000000UL});
    public static readonly BitSet FOLLOW_DOT_in_identifierStar3324 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000010000000UL});
    public static readonly BitSet FOLLOW_STAR_in_identifierStar3326 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_annotation_in_annotations3372 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000800000000UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_includeDirective_in_annotations3385 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000800000000UL,0x0000800000000000UL});
    public static readonly BitSet FOLLOW_LBRACK_in_annotation3414 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400000C0UL,0x000000006000000CUL});
    public static readonly BitSet FOLLOW_ident_in_annotation3426 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000001000000800UL});
    public static readonly BitSet FOLLOW_annotationParamList_in_annotation3435 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000001000000000UL});
    public static readonly BitSet FOLLOW_RBRACK_in_annotation3440 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LPAREN_in_annotationParamList3472 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400010D0UL,0x0000000063F8000CUL});
    public static readonly BitSet FOLLOW_annotationParam_in_annotationParamList3485 = new BitSet(new ulong[]{0x8000000000000000UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_COMMA_in_annotationParamList3496 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400000D0UL,0x0000000063F8000CUL});
    public static readonly BitSet FOLLOW_annotationParam_in_annotationParamList3507 = new BitSet(new ulong[]{0x8000000000000000UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_annotationParamList3522 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ident_in_annotationParam3555 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000400UL});
    public static readonly BitSet FOLLOW_ASSIGN_in_annotationParam3557 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000010UL,0x0000000003F80000UL});
    public static readonly BitSet FOLLOW_constant_in_annotationParam3561 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ident_in_annotationParam3580 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000400UL});
    public static readonly BitSet FOLLOW_ASSIGN_in_annotationParam3582 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400000C0UL,0x000000006000000CUL});
    public static readonly BitSet FOLLOW_ident_in_annotationParam3586 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_constant_in_annotationParam3605 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ident_in_annotationParam3618 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_modifier_in_modifiers3638 = new BitSet(new ulong[]{0x0000000000000002UL,0x00000067C0000000UL,0x01F0000000000000UL});
    public static readonly BitSet FOLLOW_namespaceName_in_modifier3661 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_STATIC_in_modifier3666 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_180_in_modifier3671 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_181_in_modifier3676 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_182_in_modifier3681 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_183_in_modifier3686 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_DYNAMIC_in_modifier3691 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_184_in_modifier3696 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LPAREN_in_arguments3717 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_expressionList_in_arguments3721 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_arguments3723 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LPAREN_in_arguments3730 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_arguments3732 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_element3758 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LBRACK_in_arrayLiteral3780 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000058480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_elementList_in_arrayLiteral3784 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000001000000000UL});
    public static readonly BitSet FOLLOW_RBRACK_in_arrayLiteral3787 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_nonemptyElementList_in_elementList3811 = new BitSet(new ulong[]{0x8000000000000002UL});
    public static readonly BitSet FOLLOW_COMMA_in_elementList3821 = new BitSet(new ulong[]{0x0000000000000002UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_nonemptyElementList_in_elementList3834 = new BitSet(new ulong[]{0x8000000000000002UL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_nonemptyElementList3862 = new BitSet(new ulong[]{0x8000000000000002UL});
    public static readonly BitSet FOLLOW_COMMA_in_nonemptyElementList3872 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_nonemptyElementList3884 = new BitSet(new ulong[]{0x8000000000000002UL});
    public static readonly BitSet FOLLOW_LCURLY_in_objectLiteral3906 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400000C4UL,0x0000000063C0000CUL});
    public static readonly BitSet FOLLOW_fieldList_in_objectLiteral3915 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000004UL});
    public static readonly BitSet FOLLOW_RCURLY_in_objectLiteral3921 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_literalField_in_fieldList3948 = new BitSet(new ulong[]{0x8000000000000002UL});
    public static readonly BitSet FOLLOW_COMMA_in_fieldList3958 = new BitSet(new ulong[]{0x0000000000000002UL,0x00000040400000C0UL,0x0000000063C0000CUL});
    public static readonly BitSet FOLLOW_literalField_in_fieldList3972 = new BitSet(new ulong[]{0x8000000000000002UL});
    public static readonly BitSet FOLLOW_fieldName_in_literalField3994 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000100000UL});
    public static readonly BitSet FOLLOW_COLON_in_literalField3999 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_element_in_literalField4007 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ident_in_fieldName4033 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_number_in_fieldName4043 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_expression4068 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_expressionList4080 = new BitSet(new ulong[]{0x8000000000000002UL});
    public static readonly BitSet FOLLOW_COMMA_in_expressionList4090 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_expressionList4102 = new BitSet(new ulong[]{0x8000000000000002UL});
    public static readonly BitSet FOLLOW_conditionalExpression_in_assignmentExpression4136 = new BitSet(new ulong[]{0x0000000000000002UL,0x000FFF8000000400UL});
    public static readonly BitSet FOLLOW_assignmentOperator_in_assignmentExpression4151 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_assignmentExpression4171 = new BitSet(new ulong[]{0x0000000000000002UL,0x000FFF8000000400UL});
    public static readonly BitSet FOLLOW_set_in_assignmentOperator0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_logicalOrExpression_in_conditionalExpression4265 = new BitSet(new ulong[]{0x0000000000000002UL,0x0010000000000000UL});
    public static readonly BitSet FOLLOW_QUESTION_in_conditionalExpression4279 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_conditionalSubExpression_in_conditionalExpression4286 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_conditionalSubExpression4315 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000100000UL});
    public static readonly BitSet FOLLOW_COLON_in_conditionalSubExpression4320 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_conditionalSubExpression4329 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_logicalAndExpression_in_logicalOrExpression4343 = new BitSet(new ulong[]{0x0000000000000002UL,0x0020000000000000UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_logicalOrOperator_in_logicalOrExpression4354 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_logicalAndExpression_in_logicalOrExpression4366 = new BitSet(new ulong[]{0x0000000000000002UL,0x0020000000000000UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_set_in_logicalOrOperator0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_bitwiseOrExpression_in_logicalAndExpression4398 = new BitSet(new ulong[]{0x0000000000000002UL,0x0040000000000000UL,0x0400000000000000UL});
    public static readonly BitSet FOLLOW_logicalAndOperator_in_logicalAndExpression4409 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_bitwiseOrExpression_in_logicalAndExpression4421 = new BitSet(new ulong[]{0x0000000000000002UL,0x0040000000000000UL,0x0400000000000000UL});
    public static readonly BitSet FOLLOW_set_in_logicalAndOperator0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_bitwiseXorExpression_in_bitwiseOrExpression4453 = new BitSet(new ulong[]{0x0000000000000002UL,0x0080000000000000UL});
    public static readonly BitSet FOLLOW_BOR_in_bitwiseOrExpression4458 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_bitwiseXorExpression_in_bitwiseOrExpression4461 = new BitSet(new ulong[]{0x0000000000000002UL,0x0080000000000000UL});
    public static readonly BitSet FOLLOW_bitwiseAndExpression_in_bitwiseXorExpression4475 = new BitSet(new ulong[]{0x0000000000000002UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_BXOR_in_bitwiseXorExpression4480 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_bitwiseAndExpression_in_bitwiseXorExpression4483 = new BitSet(new ulong[]{0x0000000000000002UL,0x0100000000000000UL});
    public static readonly BitSet FOLLOW_equalityExpression_in_bitwiseAndExpression4497 = new BitSet(new ulong[]{0x0000000000000002UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_BAND_in_bitwiseAndExpression4502 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_equalityExpression_in_bitwiseAndExpression4505 = new BitSet(new ulong[]{0x0000000000000002UL,0x0200000000000000UL});
    public static readonly BitSet FOLLOW_relationalExpression_in_equalityExpression4519 = new BitSet(new ulong[]{0x0000000000000002UL,0x3C00000000000000UL});
    public static readonly BitSet FOLLOW_equalityOperator_in_equalityExpression4529 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_relationalExpression_in_equalityExpression4541 = new BitSet(new ulong[]{0x0000000000000002UL,0x3C00000000000000UL});
    public static readonly BitSet FOLLOW_set_in_equalityOperator0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_shiftExpression_in_relationalExpression4581 = new BitSet(new ulong[]{0x0000000000000002UL,0xC000000000800000UL,0x000000000000001FUL});
    public static readonly BitSet FOLLOW_relationalOperator_in_relationalExpression4597 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_shiftExpression_in_relationalExpression4605 = new BitSet(new ulong[]{0x0000000000000002UL,0xC000000000800000UL,0x000000000000001FUL});
    public static readonly BitSet FOLLOW_IN_in_relationalOperator4623 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LT_in_relationalOperator4628 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_GT_in_relationalOperator4632 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LE_in_relationalOperator4636 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_GE_in_relationalOperator4640 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_IS_in_relationalOperator4644 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_AS_in_relationalOperator4648 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_INSTANCEOF_in_relationalOperator4652 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_additiveExpression_in_shiftExpression4664 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x00000000000000E0UL});
    public static readonly BitSet FOLLOW_shiftOperator_in_shiftExpression4675 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_additiveExpression_in_shiftExpression4685 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x00000000000000E0UL});
    public static readonly BitSet FOLLOW_set_in_shiftOperator0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_multiplicativeExpression_in_additiveExpression4721 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000300UL});
    public static readonly BitSet FOLLOW_additiveOperator_in_additiveExpression4732 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_multiplicativeExpression_in_additiveExpression4742 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000000000300UL});
    public static readonly BitSet FOLLOW_set_in_additiveOperator0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_unaryExpression_in_multiplicativeExpression4774 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000010000000UL,0x0000000000000C00UL});
    public static readonly BitSet FOLLOW_multiplicativeOperator_in_multiplicativeExpression4786 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_unaryExpression_in_multiplicativeExpression4794 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000010000000UL,0x0000000000000C00UL});
    public static readonly BitSet FOLLOW_set_in_multiplicativeOperator0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_INC_in_unaryExpression4832 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_unaryExpression_in_unaryExpression4837 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_DEC_in_unaryExpression4854 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_unaryExpression_in_unaryExpression4859 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_MINUS_in_unaryExpression4876 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_unaryExpression_in_unaryExpression4880 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_PLUS_in_unaryExpression4896 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_unaryExpression_in_unaryExpression4900 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression4914 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_DELETE_in_unaryExpressionNotPlusMinus4927 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048400008F2UL,0x0000000067FC000CUL});
    public static readonly BitSet FOLLOW_postfixExpression_in_unaryExpressionNotPlusMinus4932 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_VOID_in_unaryExpressionNotPlusMinus4947 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus4951 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_TYPEOF_in_unaryExpressionNotPlusMinus4966 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus4970 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LNOT_in_unaryExpressionNotPlusMinus4985 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus4989 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_BNOT_in_unaryExpressionNotPlusMinus5004 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus5008 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_postfixExpression_in_unaryExpressionNotPlusMinus5021 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_primaryExpression_in_postfixExpression5034 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000820000800UL,0x0000000000003000UL});
    public static readonly BitSet FOLLOW_propOrIdent_in_postfixExpression5047 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000820000800UL,0x0000000000003000UL});
    public static readonly BitSet FOLLOW_LBRACK_in_postfixExpression5061 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_expression_in_postfixExpression5065 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000001000000000UL});
    public static readonly BitSet FOLLOW_RBRACK_in_postfixExpression5067 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000820000800UL,0x0000000000003000UL});
    public static readonly BitSet FOLLOW_arguments_in_postfixExpression5086 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000820000800UL,0x0000000000003000UL});
    public static readonly BitSet FOLLOW_INC_in_postfixExpression5112 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_DEC_in_postfixExpression5133 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_UNDEFINED_in_primaryExpression5164 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_constant_in_primaryExpression5176 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_arrayLiteral_in_primaryExpression5187 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_objectLiteral_in_primaryExpression5192 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_functionDefinition_in_primaryExpression5197 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_newFullExpression_in_primaryExpression5202 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_encapsulatedExpression_in_primaryExpression5207 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_qualifiedIdent_in_primaryExpression5212 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_DOT_in_propOrIdent5238 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400000C0UL,0x000000006000000CUL});
    public static readonly BitSet FOLLOW_qualifiedIdent_in_propOrIdent5251 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_number_in_constant5275 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_STRING_LITERAL_in_constant5280 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_TRUE_in_constant5285 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_FALSE_in_constant5290 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_NULL_in_constant5295 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_set_in_number0 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_NEW_in_newFullExpression5337 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048400008F2UL,0x0000000067FC000CUL});
    public static readonly BitSet FOLLOW_fullNewSubexpression_in_newFullExpression5348 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000800UL});
    public static readonly BitSet FOLLOW_arguments_in_newFullExpression5354 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_primaryExpression_in_fullNewSubexpression5372 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000820000000UL});
    public static readonly BitSet FOLLOW_DOT_in_fullNewSubexpression5386 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400000C0UL,0x000000006000000CUL});
    public static readonly BitSet FOLLOW_qualifiedIdent_in_fullNewSubexpression5391 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000820000000UL});
    public static readonly BitSet FOLLOW_brackets_in_fullNewSubexpression5408 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000820000000UL});
    public static readonly BitSet FOLLOW_comment_in_comments5450 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000018000000UL});
    public static readonly BitSet FOLLOW_singleCommentStatement_in_comment5471 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000018000000UL});
    public static readonly BitSet FOLLOW_comment_in_comment5473 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000018000000UL});
    public static readonly BitSet FOLLOW_multiCommentStatement_in_comment5490 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000018000000UL});
    public static readonly BitSet FOLLOW_comment_in_comment5493 = new BitSet(new ulong[]{0x0000000000000002UL,0x0000000000000000UL,0x0000000018000000UL});
    public static readonly BitSet FOLLOW_SL_COMMENT_in_singleCommentStatement5516 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ML_COMMENT_in_multiCommentStatement5536 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LBRACK_in_brackets5564 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_expressionList_in_brackets5572 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000001000000000UL});
    public static readonly BitSet FOLLOW_RBRACK_in_brackets5577 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LPAREN_in_encapsulatedExpression5602 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_encapsulatedExpression5612 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000001000UL});
    public static readonly BitSet FOLLOW_RPAREN_in_encapsulatedExpression5617 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_FUNCTION_in_functionDefinition5647 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000800UL});
    public static readonly BitSet FOLLOW_parameterDeclarationList_in_functionDefinition5654 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000100002UL});
    public static readonly BitSet FOLLOW_typeExpression_in_functionDefinition5661 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000002UL});
    public static readonly BitSet FOLLOW_block_in_functionDefinition5677 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_IDENT_in_ident5715 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_USE_in_ident5722 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_XML_in_ident5734 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_DYNAMIC_in_ident5746 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_IS_in_ident5758 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_AS_in_ident5770 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_GET_in_ident5782 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_SET_in_ident5794 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_SEMI_in_synpred5575 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LCURLY_in_synpred361953 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_expressionStatement_in_synpred381970 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ELSE_in_synpred512189 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_RETURN_in_synpred552372 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_expression_in_synpred552377 = new BitSet(new ulong[]{0x0800000000000002UL});
    public static readonly BitSet FOLLOW_semi_in_synpred552379 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_forInClauseDecl_in_synpred592666 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000800000UL});
    public static readonly BitSet FOLLOW_IN_in_synpred592668 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_annotation_in_synpred743372 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_includeDirective_in_synpred753385 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ident_in_synpred793555 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000400UL});
    public static readonly BitSet FOLLOW_ASSIGN_in_synpred793557 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000010UL,0x0000000003F80000UL});
    public static readonly BitSet FOLLOW_constant_in_synpred793561 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_ident_in_synpred803580 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000000000000400UL});
    public static readonly BitSet FOLLOW_ASSIGN_in_synpred803582 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000040400000C0UL,0x000000006000000CUL});
    public static readonly BitSet FOLLOW_ident_in_synpred803586 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_COMMA_in_synpred943872 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_assignmentExpression_in_synpred943884 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_assignmentOperator_in_synpred1004145 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_relationalOperator_in_synpred1264591 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_additiveOperator_in_synpred1374732 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_multiplicativeExpression_in_synpred1374742 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_LBRACK_in_synpred1525061 = new BitSet(new ulong[]{0x0000000000000000UL,0x00000048480008F2UL,0x0000000067FFF30CUL});
    public static readonly BitSet FOLLOW_expression_in_synpred1525065 = new BitSet(new ulong[]{0x0000000000000000UL,0x0000001000000000UL});
    public static readonly BitSet FOLLOW_RBRACK_in_synpred1525067 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_arguments_in_synpred1535086 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_INC_in_synpred1545112 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_DEC_in_synpred1555133 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_comment_in_synpred1725450 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_comment_in_synpred1735473 = new BitSet(new ulong[]{0x0000000000000002UL});
    public static readonly BitSet FOLLOW_comment_in_synpred1755493 = new BitSet(new ulong[]{0x0000000000000002UL});

}
}