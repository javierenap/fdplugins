// $ANTLR 3.0 C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g 2007-08-22 19:00:13
namespace
CodeReformatter.Generators.Core
{

    using System.IO;
    using System.Diagnostics;


    using System;
    using Antlr.Runtime;
    using IList = System.Collections.IList;
    using ArrayList = System.Collections.ArrayList;
    using Stack = Antlr.Runtime.Collections.StackList;

    using IDictionary = System.Collections.IDictionary;
    using Hashtable = System.Collections.Hashtable;



    using Antlr.Runtime.Tree;

    public class ASParser : Parser
    {
        public static readonly string[] tokenNames = new string[] 
	{
        "<invalid>", 
		"<EOR>", 
		"<DOWN>", 
		"<UP>", 
		"COMPILATION_UNIT", 
		"TYPE_BLOCK", 
		"METHOD_DEF", 
		"VAR_DEF", 
		"ANNOTATIONS", 
		"ANNOTATION", 
		"ANNOTATION_PARAMS", 
		"MODIFIERS", 
		"NAMESPACE_DEF", 
		"ACCESSOR_ROLE", 
		"CLASS_DEF", 
		"INTERFACE_DEF", 
		"PARAMS", 
		"PARAM", 
		"TYPE_SPEC", 
		"BLOCK", 
		"ELIST", 
		"CONDITION", 
		"ARGUMENTS", 
		"EXPR_STMNT", 
		"ENCPS_EXPR", 
		"VAR_INIT", 
		"METHOD_CALL", 
		"PROPERTY_OR_IDENTIFIER", 
		"PROPERTY_ACCESS", 
		"TYPE_NAME", 
		"ARRAY_ACC", 
		"UNARY_PLUS", 
		"UNARY_MINUS", 
		"POST_INC", 
		"POST_DEC", 
		"PRE_INC", 
		"PRE_DEC", 
		"ARRAY_LITERAL", 
		"ELEMENT", 
		"OBJECT_LITERAL", 
		"OBJECT_FIELD", 
		"FUNC_DEF", 
		"FOR_INIT", 
		"FOR_CONDITION", 
		"FOR_ITERATOR", 
		"FOR_EACH", 
		"FOR_IN", 
		"SWITCH_STATEMENT_LIST", 
		"IDENTIFIER", 
		"DEFAULT_XML_NAMESPACE", 
		"SINGLELINE_COMMENT", 
		"MULTILINE_COMMENT", 
		"COMMENT_LIST", 
		"COMMENT_ENTRY", 
		"VIRTUAL_PLACEHOLDER", 
		"ANNOTATION_ASSIGN", 
		"PACKAGE", 
		"LCURLY", 
		"RCURLY", 
		"SEMI", 
		"IMPORT", 
		"CLASS", 
		"INTERFACE", 
		"EXTENDS", 
		"COMMA", 
		"IMPLEMENTS", 
		"INCLUDE_DIRECTIVE", 
		"STRING_LITERAL", 
		"FUNCTION", 
		"GET", 
		"SET", 
		"NAMESPACE", 
		"USE", 
		"VAR", 
		"CONST", 
		"ASSIGN", 
		"LPAREN", 
		"RPAREN", 
		"REST", 
		"IF", 
		"ELSE", 
		"RETURN", 
		"CONTINUE", 
		"BREAK", 
		"SWITCH", 
		"CASE", 
		"COLON", 
		"DEFAULT", 
		"FOR", 
		"EACH", 
		"IN", 
		"WHILE", 
		"DO", 
		"WITH", 
		"XML", 
		"STAR", 
		"DOT", 
		"DBL_COLON", 
		"IDENT", 
		"PUBLIC", 
		"PRIVATE", 
		"PROTECTED", 
		"INTERNAL", 
		"LBRACK", 
		"RBRACK", 
		"STATIC", 
		"DYNAMIC", 
		"STAR_ASSIGN", 
		"DIV_ASSIGN", 
		"MOD_ASSIGN", 
		"PLUS_ASSIGN", 
		"MINUS_ASSIGN", 
		"SL_ASSIGN", 
		"SR_ASSIGN", 
		"BSR_ASSIGN", 
		"BAND_ASSIGN", 
		"BXOR_ASSIGN", 
		"BOR_ASSIGN", 
		"LAND_ASSIGN", 
		"LOR_ASSIGN", 
		"QUESTION", 
		"LOR", 
		"LAND", 
		"BOR", 
		"BXOR", 
		"BAND", 
		"STRICT_EQUAL", 
		"STRICT_NOT_EQUAL", 
		"NOT_EQUAL", 
		"EQUAL", 
		"LT", 
		"GT", 
		"LE", 
		"GE", 
		"IS", 
		"AS", 
		"INSTANCEOF", 
		"SL", 
		"SR", 
		"BSR", 
		"PLUS", 
		"MINUS", 
		"DIV", 
		"MOD", 
		"INC", 
		"DEC", 
		"DELETE", 
		"TYPEOF", 
		"LNOT", 
		"BNOT", 
		"E4X_DESC", 
		"E4X_ATTRI", 
		"UNDEFINED", 
		"TRUE", 
		"FALSE", 
		"NULL", 
		"HEX_LITERAL", 
		"DECIMAL_LITERAL", 
		"OCTAL_LITERAL", 
		"FLOAT_LITERAL", 
		"NEW", 
		"SL_COMMENT", 
		"ML_COMMENT", 
		"UNICODE_IDENTIFIER_START", 
		"UNICODE_IDENTIFIER_PART", 
		"ESC", 
		"HEX_DIGIT", 
		"EXPONENT", 
		"WS", 
		"NL", 
		"BOM", 
		"OCT_DIGIT", 
		"CTRLCHAR_ESC", 
		"UNICODE_ESC", 
		"OCTAL_ESC", 
		"'include'", 
		"'throw'", 
		"'try'", 
		"'catch'", 
		"'finally'", 
		"'void'", 
		"'final'", 
		"'enumerable'", 
		"'explicit'", 
		"'override'", 
		"'intrinsic'", 
		"'or'", 
		"'and'"
    };

        public const int INTERNAL = 102;
        public const int BLOCK = 19;
        public const int BOR_ASSIGN = 117;
        public const int STRING_LITERAL = 67;
        public const int GT = 131;
        public const int HEX_DIGIT = 166;
        public const int GET = 69;
        public const int UNDEFINED = 152;
        public const int SL_ASSIGN = 112;
        public const int PRE_DEC = 36;
        public const int SR = 138;
        public const int LOR_ASSIGN = 119;
        public const int IMPLEMENTS = 65;
        public const int GE = 133;
        public const int LBRACK = 103;
        public const int OCTAL_LITERAL = 158;
        public const int SL = 137;
        public const int PROPERTY_OR_IDENTIFIER = 27;
        public const int SINGLELINE_COMMENT = 50;
        public const int UNICODE_ESC = 173;
        public const int EXTENDS = 63;
        public const int NAMESPACE_DEF = 12;
        public const int FOR_IN = 46;
        public const int NOT_EQUAL = 128;
        public const int MOD_ASSIGN = 109;
        public const int LCURLY = 57;
        public const int UNARY_MINUS = 32;
        public const int LNOT = 148;
        public const int ANNOTATION_ASSIGN = 55;
        public const int ACCESSOR_ROLE = 13;
        public const int E4X_ATTRI = 151;
        public const int MULTILINE_COMMENT = 51;
        public const int DEFAULT = 87;
        public const int STATIC = 105;
        public const int ML_COMMENT = 162;
        public const int OCTAL_ESC = 174;
        public const int STRICT_NOT_EQUAL = 127;
        public const int OCT_DIGIT = 171;
        public const int ANNOTATIONS = 8;
        public const int E4X_DESC = 150;
        public const int POST_DEC = 34;
        public const int DECIMAL_LITERAL = 157;
        public const int MOD = 143;
        public const int INTERFACE_DEF = 15;
        public const int MODIFIERS = 11;
        public const int TYPE_SPEC = 18;
        public const int DIV = 142;
        public const int UNARY_PLUS = 31;
        public const int EACH = 89;
        public const int DEFAULT_XML_NAMESPACE = 49;
        public const int LAND_ASSIGN = 118;
        public const int CONDITION = 21;
        public const int ASSIGN = 75;
        public const int NULL = 155;
        public const int PRIVATE = 100;
        public const int DO = 92;
        public const int EOF = -1;
        public const int MINUS = 141;
        public const int SWITCH_STATEMENT_LIST = 47;
        public const int PARAM = 17;
        public const int TYPE_BLOCK = 5;
        public const int VIRTUAL_PLACEHOLDER = 54;
        public const int VAR_INIT = 25;
        public const int INSTANCEOF = 136;
        public const int FUNCTION = 68;
        public const int PROPERTY_ACCESS = 28;
        public const int TYPE_NAME = 29;
        public const int INC = 144;
        public const int RETURN = 81;
        public const int ELSE = 80;
        public const int EQUAL = 129;
        public const int BXOR_ASSIGN = 116;
        public const int CTRLCHAR_ESC = 172;
        public const int BSR_ASSIGN = 114;
        public const int TRUE = 153;
        public const int DBL_COLON = 97;
        public const int IDENTIFIER = 48;
        public const int COMMENT_ENTRY = 53;
        public const int COMMENT_LIST = 52;
        public const int SEMI = 59;
        public const int STRICT_EQUAL = 126;
        public const int PLUS_ASSIGN = 110;
        public const int BSR = 139;
        public const int OBJECT_FIELD = 40;
        public const int ELEMENT = 38;
        public const int NEW = 160;
        public const int DIV_ASSIGN = 108;
        public const int DELETE = 146;
        public const int NL = 169;
        public const int IDENT = 98;
        public const int BAND_ASSIGN = 115;
        public const int AS = 135;
        public const int CASE = 85;
        public const int OBJECT_LITERAL = 39;
        public const int RBRACK = 104;
        public const int LPAREN = 76;
        public const int PLUS = 140;
        public const int CLASS = 61;
        public const int FUNC_DEF = 41;
        public const int ARRAY_ACC = 30;
        public const int BREAK = 83;
        public const int WHILE = 91;
        public const int CONST = 74;
        public const int RCURLY = 58;
        public const int INTERFACE = 62;
        public const int PARAMS = 16;
        public const int FOR_INIT = 42;
        public const int DEC = 145;
        public const int COMMA = 64;
        public const int COMPILATION_UNIT = 4;
        public const int LT = 130;
        public const int FOR_ITERATOR = 44;
        public const int ARGUMENTS = 22;
        public const int LE = 132;
        public const int FOR_CONDITION = 43;
        public const int CLASS_DEF = 14;
        public const int MINUS_ASSIGN = 111;
        public const int ENCPS_EXPR = 24;
        public const int LOR = 121;
        public const int WITH = 93;
        public const int REST = 78;
        public const int INCLUDE_DIRECTIVE = 66;
        public const int BAND = 125;
        public const int STAR_ASSIGN = 107;
        public const int EXPONENT = 167;
        public const int SL_COMMENT = 161;
        public const int VAR = 73;
        public const int WS = 168;
        public const int PACKAGE = 56;
        public const int STAR = 95;
        public const int FOR = 88;
        public const int FALSE = 154;
        public const int UNICODE_IDENTIFIER_PART = 164;
        public const int IMPORT = 60;
        public const int DOT = 96;
        public const int XML = 94;
        public const int ANNOTATION = 9;
        public const int QUESTION = 120;
        public const int EXPR_STMNT = 23;
        public const int PRE_INC = 35;
        public const int BOR = 123;
        public const int NAMESPACE = 71;
        public const int BOM = 170;
        public const int SWITCH = 84;
        public const int CONTINUE = 82;
        public const int ARRAY_LITERAL = 37;
        public const int USE = 72;
        public const int SR_ASSIGN = 113;
        public const int ANNOTATION_PARAMS = 10;
        public const int HEX_LITERAL = 156;
        public const int IS = 134;
        public const int METHOD_CALL = 26;
        public const int FOR_EACH = 45;
        public const int LAND = 122;
        public const int DYNAMIC = 106;
        public const int IN = 90;
        public const int BXOR = 124;
        public const int METHOD_DEF = 6;
        public const int VAR_DEF = 7;
        public const int IF = 79;
        public const int ELIST = 20;
        public const int TYPEOF = 147;
        public const int FLOAT_LITERAL = 159;
        public const int COLON = 86;
        public const int SET = 70;
        public const int PUBLIC = 99;
        public const int UNICODE_IDENTIFIER_START = 163;
        public const int POST_INC = 33;
        public const int ESC = 165;
        public const int BNOT = 149;
        public const int RPAREN = 77;
        public const int PROTECTED = 101;
        protected class InOperator_scope
        {
            protected internal Boolean allowed;
        }
        protected Stack InOperator_stack = new Stack();



        public ASParser(ITokenStream input)
            : base(input)
        {
            InitializeCyclicDFAs();
            ruleMemo = new IDictionary[357 + 1];
        }

        protected ITreeAdaptor adaptor = new CommonTreeAdaptor();

        public ITreeAdaptor TreeAdaptor
        {
            get { return this.adaptor; }
            set { this.adaptor = value; }
        }

        override public string[] TokenNames
        {
            get { return tokenNames; }
        }

        override public string GrammarFileName
        {
            get { return "C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g"; }
        }



        #region Members

        private ASLexer lexer;
        private ICharStream cs;
        public static int CHANNEL_PLACEHOLDER = 999;

        public void SetInput(ASLexer lexer, ICharStream cs)
        {
            this.lexer = lexer;
            this.cs = cs;
        }

        /*
        protected void mismatch(IIntStream input, int ttype, BitSet follow)
        {
            MismatchedTokenException mte = new MismatchedTokenException(ttype, input);
            RecoverFromMismatchedToken(input, mte, ttype, follow);
        }
        */

        #endregion


        public class compilationUnit_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start compilationUnit
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:97:1: compilationUnit : ( as2CompilationUnit | as3CompilationUnit ) -> ^( COMPILATION_UNIT ( as2CompilationUnit )? ( as3CompilationUnit )? ) ;
        public compilationUnit_return compilationUnit() // throws RecognitionException [1]
        {
            compilationUnit_return retval = new compilationUnit_return();
            retval.start = input.LT(1);
            int compilationUnit_StartIndex = input.Index();
            CommonTree root_0 = null;

            as2CompilationUnit_return as2CompilationUnit1 = null;

            as3CompilationUnit_return as3CompilationUnit2 = null;


            RewriteRuleSubtreeStream stream_as2CompilationUnit = new RewriteRuleSubtreeStream(adaptor, "rule as2CompilationUnit");
            RewriteRuleSubtreeStream stream_as3CompilationUnit = new RewriteRuleSubtreeStream(adaptor, "rule as3CompilationUnit");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 1))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:101:4: ( ( as2CompilationUnit | as3CompilationUnit ) -> ^( COMPILATION_UNIT ( as2CompilationUnit )? ( as3CompilationUnit )? ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:101:4: ( as2CompilationUnit | as3CompilationUnit )
                {
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:101:4: ( as2CompilationUnit | as3CompilationUnit )
                    int alt1 = 2;
                    switch (input.LA(1))
                    {
                        case SL_COMMENT:
                            {
                                switch (input.LA(2))
                                {
                                    case SL_COMMENT:
                                        {
                                            int LA1_18 = input.LA(3);

                                            if ((synpred1()))
                                            {
                                                alt1 = 1;
                                            }
                                            else if ((true))
                                            {
                                                alt1 = 2;
                                            }
                                            else
                                            {
                                                if (backtracking > 0) { failed = true; return retval; }
                                                NoViableAltException nvae_d1s18 =
                                                    new NoViableAltException("101:4: ( as2CompilationUnit | as3CompilationUnit )", 1, 18, input);

                                                throw nvae_d1s18;
                                            }
                                        }
                                        break;
                                    case ML_COMMENT:
                                        {
                                            int LA1_19 = input.LA(3);

                                            if ((synpred1()))
                                            {
                                                alt1 = 1;
                                            }
                                            else if ((true))
                                            {
                                                alt1 = 2;
                                            }
                                            else
                                            {
                                                if (backtracking > 0) { failed = true; return retval; }
                                                NoViableAltException nvae_d1s19 =
                                                    new NoViableAltException("101:4: ( as2CompilationUnit | as3CompilationUnit )", 1, 19, input);

                                                throw nvae_d1s19;
                                            }
                                        }
                                        break;
                                    case IMPORT:
                                    case CLASS:
                                    case INTERFACE:
                                    case IDENT:
                                    case PUBLIC:
                                    case PRIVATE:
                                    case PROTECTED:
                                    case INTERNAL:
                                    case LBRACK:
                                    case STATIC:
                                    case DYNAMIC:
                                    case 175:
                                    case 181:
                                    case 182:
                                    case 183:
                                    case 184:
                                    case 185:
                                        {
                                            alt1 = 1;
                                        }
                                        break;
                                    case PACKAGE:
                                        {
                                            alt1 = 2;
                                        }
                                        break;
                                    default:
                                        if (backtracking > 0) { failed = true; return retval; }
                                        NoViableAltException nvae_d1s1 =
                                            new NoViableAltException("101:4: ( as2CompilationUnit | as3CompilationUnit )", 1, 1, input);

                                        throw nvae_d1s1;
                                }

                            }
                            break;
                        case ML_COMMENT:
                            {
                                switch (input.LA(2))
                                {
                                    case SL_COMMENT:
                                        {
                                            int LA1_35 = input.LA(3);

                                            if ((synpred1()))
                                            {
                                                alt1 = 1;
                                            }
                                            else if ((true))
                                            {
                                                alt1 = 2;
                                            }
                                            else
                                            {
                                                if (backtracking > 0) { failed = true; return retval; }
                                                NoViableAltException nvae_d1s35 =
                                                    new NoViableAltException("101:4: ( as2CompilationUnit | as3CompilationUnit )", 1, 35, input);

                                                throw nvae_d1s35;
                                            }
                                        }
                                        break;
                                    case ML_COMMENT:
                                        {
                                            int LA1_36 = input.LA(3);

                                            if ((synpred1()))
                                            {
                                                alt1 = 1;
                                            }
                                            else if ((true))
                                            {
                                                alt1 = 2;
                                            }
                                            else
                                            {
                                                if (backtracking > 0) { failed = true; return retval; }
                                                NoViableAltException nvae_d1s36 =
                                                    new NoViableAltException("101:4: ( as2CompilationUnit | as3CompilationUnit )", 1, 36, input);

                                                throw nvae_d1s36;
                                            }
                                        }
                                        break;
                                    case IMPORT:
                                    case CLASS:
                                    case INTERFACE:
                                    case IDENT:
                                    case PUBLIC:
                                    case PRIVATE:
                                    case PROTECTED:
                                    case INTERNAL:
                                    case LBRACK:
                                    case STATIC:
                                    case DYNAMIC:
                                    case 175:
                                    case 181:
                                    case 182:
                                    case 183:
                                    case 184:
                                    case 185:
                                        {
                                            alt1 = 1;
                                        }
                                        break;
                                    case PACKAGE:
                                        {
                                            alt1 = 2;
                                        }
                                        break;
                                    default:
                                        if (backtracking > 0) { failed = true; return retval; }
                                        NoViableAltException nvae_d1s2 =
                                            new NoViableAltException("101:4: ( as2CompilationUnit | as3CompilationUnit )", 1, 2, input);

                                        throw nvae_d1s2;
                                }

                            }
                            break;
                        case IMPORT:
                        case CLASS:
                        case INTERFACE:
                        case IDENT:
                        case PUBLIC:
                        case PRIVATE:
                        case PROTECTED:
                        case INTERNAL:
                        case LBRACK:
                        case STATIC:
                        case DYNAMIC:
                        case 175:
                        case 181:
                        case 182:
                        case 183:
                        case 184:
                        case 185:
                            {
                                alt1 = 1;
                            }
                            break;
                        case PACKAGE:
                            {
                                alt1 = 2;
                            }
                            break;
                        default:
                            if (backtracking > 0) { failed = true; return retval; }
                            NoViableAltException nvae_d1s0 =
                                new NoViableAltException("101:4: ( as2CompilationUnit | as3CompilationUnit )", 1, 0, input);

                            throw nvae_d1s0;
                    }

                    switch (alt1)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:101:6: as2CompilationUnit
                            {
                                PushFollow(FOLLOW_as2CompilationUnit_in_compilationUnit348);
                                as2CompilationUnit1 = as2CompilationUnit();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) stream_as2CompilationUnit.Add(as2CompilationUnit1.Tree);

                            }
                            break;
                        case 2:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:102:5: as3CompilationUnit
                            {
                                PushFollow(FOLLOW_as3CompilationUnit_in_compilationUnit354);
                                as3CompilationUnit2 = as3CompilationUnit();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) stream_as3CompilationUnit.Add(as3CompilationUnit2.Tree);

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements:          as3CompilationUnit, as2CompilationUnit
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 103:5: -> ^( COMPILATION_UNIT ( as2CompilationUnit )? ( as3CompilationUnit )? )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:103:8: ^( COMPILATION_UNIT ( as2CompilationUnit )? ( as3CompilationUnit )? )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(COMPILATION_UNIT, "COMPILATION_UNIT"), root_1);

                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:103:27: ( as2CompilationUnit )?
                                if (stream_as2CompilationUnit.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_as2CompilationUnit.Next());

                                }
                                stream_as2CompilationUnit.Reset();
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:103:47: ( as3CompilationUnit )?
                                if (stream_as3CompilationUnit.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_as3CompilationUnit.Next());

                                }
                                stream_as3CompilationUnit.Reset();

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 1, compilationUnit_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end compilationUnit

        public class as2CompilationUnit_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start as2CompilationUnit
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:106:1: as2CompilationUnit : ( commentExpression )? ( importDefinition )* ( annotations | commentExpression )* as2Type ;
        public as2CompilationUnit_return as2CompilationUnit() // throws RecognitionException [1]
        {
            as2CompilationUnit_return retval = new as2CompilationUnit_return();
            retval.start = input.LT(1);
            int as2CompilationUnit_StartIndex = input.Index();
            CommonTree root_0 = null;

            commentExpression_return commentExpression3 = null;

            importDefinition_return importDefinition4 = null;

            annotations_return annotations5 = null;

            commentExpression_return commentExpression6 = null;

            as2Type_return as2Type7 = null;



            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 2))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:107:4: ( ( commentExpression )? ( importDefinition )* ( annotations | commentExpression )* as2Type )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:107:4: ( commentExpression )? ( importDefinition )* ( annotations | commentExpression )* as2Type
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:107:4: ( commentExpression )?
                    int alt2 = 2;
                    int LA2_0 = input.LA(1);

                    if ((LA2_0 == SL_COMMENT))
                    {
                        int LA2_1 = input.LA(2);

                        if ((synpred2()))
                        {
                            alt2 = 1;
                        }
                    }
                    else if ((LA2_0 == ML_COMMENT))
                    {
                        int LA2_2 = input.LA(2);

                        if ((synpred2()))
                        {
                            alt2 = 1;
                        }
                    }
                    switch (alt2)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: commentExpression
                            {
                                PushFollow(FOLLOW_commentExpression_in_as2CompilationUnit382);
                                commentExpression3 = commentExpression();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) adaptor.AddChild(root_0, commentExpression3.Tree);

                            }
                            break;

                    }

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:108:3: ( importDefinition )*
                    do
                    {
                        int alt3 = 2;
                        int LA3_0 = input.LA(1);

                        if ((LA3_0 == IMPORT))
                        {
                            alt3 = 1;
                        }


                        switch (alt3)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: importDefinition
                                {
                                    PushFollow(FOLLOW_importDefinition_in_as2CompilationUnit388);
                                    importDefinition4 = importDefinition();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) adaptor.AddChild(root_0, importDefinition4.Tree);

                                }
                                break;

                            default:
                                goto loop3;
                        }
                    } while (true);

                loop3:
                    ;	// Stops C# compiler whinging that label 'loop3' has no statements

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:109:3: ( annotations | commentExpression )*
                    do
                    {
                        int alt4 = 3;
                        int LA4_0 = input.LA(1);

                        if ((LA4_0 == LBRACK || LA4_0 == 175))
                        {
                            alt4 = 1;
                        }
                        else if (((LA4_0 >= SL_COMMENT && LA4_0 <= ML_COMMENT)))
                        {
                            alt4 = 2;
                        }


                        switch (alt4)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:109:4: annotations
                                {
                                    PushFollow(FOLLOW_annotations_in_as2CompilationUnit394);
                                    annotations5 = annotations();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) adaptor.AddChild(root_0, annotations5.Tree);

                                }
                                break;
                            case 2:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:109:18: commentExpression
                                {
                                    PushFollow(FOLLOW_commentExpression_in_as2CompilationUnit398);
                                    commentExpression6 = commentExpression();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) adaptor.AddChild(root_0, commentExpression6.Tree);

                                }
                                break;

                            default:
                                goto loop4;
                        }
                    } while (true);

                loop4:
                    ;	// Stops C# compiler whinging that label 'loop4' has no statements

                    PushFollow(FOLLOW_as2Type_in_as2CompilationUnit404);
                    as2Type7 = as2Type();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, as2Type7.Tree);

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 2, as2CompilationUnit_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end as2CompilationUnit

        public class as2Type_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start as2Type
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:113:1: as2Type : mods= modifiers ( as2ClassDefinition[$mods.tree] | as2InterfaceDefinition[$mods.tree] ) ;
        public as2Type_return as2Type() // throws RecognitionException [1]
        {
            as2Type_return retval = new as2Type_return();
            retval.start = input.LT(1);
            int as2Type_StartIndex = input.Index();
            CommonTree root_0 = null;

            modifiers_return mods = null;

            as2ClassDefinition_return as2ClassDefinition8 = null;

            as2InterfaceDefinition_return as2InterfaceDefinition9 = null;



            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 3))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:114:4: (mods= modifiers ( as2ClassDefinition[$mods.tree] | as2InterfaceDefinition[$mods.tree] ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:114:4: mods= modifiers ( as2ClassDefinition[$mods.tree] | as2InterfaceDefinition[$mods.tree] )
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    PushFollow(FOLLOW_modifiers_in_as2Type417);
                    mods = modifiers();
                    followingStackPointer_--;
                    if (failed) return retval;
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:115:2: ( as2ClassDefinition[$mods.tree] | as2InterfaceDefinition[$mods.tree] )
                    int alt5 = 2;
                    int LA5_0 = input.LA(1);

                    if ((LA5_0 == CLASS))
                    {
                        alt5 = 1;
                    }
                    else if ((LA5_0 == INTERFACE))
                    {
                        alt5 = 2;
                    }
                    else
                    {
                        if (backtracking > 0) { failed = true; return retval; }
                        NoViableAltException nvae_d5s0 =
                            new NoViableAltException("115:2: ( as2ClassDefinition[$mods.tree] | as2InterfaceDefinition[$mods.tree] )", 5, 0, input);

                        throw nvae_d5s0;
                    }
                    switch (alt5)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:115:4: as2ClassDefinition[$mods.tree]
                            {
                                PushFollow(FOLLOW_as2ClassDefinition_in_as2Type423);
                                as2ClassDefinition8 = as2ClassDefinition(((CommonTree)mods.tree));
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) adaptor.AddChild(root_0, as2ClassDefinition8.Tree);

                            }
                            break;
                        case 2:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:116:4: as2InterfaceDefinition[$mods.tree]
                            {
                                PushFollow(FOLLOW_as2InterfaceDefinition_in_as2Type429);
                                as2InterfaceDefinition9 = as2InterfaceDefinition(((CommonTree)mods.tree));
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) adaptor.AddChild(root_0, as2InterfaceDefinition9.Tree);

                            }
                            break;

                    }


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 3, as2Type_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end as2Type

        public class as3CompilationUnit_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start as3CompilationUnit
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:120:1: as3CompilationUnit : ( commentExpression )? packageDecl ( packageBlockEntry )* EOF ;
        public as3CompilationUnit_return as3CompilationUnit() // throws RecognitionException [1]
        {
            as3CompilationUnit_return retval = new as3CompilationUnit_return();
            retval.start = input.LT(1);
            int as3CompilationUnit_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken EOF13 = null;
            commentExpression_return commentExpression10 = null;

            packageDecl_return packageDecl11 = null;

            packageBlockEntry_return packageBlockEntry12 = null;


            CommonTree EOF13_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 4))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:121:6: ( ( commentExpression )? packageDecl ( packageBlockEntry )* EOF )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:121:6: ( commentExpression )? packageDecl ( packageBlockEntry )* EOF
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:121:6: ( commentExpression )?
                    int alt6 = 2;
                    int LA6_0 = input.LA(1);

                    if (((LA6_0 >= SL_COMMENT && LA6_0 <= ML_COMMENT)))
                    {
                        alt6 = 1;
                    }
                    switch (alt6)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: commentExpression
                            {
                                PushFollow(FOLLOW_commentExpression_in_as3CompilationUnit447);
                                commentExpression10 = commentExpression();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) adaptor.AddChild(root_0, commentExpression10.Tree);

                            }
                            break;

                    }

                    PushFollow(FOLLOW_packageDecl_in_as3CompilationUnit452);
                    packageDecl11 = packageDecl();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, packageDecl11.Tree);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:123:3: ( packageBlockEntry )*
                    do
                    {
                        int alt7 = 2;
                        int LA7_0 = input.LA(1);

                        if (((LA7_0 >= SEMI && LA7_0 <= INTERFACE) || LA7_0 == FUNCTION || (LA7_0 >= NAMESPACE && LA7_0 <= CONST) || (LA7_0 >= IDENT && LA7_0 <= LBRACK) || (LA7_0 >= STATIC && LA7_0 <= DYNAMIC) || (LA7_0 >= SL_COMMENT && LA7_0 <= ML_COMMENT) || LA7_0 == 175 || (LA7_0 >= 181 && LA7_0 <= 185)))
                        {
                            alt7 = 1;
                        }


                        switch (alt7)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: packageBlockEntry
                                {
                                    PushFollow(FOLLOW_packageBlockEntry_in_as3CompilationUnit456);
                                    packageBlockEntry12 = packageBlockEntry();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) adaptor.AddChild(root_0, packageBlockEntry12.Tree);

                                }
                                break;

                            default:
                                goto loop7;
                        }
                    } while (true);

                loop7:
                    ;	// Stops C# compiler whinging that label 'loop7' has no statements

                    EOF13 = (IToken)input.LT(1);
                    Match(input, EOF, FOLLOW_EOF_in_as3CompilationUnit461); if (failed) return retval;

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 4, as3CompilationUnit_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end as3CompilationUnit

        public class packageDecl_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start packageDecl
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:127:1: packageDecl : PACKAGE ( identifier )? packageBlock ;
        public packageDecl_return packageDecl() // throws RecognitionException [1]
        {
            packageDecl_return retval = new packageDecl_return();
            retval.start = input.LT(1);
            int packageDecl_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken PACKAGE14 = null;
            identifier_return identifier15 = null;

            packageBlock_return packageBlock16 = null;


            CommonTree PACKAGE14_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 5))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:128:4: ( PACKAGE ( identifier )? packageBlock )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:128:4: PACKAGE ( identifier )? packageBlock
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    PACKAGE14 = (IToken)input.LT(1);
                    Match(input, PACKAGE, FOLLOW_PACKAGE_in_packageDecl473); if (failed) return retval;
                    if (backtracking == 0)
                    {
                        PACKAGE14_tree = (CommonTree)adaptor.Create(PACKAGE14);
                        root_0 = (CommonTree)adaptor.BecomeRoot(PACKAGE14_tree, root_0);
                    }
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:128:13: ( identifier )?
                    int alt8 = 2;
                    int LA8_0 = input.LA(1);

                    if (((LA8_0 >= GET && LA8_0 <= USE) || LA8_0 == XML || (LA8_0 >= IDENT && LA8_0 <= INTERNAL) || LA8_0 == DYNAMIC || (LA8_0 >= IS && LA8_0 <= AS)))
                    {
                        alt8 = 1;
                    }
                    switch (alt8)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: identifier
                            {
                                PushFollow(FOLLOW_identifier_in_packageDecl476);
                                identifier15 = identifier();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) adaptor.AddChild(root_0, identifier15.Tree);

                            }
                            break;

                    }

                    PushFollow(FOLLOW_packageBlock_in_packageDecl481);
                    packageBlock16 = packageBlock();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, packageBlock16.Tree);

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 5, packageDecl_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end packageDecl

        public class packageBlock_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start packageBlock
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:132:1: packageBlock : LCURLY ( packageBlockEntry )* RCURLY -> ^( BLOCK ( packageBlockEntry )* ) ;
        public packageBlock_return packageBlock() // throws RecognitionException [1]
        {
            packageBlock_return retval = new packageBlock_return();
            retval.start = input.LT(1);
            int packageBlock_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken LCURLY17 = null;
            IToken RCURLY19 = null;
            packageBlockEntry_return packageBlockEntry18 = null;


            CommonTree LCURLY17_tree = null;
            CommonTree RCURLY19_tree = null;
            RewriteRuleTokenStream stream_LCURLY = new RewriteRuleTokenStream(adaptor, "token LCURLY");
            RewriteRuleTokenStream stream_RCURLY = new RewriteRuleTokenStream(adaptor, "token RCURLY");
            RewriteRuleSubtreeStream stream_packageBlockEntry = new RewriteRuleSubtreeStream(adaptor, "rule packageBlockEntry");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 6))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:133:4: ( LCURLY ( packageBlockEntry )* RCURLY -> ^( BLOCK ( packageBlockEntry )* ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:133:4: LCURLY ( packageBlockEntry )* RCURLY
                {
                    LCURLY17 = (IToken)input.LT(1);
                    Match(input, LCURLY, FOLLOW_LCURLY_in_packageBlock492); if (failed) return retval;
                    if (backtracking == 0) stream_LCURLY.Add(LCURLY17);

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:134:3: ( packageBlockEntry )*
                    do
                    {
                        int alt9 = 2;
                        int LA9_0 = input.LA(1);

                        if (((LA9_0 >= SEMI && LA9_0 <= INTERFACE) || LA9_0 == FUNCTION || (LA9_0 >= NAMESPACE && LA9_0 <= CONST) || (LA9_0 >= IDENT && LA9_0 <= LBRACK) || (LA9_0 >= STATIC && LA9_0 <= DYNAMIC) || (LA9_0 >= SL_COMMENT && LA9_0 <= ML_COMMENT) || LA9_0 == 175 || (LA9_0 >= 181 && LA9_0 <= 185)))
                        {
                            alt9 = 1;
                        }


                        switch (alt9)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: packageBlockEntry
                                {
                                    PushFollow(FOLLOW_packageBlockEntry_in_packageBlock496);
                                    packageBlockEntry18 = packageBlockEntry();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) stream_packageBlockEntry.Add(packageBlockEntry18.Tree);

                                }
                                break;

                            default:
                                goto loop9;
                        }
                    } while (true);

                loop9:
                    ;	// Stops C# compiler whinging that label 'loop9' has no statements

                    RCURLY19 = (IToken)input.LT(1);
                    Match(input, RCURLY, FOLLOW_RCURLY_in_packageBlock501); if (failed) return retval;
                    if (backtracking == 0) stream_RCURLY.Add(RCURLY19);


                    // AST REWRITE
                    // elements:          packageBlockEntry
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 136:3: -> ^( BLOCK ( packageBlockEntry )* )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:136:6: ^( BLOCK ( packageBlockEntry )* )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(BLOCK, "BLOCK"), root_1);

                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:136:14: ( packageBlockEntry )*
                                while (stream_packageBlockEntry.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_packageBlockEntry.Next());

                                }
                                stream_packageBlockEntry.Reset();

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 6, packageBlock_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end packageBlock

        public class packageBlockEntry_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start packageBlockEntry
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:139:1: packageBlockEntry : ( ( importDefinition | ( annotations )? mods= modifiers ( classDefinition[$mods.tree] | interfaceDefinition[$mods.tree] | variableDefinition[$mods.tree] | methodDefinition[$mods.tree] | namespaceDefinition[$mods.tree] | useNamespaceDirective ) | SEMI ) | commentExpression );
        public packageBlockEntry_return packageBlockEntry() // throws RecognitionException [1]
        {
            packageBlockEntry_return retval = new packageBlockEntry_return();
            retval.start = input.LT(1);
            int packageBlockEntry_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken SEMI28 = null;
            modifiers_return mods = null;

            importDefinition_return importDefinition20 = null;

            annotations_return annotations21 = null;

            classDefinition_return classDefinition22 = null;

            interfaceDefinition_return interfaceDefinition23 = null;

            variableDefinition_return variableDefinition24 = null;

            methodDefinition_return methodDefinition25 = null;

            namespaceDefinition_return namespaceDefinition26 = null;

            useNamespaceDirective_return useNamespaceDirective27 = null;

            commentExpression_return commentExpression29 = null;


            CommonTree SEMI28_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 7))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:140:4: ( ( importDefinition | ( annotations )? mods= modifiers ( classDefinition[$mods.tree] | interfaceDefinition[$mods.tree] | variableDefinition[$mods.tree] | methodDefinition[$mods.tree] | namespaceDefinition[$mods.tree] | useNamespaceDirective ) | SEMI ) | commentExpression )
                int alt13 = 2;
                int LA13_0 = input.LA(1);

                if (((LA13_0 >= SEMI && LA13_0 <= INTERFACE) || LA13_0 == FUNCTION || (LA13_0 >= NAMESPACE && LA13_0 <= CONST) || (LA13_0 >= IDENT && LA13_0 <= LBRACK) || (LA13_0 >= STATIC && LA13_0 <= DYNAMIC) || LA13_0 == 175 || (LA13_0 >= 181 && LA13_0 <= 185)))
                {
                    alt13 = 1;
                }
                else if (((LA13_0 >= SL_COMMENT && LA13_0 <= ML_COMMENT)))
                {
                    alt13 = 2;
                }
                else
                {
                    if (backtracking > 0) { failed = true; return retval; }
                    NoViableAltException nvae_d13s0 =
                        new NoViableAltException("139:1: packageBlockEntry : ( ( importDefinition | ( annotations )? mods= modifiers ( classDefinition[$mods.tree] | interfaceDefinition[$mods.tree] | variableDefinition[$mods.tree] | methodDefinition[$mods.tree] | namespaceDefinition[$mods.tree] | useNamespaceDirective ) | SEMI ) | commentExpression );", 13, 0, input);

                    throw nvae_d13s0;
                }
                switch (alt13)
                {
                    case 1:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:140:4: ( importDefinition | ( annotations )? mods= modifiers ( classDefinition[$mods.tree] | interfaceDefinition[$mods.tree] | variableDefinition[$mods.tree] | methodDefinition[$mods.tree] | namespaceDefinition[$mods.tree] | useNamespaceDirective ) | SEMI )
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:140:4: ( importDefinition | ( annotations )? mods= modifiers ( classDefinition[$mods.tree] | interfaceDefinition[$mods.tree] | variableDefinition[$mods.tree] | methodDefinition[$mods.tree] | namespaceDefinition[$mods.tree] | useNamespaceDirective ) | SEMI )
                            int alt12 = 3;
                            switch (input.LA(1))
                            {
                                case IMPORT:
                                    {
                                        alt12 = 1;
                                    }
                                    break;
                                case CLASS:
                                case INTERFACE:
                                case FUNCTION:
                                case NAMESPACE:
                                case USE:
                                case VAR:
                                case CONST:
                                case IDENT:
                                case PUBLIC:
                                case PRIVATE:
                                case PROTECTED:
                                case INTERNAL:
                                case LBRACK:
                                case STATIC:
                                case DYNAMIC:
                                case 175:
                                case 181:
                                case 182:
                                case 183:
                                case 184:
                                case 185:
                                    {
                                        alt12 = 2;
                                    }
                                    break;
                                case SEMI:
                                    {
                                        alt12 = 3;
                                    }
                                    break;
                                default:
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d12s0 =
                                        new NoViableAltException("140:4: ( importDefinition | ( annotations )? mods= modifiers ( classDefinition[$mods.tree] | interfaceDefinition[$mods.tree] | variableDefinition[$mods.tree] | methodDefinition[$mods.tree] | namespaceDefinition[$mods.tree] | useNamespaceDirective ) | SEMI )", 12, 0, input);

                                    throw nvae_d12s0;
                            }

                            switch (alt12)
                            {
                                case 1:
                                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:140:6: importDefinition
                                    {
                                        PushFollow(FOLLOW_importDefinition_in_packageBlockEntry525);
                                        importDefinition20 = importDefinition();
                                        followingStackPointer_--;
                                        if (failed) return retval;
                                        if (backtracking == 0) adaptor.AddChild(root_0, importDefinition20.Tree);

                                    }
                                    break;
                                case 2:
                                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:141:5: ( annotations )? mods= modifiers ( classDefinition[$mods.tree] | interfaceDefinition[$mods.tree] | variableDefinition[$mods.tree] | methodDefinition[$mods.tree] | namespaceDefinition[$mods.tree] | useNamespaceDirective )
                                    {
                                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:141:5: ( annotations )?
                                        int alt10 = 2;
                                        int LA10_0 = input.LA(1);

                                        if ((LA10_0 == LBRACK || LA10_0 == 175))
                                        {
                                            alt10 = 1;
                                        }
                                        switch (alt10)
                                        {
                                            case 1:
                                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: annotations
                                                {
                                                    PushFollow(FOLLOW_annotations_in_packageBlockEntry531);
                                                    annotations21 = annotations();
                                                    followingStackPointer_--;
                                                    if (failed) return retval;
                                                    if (backtracking == 0) adaptor.AddChild(root_0, annotations21.Tree);

                                                }
                                                break;

                                        }

                                        PushFollow(FOLLOW_modifiers_in_packageBlockEntry539);
                                        mods = modifiers();
                                        followingStackPointer_--;
                                        if (failed) return retval;
                                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:143:4: ( classDefinition[$mods.tree] | interfaceDefinition[$mods.tree] | variableDefinition[$mods.tree] | methodDefinition[$mods.tree] | namespaceDefinition[$mods.tree] | useNamespaceDirective )
                                        int alt11 = 6;
                                        switch (input.LA(1))
                                        {
                                            case CLASS:
                                                {
                                                    alt11 = 1;
                                                }
                                                break;
                                            case INTERFACE:
                                                {
                                                    alt11 = 2;
                                                }
                                                break;
                                            case VAR:
                                            case CONST:
                                                {
                                                    alt11 = 3;
                                                }
                                                break;
                                            case FUNCTION:
                                                {
                                                    alt11 = 4;
                                                }
                                                break;
                                            case NAMESPACE:
                                                {
                                                    alt11 = 5;
                                                }
                                                break;
                                            case USE:
                                                {
                                                    alt11 = 6;
                                                }
                                                break;
                                            default:
                                                if (backtracking > 0) { failed = true; return retval; }
                                                NoViableAltException nvae_d11s0 =
                                                    new NoViableAltException("143:4: ( classDefinition[$mods.tree] | interfaceDefinition[$mods.tree] | variableDefinition[$mods.tree] | methodDefinition[$mods.tree] | namespaceDefinition[$mods.tree] | useNamespaceDirective )", 11, 0, input);

                                                throw nvae_d11s0;
                                        }

                                        switch (alt11)
                                        {
                                            case 1:
                                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:143:6: classDefinition[$mods.tree]
                                                {
                                                    PushFollow(FOLLOW_classDefinition_in_packageBlockEntry547);
                                                    classDefinition22 = classDefinition(((CommonTree)mods.tree));
                                                    followingStackPointer_--;
                                                    if (failed) return retval;
                                                    if (backtracking == 0) adaptor.AddChild(root_0, classDefinition22.Tree);

                                                }
                                                break;
                                            case 2:
                                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:144:6: interfaceDefinition[$mods.tree]
                                                {
                                                    PushFollow(FOLLOW_interfaceDefinition_in_packageBlockEntry555);
                                                    interfaceDefinition23 = interfaceDefinition(((CommonTree)mods.tree));
                                                    followingStackPointer_--;
                                                    if (failed) return retval;
                                                    if (backtracking == 0) adaptor.AddChild(root_0, interfaceDefinition23.Tree);

                                                }
                                                break;
                                            case 3:
                                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:145:6: variableDefinition[$mods.tree]
                                                {
                                                    PushFollow(FOLLOW_variableDefinition_in_packageBlockEntry563);
                                                    variableDefinition24 = variableDefinition(((CommonTree)mods.tree));
                                                    followingStackPointer_--;
                                                    if (failed) return retval;
                                                    if (backtracking == 0) adaptor.AddChild(root_0, variableDefinition24.Tree);

                                                }
                                                break;
                                            case 4:
                                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:146:6: methodDefinition[$mods.tree]
                                                {
                                                    PushFollow(FOLLOW_methodDefinition_in_packageBlockEntry571);
                                                    methodDefinition25 = methodDefinition(((CommonTree)mods.tree));
                                                    followingStackPointer_--;
                                                    if (failed) return retval;
                                                    if (backtracking == 0) adaptor.AddChild(root_0, methodDefinition25.Tree);

                                                }
                                                break;
                                            case 5:
                                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:147:6: namespaceDefinition[$mods.tree]
                                                {
                                                    PushFollow(FOLLOW_namespaceDefinition_in_packageBlockEntry579);
                                                    namespaceDefinition26 = namespaceDefinition(((CommonTree)mods.tree));
                                                    followingStackPointer_--;
                                                    if (failed) return retval;
                                                    if (backtracking == 0) adaptor.AddChild(root_0, namespaceDefinition26.Tree);

                                                }
                                                break;
                                            case 6:
                                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:148:6: useNamespaceDirective
                                                {
                                                    PushFollow(FOLLOW_useNamespaceDirective_in_packageBlockEntry587);
                                                    useNamespaceDirective27 = useNamespaceDirective();
                                                    followingStackPointer_--;
                                                    if (failed) return retval;
                                                    if (backtracking == 0) adaptor.AddChild(root_0, useNamespaceDirective27.Tree);

                                                }
                                                break;

                                        }


                                    }
                                    break;
                                case 3:
                                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:150:5: SEMI
                                    {
                                        SEMI28 = (IToken)input.LT(1);
                                        Match(input, SEMI, FOLLOW_SEMI_in_packageBlockEntry598); if (failed) return retval;

                                    }
                                    break;

                            }


                        }
                        break;
                    case 2:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:152:5: commentExpression
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_commentExpression_in_packageBlockEntry609);
                            commentExpression29 = commentExpression();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, commentExpression29.Tree);

                        }
                        break;

                }
                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 7, packageBlockEntry_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end packageBlockEntry

        public class endOfFile_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start endOfFile
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:155:1: endOfFile : EOF ;
        public endOfFile_return endOfFile() // throws RecognitionException [1]
        {
            endOfFile_return retval = new endOfFile_return();
            retval.start = input.LT(1);
            int endOfFile_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken EOF30 = null;

            CommonTree EOF30_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 8))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:156:4: ( EOF )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:156:4: EOF
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    EOF30 = (IToken)input.LT(1);
                    Match(input, EOF, FOLLOW_EOF_in_endOfFile620); if (failed) return retval;

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 8, endOfFile_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end endOfFile

        public class importDefinition_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start importDefinition
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:159:1: importDefinition : IMPORT identifierStar semi ;
        public importDefinition_return importDefinition() // throws RecognitionException [1]
        {
            importDefinition_return retval = new importDefinition_return();
            retval.start = input.LT(1);
            int importDefinition_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken IMPORT31 = null;
            identifierStar_return identifierStar32 = null;

            semi_return semi33 = null;


            CommonTree IMPORT31_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 9))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:160:4: ( IMPORT identifierStar semi )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:160:4: IMPORT identifierStar semi
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    IMPORT31 = (IToken)input.LT(1);
                    Match(input, IMPORT, FOLLOW_IMPORT_in_importDefinition632); if (failed) return retval;
                    if (backtracking == 0)
                    {
                        IMPORT31_tree = (CommonTree)adaptor.Create(IMPORT31);
                        root_0 = (CommonTree)adaptor.BecomeRoot(IMPORT31_tree, root_0);
                    }
                    PushFollow(FOLLOW_identifierStar_in_importDefinition635);
                    identifierStar32 = identifierStar();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, identifierStar32.Tree);
                    PushFollow(FOLLOW_semi_in_importDefinition637);
                    semi33 = semi();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, semi33.Tree);

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 9, importDefinition_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end importDefinition

        public class semi_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start semi
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:163:1: semi : ( SEMI | );
        public semi_return semi() // throws RecognitionException [1]
        {
            semi_return retval = new semi_return();
            retval.start = input.LT(1);
            int semi_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken SEMI34 = null;

            CommonTree SEMI34_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 10))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:164:4: ( SEMI | )
                int alt14 = 2;
                int LA14_0 = input.LA(1);

                if ((LA14_0 == SEMI))
                {
                    int LA14_1 = input.LA(2);

                    if ((synpred20()))
                    {
                        alt14 = 1;
                    }
                    else if ((true))
                    {
                        alt14 = 2;
                    }
                    else
                    {
                        if (backtracking > 0) { failed = true; return retval; }
                        NoViableAltException nvae_d14s1 =
                            new NoViableAltException("163:1: semi : ( SEMI | );", 14, 1, input);

                        throw nvae_d14s1;
                    }
                }
                else if ((LA14_0 == EOF || (LA14_0 >= LCURLY && LA14_0 <= RCURLY) || (LA14_0 >= IMPORT && LA14_0 <= INTERFACE) || (LA14_0 >= INCLUDE_DIRECTIVE && LA14_0 <= CONST) || LA14_0 == LPAREN || (LA14_0 >= IF && LA14_0 <= CASE) || (LA14_0 >= DEFAULT && LA14_0 <= FOR) || (LA14_0 >= WHILE && LA14_0 <= XML) || (LA14_0 >= IDENT && LA14_0 <= LBRACK) || (LA14_0 >= STATIC && LA14_0 <= DYNAMIC) || LA14_0 == LT || (LA14_0 >= IS && LA14_0 <= AS) || (LA14_0 >= PLUS && LA14_0 <= DIV) || (LA14_0 >= INC && LA14_0 <= BNOT) || (LA14_0 >= E4X_ATTRI && LA14_0 <= ML_COMMENT) || (LA14_0 >= 175 && LA14_0 <= 177) || (LA14_0 >= 180 && LA14_0 <= 185)))
                {
                    alt14 = 2;
                }
                else
                {
                    if (backtracking > 0) { failed = true; return retval; }
                    NoViableAltException nvae_d14s0 =
                        new NoViableAltException("163:1: semi : ( SEMI | );", 14, 0, input);

                    throw nvae_d14s0;
                }
                switch (alt14)
                {
                    case 1:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:164:4: SEMI
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            SEMI34 = (IToken)input.LT(1);
                            Match(input, SEMI, FOLLOW_SEMI_in_semi648); if (failed) return retval;

                        }
                        break;
                    case 2:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:166:2: 
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                        }
                        break;

                }
                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 10, semi_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end semi

        public class classDefinition_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start classDefinition
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:168:1: classDefinition[CommonTree mods] : CLASS ident classExtendsClause implementsClause typeBlock -> ^( CLASS_DEF ident classExtendsClause implementsClause typeBlock ) ;
        public classDefinition_return classDefinition(CommonTree mods) // throws RecognitionException [1]
        {
            classDefinition_return retval = new classDefinition_return();
            retval.start = input.LT(1);
            int classDefinition_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken CLASS35 = null;
            ident_return ident36 = null;

            classExtendsClause_return classExtendsClause37 = null;

            implementsClause_return implementsClause38 = null;

            typeBlock_return typeBlock39 = null;


            CommonTree CLASS35_tree = null;
            RewriteRuleTokenStream stream_CLASS = new RewriteRuleTokenStream(adaptor, "token CLASS");
            RewriteRuleSubtreeStream stream_classExtendsClause = new RewriteRuleSubtreeStream(adaptor, "rule classExtendsClause");
            RewriteRuleSubtreeStream stream_implementsClause = new RewriteRuleSubtreeStream(adaptor, "rule implementsClause");
            RewriteRuleSubtreeStream stream_ident = new RewriteRuleSubtreeStream(adaptor, "rule ident");
            RewriteRuleSubtreeStream stream_typeBlock = new RewriteRuleSubtreeStream(adaptor, "rule typeBlock");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 11))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:169:4: ( CLASS ident classExtendsClause implementsClause typeBlock -> ^( CLASS_DEF ident classExtendsClause implementsClause typeBlock ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:169:4: CLASS ident classExtendsClause implementsClause typeBlock
                {
                    CLASS35 = (IToken)input.LT(1);
                    Match(input, CLASS, FOLLOW_CLASS_in_classDefinition665); if (failed) return retval;
                    if (backtracking == 0) stream_CLASS.Add(CLASS35);

                    PushFollow(FOLLOW_ident_in_classDefinition667);
                    ident36 = ident();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_ident.Add(ident36.Tree);
                    PushFollow(FOLLOW_classExtendsClause_in_classDefinition671);
                    classExtendsClause37 = classExtendsClause();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_classExtendsClause.Add(classExtendsClause37.Tree);
                    PushFollow(FOLLOW_implementsClause_in_classDefinition675);
                    implementsClause38 = implementsClause();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_implementsClause.Add(implementsClause38.Tree);
                    PushFollow(FOLLOW_typeBlock_in_classDefinition679);
                    typeBlock39 = typeBlock();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_typeBlock.Add(typeBlock39.Tree);

                    // AST REWRITE
                    // elements:          typeBlock, implementsClause, ident, classExtendsClause
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 173:3: -> ^( CLASS_DEF ident classExtendsClause implementsClause typeBlock )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:173:6: ^( CLASS_DEF ident classExtendsClause implementsClause typeBlock )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(CLASS_DEF, "CLASS_DEF"), root_1);

                                adaptor.AddChild(root_1, mods);
                                adaptor.AddChild(root_1, stream_ident.Next());
                                adaptor.AddChild(root_1, stream_classExtendsClause.Next());
                                adaptor.AddChild(root_1, stream_implementsClause.Next());
                                adaptor.AddChild(root_1, stream_typeBlock.Next());

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 11, classDefinition_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end classDefinition

        public class as2ClassDefinition_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start as2ClassDefinition
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:176:1: as2ClassDefinition[CommonTree mods] : CLASS identifier classExtendsClause implementsClause typeBlock -> ^( CLASS_DEF identifier classExtendsClause implementsClause typeBlock ) ;
        public as2ClassDefinition_return as2ClassDefinition(CommonTree mods) // throws RecognitionException [1]
        {
            as2ClassDefinition_return retval = new as2ClassDefinition_return();
            retval.start = input.LT(1);
            int as2ClassDefinition_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken CLASS40 = null;
            identifier_return identifier41 = null;

            classExtendsClause_return classExtendsClause42 = null;

            implementsClause_return implementsClause43 = null;

            typeBlock_return typeBlock44 = null;


            CommonTree CLASS40_tree = null;
            RewriteRuleTokenStream stream_CLASS = new RewriteRuleTokenStream(adaptor, "token CLASS");
            RewriteRuleSubtreeStream stream_classExtendsClause = new RewriteRuleSubtreeStream(adaptor, "rule classExtendsClause");
            RewriteRuleSubtreeStream stream_implementsClause = new RewriteRuleSubtreeStream(adaptor, "rule implementsClause");
            RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor, "rule identifier");
            RewriteRuleSubtreeStream stream_typeBlock = new RewriteRuleSubtreeStream(adaptor, "rule typeBlock");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 12))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:177:4: ( CLASS identifier classExtendsClause implementsClause typeBlock -> ^( CLASS_DEF identifier classExtendsClause implementsClause typeBlock ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:177:4: CLASS identifier classExtendsClause implementsClause typeBlock
                {
                    CLASS40 = (IToken)input.LT(1);
                    Match(input, CLASS, FOLLOW_CLASS_in_as2ClassDefinition709); if (failed) return retval;
                    if (backtracking == 0) stream_CLASS.Add(CLASS40);

                    PushFollow(FOLLOW_identifier_in_as2ClassDefinition711);
                    identifier41 = identifier();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_identifier.Add(identifier41.Tree);
                    PushFollow(FOLLOW_classExtendsClause_in_as2ClassDefinition715);
                    classExtendsClause42 = classExtendsClause();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_classExtendsClause.Add(classExtendsClause42.Tree);
                    PushFollow(FOLLOW_implementsClause_in_as2ClassDefinition719);
                    implementsClause43 = implementsClause();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_implementsClause.Add(implementsClause43.Tree);
                    PushFollow(FOLLOW_typeBlock_in_as2ClassDefinition723);
                    typeBlock44 = typeBlock();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_typeBlock.Add(typeBlock44.Tree);

                    // AST REWRITE
                    // elements:          identifier, implementsClause, typeBlock, classExtendsClause
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 181:3: -> ^( CLASS_DEF identifier classExtendsClause implementsClause typeBlock )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:181:6: ^( CLASS_DEF identifier classExtendsClause implementsClause typeBlock )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(CLASS_DEF, "CLASS_DEF"), root_1);

                                adaptor.AddChild(root_1, mods);
                                adaptor.AddChild(root_1, stream_identifier.Next());
                                adaptor.AddChild(root_1, stream_classExtendsClause.Next());
                                adaptor.AddChild(root_1, stream_implementsClause.Next());
                                adaptor.AddChild(root_1, stream_typeBlock.Next());

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 12, as2ClassDefinition_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end as2ClassDefinition

        public class interfaceDefinition_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start interfaceDefinition
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:184:1: interfaceDefinition[CommonTree mods] : INTERFACE ident interfaceExtendsClause typeBlock -> ^( INTERFACE_DEF ident interfaceExtendsClause typeBlock ) ;
        public interfaceDefinition_return interfaceDefinition(CommonTree mods) // throws RecognitionException [1]
        {
            interfaceDefinition_return retval = new interfaceDefinition_return();
            retval.start = input.LT(1);
            int interfaceDefinition_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken INTERFACE45 = null;
            ident_return ident46 = null;

            interfaceExtendsClause_return interfaceExtendsClause47 = null;

            typeBlock_return typeBlock48 = null;


            CommonTree INTERFACE45_tree = null;
            RewriteRuleTokenStream stream_INTERFACE = new RewriteRuleTokenStream(adaptor, "token INTERFACE");
            RewriteRuleSubtreeStream stream_interfaceExtendsClause = new RewriteRuleSubtreeStream(adaptor, "rule interfaceExtendsClause");
            RewriteRuleSubtreeStream stream_ident = new RewriteRuleSubtreeStream(adaptor, "rule ident");
            RewriteRuleSubtreeStream stream_typeBlock = new RewriteRuleSubtreeStream(adaptor, "rule typeBlock");
            CommonTree annos = null;
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 13))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:186:4: ( INTERFACE ident interfaceExtendsClause typeBlock -> ^( INTERFACE_DEF ident interfaceExtendsClause typeBlock ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:186:4: INTERFACE ident interfaceExtendsClause typeBlock
                {
                    INTERFACE45 = (IToken)input.LT(1);
                    Match(input, INTERFACE, FOLLOW_INTERFACE_in_interfaceDefinition758); if (failed) return retval;
                    if (backtracking == 0) stream_INTERFACE.Add(INTERFACE45);

                    PushFollow(FOLLOW_ident_in_interfaceDefinition760);
                    ident46 = ident();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_ident.Add(ident46.Tree);
                    PushFollow(FOLLOW_interfaceExtendsClause_in_interfaceDefinition764);
                    interfaceExtendsClause47 = interfaceExtendsClause();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_interfaceExtendsClause.Add(interfaceExtendsClause47.Tree);
                    PushFollow(FOLLOW_typeBlock_in_interfaceDefinition768);
                    typeBlock48 = typeBlock();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_typeBlock.Add(typeBlock48.Tree);

                    // AST REWRITE
                    // elements:          typeBlock, interfaceExtendsClause, ident
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 189:3: -> ^( INTERFACE_DEF ident interfaceExtendsClause typeBlock )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:189:6: ^( INTERFACE_DEF ident interfaceExtendsClause typeBlock )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(INTERFACE_DEF, "INTERFACE_DEF"), root_1);

                                adaptor.AddChild(root_1, mods);
                                adaptor.AddChild(root_1, stream_ident.Next());
                                adaptor.AddChild(root_1, stream_interfaceExtendsClause.Next());
                                adaptor.AddChild(root_1, stream_typeBlock.Next());

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 13, interfaceDefinition_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end interfaceDefinition

        public class as2InterfaceDefinition_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start as2InterfaceDefinition
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:192:1: as2InterfaceDefinition[CommonTree mods] : INTERFACE identifier interfaceExtendsClause typeBlock -> ^( INTERFACE_DEF identifier interfaceExtendsClause typeBlock ) ;
        public as2InterfaceDefinition_return as2InterfaceDefinition(CommonTree mods) // throws RecognitionException [1]
        {
            as2InterfaceDefinition_return retval = new as2InterfaceDefinition_return();
            retval.start = input.LT(1);
            int as2InterfaceDefinition_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken INTERFACE49 = null;
            identifier_return identifier50 = null;

            interfaceExtendsClause_return interfaceExtendsClause51 = null;

            typeBlock_return typeBlock52 = null;


            CommonTree INTERFACE49_tree = null;
            RewriteRuleTokenStream stream_INTERFACE = new RewriteRuleTokenStream(adaptor, "token INTERFACE");
            RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor, "rule identifier");
            RewriteRuleSubtreeStream stream_interfaceExtendsClause = new RewriteRuleSubtreeStream(adaptor, "rule interfaceExtendsClause");
            RewriteRuleSubtreeStream stream_typeBlock = new RewriteRuleSubtreeStream(adaptor, "rule typeBlock");
            CommonTree annos = null;
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 14))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:194:4: ( INTERFACE identifier interfaceExtendsClause typeBlock -> ^( INTERFACE_DEF identifier interfaceExtendsClause typeBlock ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:194:4: INTERFACE identifier interfaceExtendsClause typeBlock
                {
                    INTERFACE49 = (IToken)input.LT(1);
                    Match(input, INTERFACE, FOLLOW_INTERFACE_in_as2InterfaceDefinition801); if (failed) return retval;
                    if (backtracking == 0) stream_INTERFACE.Add(INTERFACE49);

                    PushFollow(FOLLOW_identifier_in_as2InterfaceDefinition803);
                    identifier50 = identifier();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_identifier.Add(identifier50.Tree);
                    PushFollow(FOLLOW_interfaceExtendsClause_in_as2InterfaceDefinition807);
                    interfaceExtendsClause51 = interfaceExtendsClause();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_interfaceExtendsClause.Add(interfaceExtendsClause51.Tree);
                    PushFollow(FOLLOW_typeBlock_in_as2InterfaceDefinition811);
                    typeBlock52 = typeBlock();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_typeBlock.Add(typeBlock52.Tree);

                    // AST REWRITE
                    // elements:          typeBlock, identifier, interfaceExtendsClause
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 197:3: -> ^( INTERFACE_DEF identifier interfaceExtendsClause typeBlock )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:197:6: ^( INTERFACE_DEF identifier interfaceExtendsClause typeBlock )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(INTERFACE_DEF, "INTERFACE_DEF"), root_1);

                                adaptor.AddChild(root_1, mods);
                                adaptor.AddChild(root_1, stream_identifier.Next());
                                adaptor.AddChild(root_1, stream_interfaceExtendsClause.Next());
                                adaptor.AddChild(root_1, stream_typeBlock.Next());

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 14, as2InterfaceDefinition_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end as2InterfaceDefinition

        public class classExtendsClause_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start classExtendsClause
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:200:1: classExtendsClause : ( EXTENDS identifier )? ;
        public classExtendsClause_return classExtendsClause() // throws RecognitionException [1]
        {
            classExtendsClause_return retval = new classExtendsClause_return();
            retval.start = input.LT(1);
            int classExtendsClause_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken EXTENDS53 = null;
            identifier_return identifier54 = null;


            CommonTree EXTENDS53_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 15))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:201:4: ( ( EXTENDS identifier )? )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:201:4: ( EXTENDS identifier )?
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:201:4: ( EXTENDS identifier )?
                    int alt15 = 2;
                    int LA15_0 = input.LA(1);

                    if ((LA15_0 == EXTENDS))
                    {
                        alt15 = 1;
                    }
                    switch (alt15)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:201:5: EXTENDS identifier
                            {
                                EXTENDS53 = (IToken)input.LT(1);
                                Match(input, EXTENDS, FOLLOW_EXTENDS_in_classExtendsClause839); if (failed) return retval;
                                if (backtracking == 0)
                                {
                                    EXTENDS53_tree = (CommonTree)adaptor.Create(EXTENDS53);
                                    root_0 = (CommonTree)adaptor.BecomeRoot(EXTENDS53_tree, root_0);
                                }
                                PushFollow(FOLLOW_identifier_in_classExtendsClause842);
                                identifier54 = identifier();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) adaptor.AddChild(root_0, identifier54.Tree);

                            }
                            break;

                    }


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 15, classExtendsClause_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end classExtendsClause

        public class interfaceExtendsClause_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start interfaceExtendsClause
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:203:1: interfaceExtendsClause : ( EXTENDS identifier ( COMMA identifier )* )? ;
        public interfaceExtendsClause_return interfaceExtendsClause() // throws RecognitionException [1]
        {
            interfaceExtendsClause_return retval = new interfaceExtendsClause_return();
            retval.start = input.LT(1);
            int interfaceExtendsClause_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken EXTENDS55 = null;
            IToken COMMA57 = null;
            identifier_return identifier56 = null;

            identifier_return identifier58 = null;


            CommonTree EXTENDS55_tree = null;
            CommonTree COMMA57_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 16))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:204:4: ( ( EXTENDS identifier ( COMMA identifier )* )? )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:204:4: ( EXTENDS identifier ( COMMA identifier )* )?
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:204:4: ( EXTENDS identifier ( COMMA identifier )* )?
                    int alt17 = 2;
                    int LA17_0 = input.LA(1);

                    if ((LA17_0 == EXTENDS))
                    {
                        alt17 = 1;
                    }
                    switch (alt17)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:204:5: EXTENDS identifier ( COMMA identifier )*
                            {
                                EXTENDS55 = (IToken)input.LT(1);
                                Match(input, EXTENDS, FOLLOW_EXTENDS_in_interfaceExtendsClause855); if (failed) return retval;
                                if (backtracking == 0)
                                {
                                    EXTENDS55_tree = (CommonTree)adaptor.Create(EXTENDS55);
                                    root_0 = (CommonTree)adaptor.BecomeRoot(EXTENDS55_tree, root_0);
                                }
                                PushFollow(FOLLOW_identifier_in_interfaceExtendsClause858);
                                identifier56 = identifier();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) adaptor.AddChild(root_0, identifier56.Tree);
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:204:25: ( COMMA identifier )*
                                do
                                {
                                    int alt16 = 2;
                                    int LA16_0 = input.LA(1);

                                    if ((LA16_0 == COMMA))
                                    {
                                        alt16 = 1;
                                    }


                                    switch (alt16)
                                    {
                                        case 1:
                                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:204:27: COMMA identifier
                                            {
                                                COMMA57 = (IToken)input.LT(1);
                                                Match(input, COMMA, FOLLOW_COMMA_in_interfaceExtendsClause862); if (failed) return retval;
                                                PushFollow(FOLLOW_identifier_in_interfaceExtendsClause865);
                                                identifier58 = identifier();
                                                followingStackPointer_--;
                                                if (failed) return retval;
                                                if (backtracking == 0) adaptor.AddChild(root_0, identifier58.Tree);

                                            }
                                            break;

                                        default:
                                            goto loop16;
                                    }
                                } while (true);

                            loop16:
                                ;	// Stops C# compiler whinging that label 'loop16' has no statements


                            }
                            break;

                    }


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 16, interfaceExtendsClause_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end interfaceExtendsClause

        public class implementsClause_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start implementsClause
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:206:1: implementsClause : ( IMPLEMENTS identifier ( COMMA identifier )* )? ;
        public implementsClause_return implementsClause() // throws RecognitionException [1]
        {
            implementsClause_return retval = new implementsClause_return();
            retval.start = input.LT(1);
            int implementsClause_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken IMPLEMENTS59 = null;
            IToken COMMA61 = null;
            identifier_return identifier60 = null;

            identifier_return identifier62 = null;


            CommonTree IMPLEMENTS59_tree = null;
            CommonTree COMMA61_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 17))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:207:4: ( ( IMPLEMENTS identifier ( COMMA identifier )* )? )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:207:4: ( IMPLEMENTS identifier ( COMMA identifier )* )?
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:207:4: ( IMPLEMENTS identifier ( COMMA identifier )* )?
                    int alt19 = 2;
                    int LA19_0 = input.LA(1);

                    if ((LA19_0 == IMPLEMENTS))
                    {
                        alt19 = 1;
                    }
                    switch (alt19)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:207:5: IMPLEMENTS identifier ( COMMA identifier )*
                            {
                                IMPLEMENTS59 = (IToken)input.LT(1);
                                Match(input, IMPLEMENTS, FOLLOW_IMPLEMENTS_in_implementsClause880); if (failed) return retval;
                                if (backtracking == 0)
                                {
                                    IMPLEMENTS59_tree = (CommonTree)adaptor.Create(IMPLEMENTS59);
                                    root_0 = (CommonTree)adaptor.BecomeRoot(IMPLEMENTS59_tree, root_0);
                                }
                                PushFollow(FOLLOW_identifier_in_implementsClause883);
                                identifier60 = identifier();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) adaptor.AddChild(root_0, identifier60.Tree);
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:207:28: ( COMMA identifier )*
                                do
                                {
                                    int alt18 = 2;
                                    int LA18_0 = input.LA(1);

                                    if ((LA18_0 == COMMA))
                                    {
                                        alt18 = 1;
                                    }


                                    switch (alt18)
                                    {
                                        case 1:
                                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:207:30: COMMA identifier
                                            {
                                                COMMA61 = (IToken)input.LT(1);
                                                Match(input, COMMA, FOLLOW_COMMA_in_implementsClause887); if (failed) return retval;
                                                PushFollow(FOLLOW_identifier_in_implementsClause890);
                                                identifier62 = identifier();
                                                followingStackPointer_--;
                                                if (failed) return retval;
                                                if (backtracking == 0) adaptor.AddChild(root_0, identifier62.Tree);

                                            }
                                            break;

                                        default:
                                            goto loop18;
                                    }
                                } while (true);

                            loop18:
                                ;	// Stops C# compiler whinging that label 'loop18' has no statements


                            }
                            break;

                    }


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 17, implementsClause_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end implementsClause

        public class typeBlock_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start typeBlock
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:209:1: typeBlock : LCURLY ( typeBlockEntry )* RCURLY -> ^( TYPE_BLOCK ( typeBlockEntry )* ) ;
        public typeBlock_return typeBlock() // throws RecognitionException [1]
        {
            typeBlock_return retval = new typeBlock_return();
            retval.start = input.LT(1);
            int typeBlock_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken LCURLY63 = null;
            IToken RCURLY65 = null;
            typeBlockEntry_return typeBlockEntry64 = null;


            CommonTree LCURLY63_tree = null;
            CommonTree RCURLY65_tree = null;
            RewriteRuleTokenStream stream_LCURLY = new RewriteRuleTokenStream(adaptor, "token LCURLY");
            RewriteRuleTokenStream stream_RCURLY = new RewriteRuleTokenStream(adaptor, "token RCURLY");
            RewriteRuleSubtreeStream stream_typeBlockEntry = new RewriteRuleSubtreeStream(adaptor, "rule typeBlockEntry");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 18))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:210:4: ( LCURLY ( typeBlockEntry )* RCURLY -> ^( TYPE_BLOCK ( typeBlockEntry )* ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:210:4: LCURLY ( typeBlockEntry )* RCURLY
                {
                    LCURLY63 = (IToken)input.LT(1);
                    Match(input, LCURLY, FOLLOW_LCURLY_in_typeBlock904); if (failed) return retval;
                    if (backtracking == 0) stream_LCURLY.Add(LCURLY63);

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:211:3: ( typeBlockEntry )*
                    do
                    {
                        int alt20 = 2;
                        int LA20_0 = input.LA(1);

                        if ((LA20_0 == IMPORT || LA20_0 == INCLUDE_DIRECTIVE || LA20_0 == FUNCTION || (LA20_0 >= VAR && LA20_0 <= CONST) || (LA20_0 >= IDENT && LA20_0 <= LBRACK) || (LA20_0 >= STATIC && LA20_0 <= DYNAMIC) || (LA20_0 >= SL_COMMENT && LA20_0 <= ML_COMMENT) || LA20_0 == 175 || (LA20_0 >= 181 && LA20_0 <= 185)))
                        {
                            alt20 = 1;
                        }


                        switch (alt20)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: typeBlockEntry
                                {
                                    PushFollow(FOLLOW_typeBlockEntry_in_typeBlock908);
                                    typeBlockEntry64 = typeBlockEntry();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) stream_typeBlockEntry.Add(typeBlockEntry64.Tree);

                                }
                                break;

                            default:
                                goto loop20;
                        }
                    } while (true);

                loop20:
                    ;	// Stops C# compiler whinging that label 'loop20' has no statements

                    RCURLY65 = (IToken)input.LT(1);
                    Match(input, RCURLY, FOLLOW_RCURLY_in_typeBlock913); if (failed) return retval;
                    if (backtracking == 0) stream_RCURLY.Add(RCURLY65);


                    // AST REWRITE
                    // elements:          typeBlockEntry
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 213:3: -> ^( TYPE_BLOCK ( typeBlockEntry )* )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:213:6: ^( TYPE_BLOCK ( typeBlockEntry )* )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(TYPE_BLOCK, "TYPE_BLOCK"), root_1);

                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:213:19: ( typeBlockEntry )*
                                while (stream_typeBlockEntry.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_typeBlockEntry.Next());

                                }
                                stream_typeBlockEntry.Reset();

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 18, typeBlock_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end typeBlock

        public class typeBlockEntry_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start typeBlockEntry
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:216:1: typeBlockEntry : (m= modifiers ( variableDefinition[$m.tree] | methodDefinition[$m.tree] ) | importDefinition | as2IncludeDirective | commentExpression | annotations );
        public typeBlockEntry_return typeBlockEntry() // throws RecognitionException [1]
        {
            typeBlockEntry_return retval = new typeBlockEntry_return();
            retval.start = input.LT(1);
            int typeBlockEntry_StartIndex = input.Index();
            CommonTree root_0 = null;

            modifiers_return m = null;

            variableDefinition_return variableDefinition66 = null;

            methodDefinition_return methodDefinition67 = null;

            importDefinition_return importDefinition68 = null;

            as2IncludeDirective_return as2IncludeDirective69 = null;

            commentExpression_return commentExpression70 = null;

            annotations_return annotations71 = null;



            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 19))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:217:4: (m= modifiers ( variableDefinition[$m.tree] | methodDefinition[$m.tree] ) | importDefinition | as2IncludeDirective | commentExpression | annotations )
                int alt22 = 5;
                switch (input.LA(1))
                {
                    case FUNCTION:
                    case VAR:
                    case CONST:
                    case IDENT:
                    case PUBLIC:
                    case PRIVATE:
                    case PROTECTED:
                    case INTERNAL:
                    case STATIC:
                    case DYNAMIC:
                    case 181:
                    case 182:
                    case 183:
                    case 184:
                    case 185:
                        {
                            alt22 = 1;
                        }
                        break;
                    case IMPORT:
                        {
                            alt22 = 2;
                        }
                        break;
                    case INCLUDE_DIRECTIVE:
                        {
                            alt22 = 3;
                        }
                        break;
                    case SL_COMMENT:
                    case ML_COMMENT:
                        {
                            alt22 = 4;
                        }
                        break;
                    case LBRACK:
                    case 175:
                        {
                            alt22 = 5;
                        }
                        break;
                    default:
                        if (backtracking > 0) { failed = true; return retval; }
                        NoViableAltException nvae_d22s0 =
                            new NoViableAltException("216:1: typeBlockEntry : (m= modifiers ( variableDefinition[$m.tree] | methodDefinition[$m.tree] ) | importDefinition | as2IncludeDirective | commentExpression | annotations );", 22, 0, input);

                        throw nvae_d22s0;
                }

                switch (alt22)
                {
                    case 1:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:217:4: m= modifiers ( variableDefinition[$m.tree] | methodDefinition[$m.tree] )
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_modifiers_in_typeBlockEntry937);
                            m = modifiers();
                            followingStackPointer_--;
                            if (failed) return retval;
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:218:3: ( variableDefinition[$m.tree] | methodDefinition[$m.tree] )
                            int alt21 = 2;
                            int LA21_0 = input.LA(1);

                            if (((LA21_0 >= VAR && LA21_0 <= CONST)))
                            {
                                alt21 = 1;
                            }
                            else if ((LA21_0 == FUNCTION))
                            {
                                alt21 = 2;
                            }
                            else
                            {
                                if (backtracking > 0) { failed = true; return retval; }
                                NoViableAltException nvae_d21s0 =
                                    new NoViableAltException("218:3: ( variableDefinition[$m.tree] | methodDefinition[$m.tree] )", 21, 0, input);

                                throw nvae_d21s0;
                            }
                            switch (alt21)
                            {
                                case 1:
                                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:218:5: variableDefinition[$m.tree]
                                    {
                                        PushFollow(FOLLOW_variableDefinition_in_typeBlockEntry944);
                                        variableDefinition66 = variableDefinition(((CommonTree)m.tree));
                                        followingStackPointer_--;
                                        if (failed) return retval;
                                        if (backtracking == 0) adaptor.AddChild(root_0, variableDefinition66.Tree);

                                    }
                                    break;
                                case 2:
                                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:219:5: methodDefinition[$m.tree]
                                    {
                                        PushFollow(FOLLOW_methodDefinition_in_typeBlockEntry951);
                                        methodDefinition67 = methodDefinition(((CommonTree)m.tree));
                                        followingStackPointer_--;
                                        if (failed) return retval;
                                        if (backtracking == 0) adaptor.AddChild(root_0, methodDefinition67.Tree);

                                    }
                                    break;

                            }


                        }
                        break;
                    case 2:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:221:4: importDefinition
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_importDefinition_in_typeBlockEntry961);
                            importDefinition68 = importDefinition();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, importDefinition68.Tree);

                        }
                        break;
                    case 3:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:222:4: as2IncludeDirective
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_as2IncludeDirective_in_typeBlockEntry966);
                            as2IncludeDirective69 = as2IncludeDirective();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, as2IncludeDirective69.Tree);

                        }
                        break;
                    case 4:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:223:4: commentExpression
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_commentExpression_in_typeBlockEntry971);
                            commentExpression70 = commentExpression();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, commentExpression70.Tree);

                        }
                        break;
                    case 5:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:224:4: annotations
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_annotations_in_typeBlockEntry976);
                            annotations71 = annotations();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, annotations71.Tree);

                        }
                        break;

                }
                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 19, typeBlockEntry_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end typeBlockEntry

        public class as2IncludeDirective_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start as2IncludeDirective
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:227:1: as2IncludeDirective : INCLUDE_DIRECTIVE STRING_LITERAL -> ^( INCLUDE_DIRECTIVE STRING_LITERAL ) ;
        public as2IncludeDirective_return as2IncludeDirective() // throws RecognitionException [1]
        {
            as2IncludeDirective_return retval = new as2IncludeDirective_return();
            retval.start = input.LT(1);
            int as2IncludeDirective_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken INCLUDE_DIRECTIVE72 = null;
            IToken STRING_LITERAL73 = null;

            CommonTree INCLUDE_DIRECTIVE72_tree = null;
            CommonTree STRING_LITERAL73_tree = null;
            RewriteRuleTokenStream stream_INCLUDE_DIRECTIVE = new RewriteRuleTokenStream(adaptor, "token INCLUDE_DIRECTIVE");
            RewriteRuleTokenStream stream_STRING_LITERAL = new RewriteRuleTokenStream(adaptor, "token STRING_LITERAL");

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 20))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:228:4: ( INCLUDE_DIRECTIVE STRING_LITERAL -> ^( INCLUDE_DIRECTIVE STRING_LITERAL ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:228:4: INCLUDE_DIRECTIVE STRING_LITERAL
                {
                    INCLUDE_DIRECTIVE72 = (IToken)input.LT(1);
                    Match(input, INCLUDE_DIRECTIVE, FOLLOW_INCLUDE_DIRECTIVE_in_as2IncludeDirective987); if (failed) return retval;
                    if (backtracking == 0) stream_INCLUDE_DIRECTIVE.Add(INCLUDE_DIRECTIVE72);

                    STRING_LITERAL73 = (IToken)input.LT(1);
                    Match(input, STRING_LITERAL, FOLLOW_STRING_LITERAL_in_as2IncludeDirective989); if (failed) return retval;
                    if (backtracking == 0) stream_STRING_LITERAL.Add(STRING_LITERAL73);


                    // AST REWRITE
                    // elements:          INCLUDE_DIRECTIVE, STRING_LITERAL
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 228:37: -> ^( INCLUDE_DIRECTIVE STRING_LITERAL )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:228:40: ^( INCLUDE_DIRECTIVE STRING_LITERAL )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(stream_INCLUDE_DIRECTIVE.Next(), root_1);

                                adaptor.AddChild(root_1, stream_STRING_LITERAL.Next());

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 20, as2IncludeDirective_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end as2IncludeDirective

        public class includeDirective_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start includeDirective
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:231:1: includeDirective : 'include' STRING_LITERAL semi ;
        public includeDirective_return includeDirective() // throws RecognitionException [1]
        {
            includeDirective_return retval = new includeDirective_return();
            retval.start = input.LT(1);
            int includeDirective_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken string_literal74 = null;
            IToken STRING_LITERAL75 = null;
            semi_return semi76 = null;


            CommonTree string_literal74_tree = null;
            CommonTree STRING_LITERAL75_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 21))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:232:4: ( 'include' STRING_LITERAL semi )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:232:4: 'include' STRING_LITERAL semi
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    string_literal74 = (IToken)input.LT(1);
                    Match(input, 175, FOLLOW_175_in_includeDirective1008); if (failed) return retval;
                    if (backtracking == 0)
                    {
                        string_literal74_tree = (CommonTree)adaptor.Create(string_literal74);
                        adaptor.AddChild(root_0, string_literal74_tree);
                    }
                    STRING_LITERAL75 = (IToken)input.LT(1);
                    Match(input, STRING_LITERAL, FOLLOW_STRING_LITERAL_in_includeDirective1012); if (failed) return retval;
                    if (backtracking == 0)
                    {
                        STRING_LITERAL75_tree = (CommonTree)adaptor.Create(STRING_LITERAL75);
                        adaptor.AddChild(root_0, STRING_LITERAL75_tree);
                    }
                    PushFollow(FOLLOW_semi_in_includeDirective1016);
                    semi76 = semi();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, semi76.Tree);

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 21, includeDirective_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end includeDirective

        public class methodDefinition_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start methodDefinition
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:238:1: methodDefinition[CommonTree mods] : FUNCTION r= optionalAccessorRole ident parameterDeclarationList ( typeExpression )? ( block | semi ) -> ^( METHOD_DEF optionalAccessorRole ident parameterDeclarationList ( typeExpression )? ( block )? ) ;
        public methodDefinition_return methodDefinition(CommonTree mods) // throws RecognitionException [1]
        {
            methodDefinition_return retval = new methodDefinition_return();
            retval.start = input.LT(1);
            int methodDefinition_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken FUNCTION77 = null;
            optionalAccessorRole_return r = null;

            ident_return ident78 = null;

            parameterDeclarationList_return parameterDeclarationList79 = null;

            typeExpression_return typeExpression80 = null;

            block_return block81 = null;

            semi_return semi82 = null;


            CommonTree FUNCTION77_tree = null;
            RewriteRuleTokenStream stream_FUNCTION = new RewriteRuleTokenStream(adaptor, "token FUNCTION");
            RewriteRuleSubtreeStream stream_optionalAccessorRole = new RewriteRuleSubtreeStream(adaptor, "rule optionalAccessorRole");
            RewriteRuleSubtreeStream stream_semi = new RewriteRuleSubtreeStream(adaptor, "rule semi");
            RewriteRuleSubtreeStream stream_parameterDeclarationList = new RewriteRuleSubtreeStream(adaptor, "rule parameterDeclarationList");
            RewriteRuleSubtreeStream stream_ident = new RewriteRuleSubtreeStream(adaptor, "rule ident");
            RewriteRuleSubtreeStream stream_block = new RewriteRuleSubtreeStream(adaptor, "rule block");
            RewriteRuleSubtreeStream stream_typeExpression = new RewriteRuleSubtreeStream(adaptor, "rule typeExpression");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 22))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:239:4: ( FUNCTION r= optionalAccessorRole ident parameterDeclarationList ( typeExpression )? ( block | semi ) -> ^( METHOD_DEF optionalAccessorRole ident parameterDeclarationList ( typeExpression )? ( block )? ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:239:4: FUNCTION r= optionalAccessorRole ident parameterDeclarationList ( typeExpression )? ( block | semi )
                {
                    FUNCTION77 = (IToken)input.LT(1);
                    Match(input, FUNCTION, FOLLOW_FUNCTION_in_methodDefinition1029); if (failed) return retval;
                    if (backtracking == 0) stream_FUNCTION.Add(FUNCTION77);

                    PushFollow(FOLLOW_optionalAccessorRole_in_methodDefinition1035);
                    r = optionalAccessorRole();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_optionalAccessorRole.Add(r.Tree);
                    PushFollow(FOLLOW_ident_in_methodDefinition1039);
                    ident78 = ident();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_ident.Add(ident78.Tree);
                    PushFollow(FOLLOW_parameterDeclarationList_in_methodDefinition1043);
                    parameterDeclarationList79 = parameterDeclarationList();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_parameterDeclarationList.Add(parameterDeclarationList79.Tree);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:243:3: ( typeExpression )?
                    int alt23 = 2;
                    int LA23_0 = input.LA(1);

                    if ((LA23_0 == COLON))
                    {
                        alt23 = 1;
                    }
                    switch (alt23)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: typeExpression
                            {
                                PushFollow(FOLLOW_typeExpression_in_methodDefinition1047);
                                typeExpression80 = typeExpression();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) stream_typeExpression.Add(typeExpression80.Tree);

                            }
                            break;

                    }

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:244:3: ( block | semi )
                    int alt24 = 2;
                    int LA24_0 = input.LA(1);

                    if ((LA24_0 == LCURLY))
                    {
                        alt24 = 1;
                    }
                    else if ((LA24_0 == EOF || (LA24_0 >= RCURLY && LA24_0 <= INTERFACE) || LA24_0 == INCLUDE_DIRECTIVE || LA24_0 == FUNCTION || (LA24_0 >= NAMESPACE && LA24_0 <= CONST) || (LA24_0 >= IDENT && LA24_0 <= LBRACK) || (LA24_0 >= STATIC && LA24_0 <= DYNAMIC) || (LA24_0 >= SL_COMMENT && LA24_0 <= ML_COMMENT) || LA24_0 == 175 || (LA24_0 >= 181 && LA24_0 <= 185)))
                    {
                        alt24 = 2;
                    }
                    else
                    {
                        if (backtracking > 0) { failed = true; return retval; }
                        NoViableAltException nvae_d24s0 =
                            new NoViableAltException("244:3: ( block | semi )", 24, 0, input);

                        throw nvae_d24s0;
                    }
                    switch (alt24)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:244:4: block
                            {
                                PushFollow(FOLLOW_block_in_methodDefinition1053);
                                block81 = block();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) stream_block.Add(block81.Tree);

                            }
                            break;
                        case 2:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:244:10: semi
                            {
                                PushFollow(FOLLOW_semi_in_methodDefinition1055);
                                semi82 = semi();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) stream_semi.Add(semi82.Tree);

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements:          optionalAccessorRole, typeExpression, parameterDeclarationList, block, ident
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 245:3: -> ^( METHOD_DEF optionalAccessorRole ident parameterDeclarationList ( typeExpression )? ( block )? )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:245:6: ^( METHOD_DEF optionalAccessorRole ident parameterDeclarationList ( typeExpression )? ( block )? )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(METHOD_DEF, "METHOD_DEF"), root_1);

                                adaptor.AddChild(root_1, mods);
                                adaptor.AddChild(root_1, stream_optionalAccessorRole.Next());
                                adaptor.AddChild(root_1, stream_ident.Next());
                                adaptor.AddChild(root_1, stream_parameterDeclarationList.Next());
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:248:5: ( typeExpression )?
                                if (stream_typeExpression.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_typeExpression.Next());

                                }
                                stream_typeExpression.Reset();
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:249:5: ( block )?
                                if (stream_block.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_block.Next());

                                }
                                stream_block.Reset();

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 22, methodDefinition_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end methodDefinition

        public class optionalAccessorRole_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start optionalAccessorRole
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:252:1: optionalAccessorRole : ( accessorRole )? -> ^( ACCESSOR_ROLE ( accessorRole )? ) ;
        public optionalAccessorRole_return optionalAccessorRole() // throws RecognitionException [1]
        {
            optionalAccessorRole_return retval = new optionalAccessorRole_return();
            retval.start = input.LT(1);
            int optionalAccessorRole_StartIndex = input.Index();
            CommonTree root_0 = null;

            accessorRole_return accessorRole83 = null;


            RewriteRuleSubtreeStream stream_accessorRole = new RewriteRuleSubtreeStream(adaptor, "rule accessorRole");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 23))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:253:4: ( ( accessorRole )? -> ^( ACCESSOR_ROLE ( accessorRole )? ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:253:4: ( accessorRole )?
                {
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:253:4: ( accessorRole )?
                    int alt25 = 2;
                    int LA25_0 = input.LA(1);

                    if ((LA25_0 == GET))
                    {
                        int LA25_1 = input.LA(2);

                        if (((LA25_1 >= GET && LA25_1 <= USE) || LA25_1 == XML || LA25_1 == IDENT || LA25_1 == DYNAMIC || (LA25_1 >= IS && LA25_1 <= AS)))
                        {
                            alt25 = 1;
                        }
                    }
                    else if ((LA25_0 == SET))
                    {
                        int LA25_9 = input.LA(2);

                        if (((LA25_9 >= GET && LA25_9 <= USE) || LA25_9 == XML || LA25_9 == IDENT || LA25_9 == DYNAMIC || (LA25_9 >= IS && LA25_9 <= AS)))
                        {
                            alt25 = 1;
                        }
                    }
                    switch (alt25)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: accessorRole
                            {
                                PushFollow(FOLLOW_accessorRole_in_optionalAccessorRole1119);
                                accessorRole83 = accessorRole();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) stream_accessorRole.Add(accessorRole83.Tree);

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements:          accessorRole
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 254:3: -> ^( ACCESSOR_ROLE ( accessorRole )? )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:254:6: ^( ACCESSOR_ROLE ( accessorRole )? )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(ACCESSOR_ROLE, "ACCESSOR_ROLE"), root_1);

                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:254:22: ( accessorRole )?
                                if (stream_accessorRole.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_accessorRole.Next());

                                }
                                stream_accessorRole.Reset();

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 23, optionalAccessorRole_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end optionalAccessorRole

        public class accessorRole_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start accessorRole
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:257:1: accessorRole : ( GET | SET );
        public accessorRole_return accessorRole() // throws RecognitionException [1]
        {
            accessorRole_return retval = new accessorRole_return();
            retval.start = input.LT(1);
            int accessorRole_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken set84 = null;

            CommonTree set84_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 24))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:258:4: ( GET | SET )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    set84 = (IToken)input.LT(1);
                    if ((input.LA(1) >= GET && input.LA(1) <= SET))
                    {
                        input.Consume();
                        if (backtracking == 0) adaptor.AddChild(root_0, adaptor.Create(set84));
                        errorRecovery = false; failed = false;
                    }
                    else
                    {
                        if (backtracking > 0) { failed = true; return retval; }
                        MismatchedSetException mse =
                            new MismatchedSetException(null, input);
                        RecoverFromMismatchedSet(input, mse, FOLLOW_set_in_accessorRole0); throw mse;
                    }


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 24, accessorRole_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end accessorRole

        public class namespaceDefinition_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start namespaceDefinition
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:261:1: namespaceDefinition[CommonTree mods] : NAMESPACE ident -> ^( NAMESPACE_DEF NAMESPACE ident ) ;
        public namespaceDefinition_return namespaceDefinition(CommonTree mods) // throws RecognitionException [1]
        {
            namespaceDefinition_return retval = new namespaceDefinition_return();
            retval.start = input.LT(1);
            int namespaceDefinition_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken NAMESPACE85 = null;
            ident_return ident86 = null;


            CommonTree NAMESPACE85_tree = null;
            RewriteRuleTokenStream stream_NAMESPACE = new RewriteRuleTokenStream(adaptor, "token NAMESPACE");
            RewriteRuleSubtreeStream stream_ident = new RewriteRuleSubtreeStream(adaptor, "rule ident");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 25))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:262:4: ( NAMESPACE ident -> ^( NAMESPACE_DEF NAMESPACE ident ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:262:4: NAMESPACE ident
                {
                    NAMESPACE85 = (IToken)input.LT(1);
                    Match(input, NAMESPACE, FOLLOW_NAMESPACE_in_namespaceDefinition1158); if (failed) return retval;
                    if (backtracking == 0) stream_NAMESPACE.Add(NAMESPACE85);

                    PushFollow(FOLLOW_ident_in_namespaceDefinition1160);
                    ident86 = ident();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_ident.Add(ident86.Tree);

                    // AST REWRITE
                    // elements:          NAMESPACE, ident
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 263:3: -> ^( NAMESPACE_DEF NAMESPACE ident )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:263:6: ^( NAMESPACE_DEF NAMESPACE ident )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(NAMESPACE_DEF, "NAMESPACE_DEF"), root_1);

                                adaptor.AddChild(root_1, mods);
                                adaptor.AddChild(root_1, stream_NAMESPACE.Next());
                                adaptor.AddChild(root_1, stream_ident.Next());

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 25, namespaceDefinition_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end namespaceDefinition

        public class useNamespaceDirective_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start useNamespaceDirective
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:266:1: useNamespaceDirective : USE NAMESPACE ident semi ;
        public useNamespaceDirective_return useNamespaceDirective() // throws RecognitionException [1]
        {
            useNamespaceDirective_return retval = new useNamespaceDirective_return();
            retval.start = input.LT(1);
            int useNamespaceDirective_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken USE87 = null;
            IToken NAMESPACE88 = null;
            ident_return ident89 = null;

            semi_return semi90 = null;


            CommonTree USE87_tree = null;
            CommonTree NAMESPACE88_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 26))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:267:4: ( USE NAMESPACE ident semi )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:267:4: USE NAMESPACE ident semi
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    USE87 = (IToken)input.LT(1);
                    Match(input, USE, FOLLOW_USE_in_useNamespaceDirective1185); if (failed) return retval;
                    if (backtracking == 0)
                    {
                        USE87_tree = (CommonTree)adaptor.Create(USE87);
                        adaptor.AddChild(root_0, USE87_tree);
                    }
                    NAMESPACE88 = (IToken)input.LT(1);
                    Match(input, NAMESPACE, FOLLOW_NAMESPACE_in_useNamespaceDirective1187); if (failed) return retval;
                    if (backtracking == 0)
                    {
                        NAMESPACE88_tree = (CommonTree)adaptor.Create(NAMESPACE88);
                        adaptor.AddChild(root_0, NAMESPACE88_tree);
                    }
                    PushFollow(FOLLOW_ident_in_useNamespaceDirective1189);
                    ident89 = ident();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, ident89.Tree);
                    PushFollow(FOLLOW_semi_in_useNamespaceDirective1191);
                    semi90 = semi();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, semi90.Tree);

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 26, useNamespaceDirective_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end useNamespaceDirective

        public class variableDefinition_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start variableDefinition
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:270:1: variableDefinition[CommonTree mods] : decl= varOrConst variableDeclarator ( COMMA variableDeclarator )* semi -> ^( VAR_DEF $decl ( variableDeclarator )+ ) ;
        public variableDefinition_return variableDefinition(CommonTree mods) // throws RecognitionException [1]
        {
            InOperator_stack.Push(new InOperator_scope());

            variableDefinition_return retval = new variableDefinition_return();
            retval.start = input.LT(1);
            int variableDefinition_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken COMMA92 = null;
            varOrConst_return decl = null;

            variableDeclarator_return variableDeclarator91 = null;

            variableDeclarator_return variableDeclarator93 = null;

            semi_return semi94 = null;


            CommonTree COMMA92_tree = null;
            RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
            RewriteRuleSubtreeStream stream_semi = new RewriteRuleSubtreeStream(adaptor, "rule semi");
            RewriteRuleSubtreeStream stream_varOrConst = new RewriteRuleSubtreeStream(adaptor, "rule varOrConst");
            RewriteRuleSubtreeStream stream_variableDeclarator = new RewriteRuleSubtreeStream(adaptor, "rule variableDeclarator");

            ((InOperator_scope)InOperator_stack.Peek()).allowed = true;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 27))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:275:4: (decl= varOrConst variableDeclarator ( COMMA variableDeclarator )* semi -> ^( VAR_DEF $decl ( variableDeclarator )+ ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:275:4: decl= varOrConst variableDeclarator ( COMMA variableDeclarator )* semi
                {
                    PushFollow(FOLLOW_varOrConst_in_variableDefinition1215);
                    decl = varOrConst();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_varOrConst.Add(decl.Tree);
                    PushFollow(FOLLOW_variableDeclarator_in_variableDefinition1217);
                    variableDeclarator91 = variableDeclarator();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_variableDeclarator.Add(variableDeclarator91.Tree);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:276:3: ( COMMA variableDeclarator )*
                    do
                    {
                        int alt26 = 2;
                        int LA26_0 = input.LA(1);

                        if ((LA26_0 == COMMA))
                        {
                            alt26 = 1;
                        }


                        switch (alt26)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:276:4: COMMA variableDeclarator
                                {
                                    COMMA92 = (IToken)input.LT(1);
                                    Match(input, COMMA, FOLLOW_COMMA_in_variableDefinition1222); if (failed) return retval;
                                    if (backtracking == 0) stream_COMMA.Add(COMMA92);

                                    PushFollow(FOLLOW_variableDeclarator_in_variableDefinition1224);
                                    variableDeclarator93 = variableDeclarator();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) stream_variableDeclarator.Add(variableDeclarator93.Tree);

                                }
                                break;

                            default:
                                goto loop26;
                        }
                    } while (true);

                loop26:
                    ;	// Stops C# compiler whinging that label 'loop26' has no statements

                    PushFollow(FOLLOW_semi_in_variableDefinition1230);
                    semi94 = semi();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_semi.Add(semi94.Tree);

                    // AST REWRITE
                    // elements:          variableDeclarator, decl
                    // token labels:      
                    // rule labels:       decl, retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_decl = new RewriteRuleSubtreeStream(adaptor, "token decl", (decl != null ? decl.Tree : null));
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 278:3: -> ^( VAR_DEF $decl ( variableDeclarator )+ )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:278:6: ^( VAR_DEF $decl ( variableDeclarator )+ )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(VAR_DEF, "VAR_DEF"), root_1);

                                adaptor.AddChild(root_1, mods);
                                adaptor.AddChild(root_1, stream_decl.Next());
                                if (!(stream_variableDeclarator.HasNext()))
                                {
                                    throw new RewriteEarlyExitException();
                                }
                                while (stream_variableDeclarator.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_variableDeclarator.Next());

                                }
                                stream_variableDeclarator.Reset();

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 27, variableDefinition_StartIndex);
                }
                InOperator_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end variableDefinition

        public class varOrConst_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start varOrConst
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:281:1: varOrConst : ( VAR | CONST );
        public varOrConst_return varOrConst() // throws RecognitionException [1]
        {
            varOrConst_return retval = new varOrConst_return();
            retval.start = input.LT(1);
            int varOrConst_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken set95 = null;

            CommonTree set95_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 28))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:282:4: ( VAR | CONST )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    set95 = (IToken)input.LT(1);
                    if ((input.LA(1) >= VAR && input.LA(1) <= CONST))
                    {
                        input.Consume();
                        if (backtracking == 0) adaptor.AddChild(root_0, adaptor.Create(set95));
                        errorRecovery = false; failed = false;
                    }
                    else
                    {
                        if (backtracking > 0) { failed = true; return retval; }
                        MismatchedSetException mse =
                            new MismatchedSetException(null, input);
                        RecoverFromMismatchedSet(input, mse, FOLLOW_set_in_varOrConst0); throw mse;
                    }


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 28, varOrConst_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end varOrConst

        public class variableDeclarator_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start variableDeclarator
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:285:1: variableDeclarator : ident ( typeExpression )? ( variableInitializer )? ;
        public variableDeclarator_return variableDeclarator() // throws RecognitionException [1]
        {
            variableDeclarator_return retval = new variableDeclarator_return();
            retval.start = input.LT(1);
            int variableDeclarator_StartIndex = input.Index();
            CommonTree root_0 = null;

            ident_return ident96 = null;

            typeExpression_return typeExpression97 = null;

            variableInitializer_return variableInitializer98 = null;



            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 29))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:286:4: ( ident ( typeExpression )? ( variableInitializer )? )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:286:4: ident ( typeExpression )? ( variableInitializer )?
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    PushFollow(FOLLOW_ident_in_variableDeclarator1272);
                    ident96 = ident();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(ident96.Tree, root_0);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:286:11: ( typeExpression )?
                    int alt27 = 2;
                    int LA27_0 = input.LA(1);

                    if ((LA27_0 == COLON))
                    {
                        alt27 = 1;
                    }
                    switch (alt27)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: typeExpression
                            {
                                PushFollow(FOLLOW_typeExpression_in_variableDeclarator1275);
                                typeExpression97 = typeExpression();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) adaptor.AddChild(root_0, typeExpression97.Tree);

                            }
                            break;

                    }

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:286:27: ( variableInitializer )?
                    int alt28 = 2;
                    int LA28_0 = input.LA(1);

                    if ((LA28_0 == ASSIGN))
                    {
                        alt28 = 1;
                    }
                    switch (alt28)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: variableInitializer
                            {
                                PushFollow(FOLLOW_variableInitializer_in_variableDeclarator1278);
                                variableInitializer98 = variableInitializer();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) adaptor.AddChild(root_0, variableInitializer98.Tree);

                            }
                            break;

                    }


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 29, variableDeclarator_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end variableDeclarator

        public class declaration_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start declaration
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:288:1: declaration : varOrConst variableDeclarator declarationTail ;
        public declaration_return declaration() // throws RecognitionException [1]
        {
            declaration_return retval = new declaration_return();
            retval.start = input.LT(1);
            int declaration_StartIndex = input.Index();
            CommonTree root_0 = null;

            varOrConst_return varOrConst99 = null;

            variableDeclarator_return variableDeclarator100 = null;

            declarationTail_return declarationTail101 = null;



            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 30))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:289:4: ( varOrConst variableDeclarator declarationTail )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:289:4: varOrConst variableDeclarator declarationTail
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    PushFollow(FOLLOW_varOrConst_in_declaration1289);
                    varOrConst99 = varOrConst();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(varOrConst99.Tree, root_0);
                    PushFollow(FOLLOW_variableDeclarator_in_declaration1292);
                    variableDeclarator100 = variableDeclarator();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, variableDeclarator100.Tree);
                    PushFollow(FOLLOW_declarationTail_in_declaration1296);
                    declarationTail101 = declarationTail();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, declarationTail101.Tree);

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 30, declaration_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end declaration

        public class declarationTail_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start declarationTail
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:293:1: declarationTail : ( COMMA variableDeclarator )* ;
        public declarationTail_return declarationTail() // throws RecognitionException [1]
        {
            InOperator_stack.Push(new InOperator_scope());

            declarationTail_return retval = new declarationTail_return();
            retval.start = input.LT(1);
            int declarationTail_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken COMMA102 = null;
            variableDeclarator_return variableDeclarator103 = null;


            CommonTree COMMA102_tree = null;


            ((InOperator_scope)InOperator_stack.Peek()).allowed = true;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 31))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:298:4: ( ( COMMA variableDeclarator )* )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:298:4: ( COMMA variableDeclarator )*
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:298:4: ( COMMA variableDeclarator )*
                    do
                    {
                        int alt29 = 2;
                        int LA29_0 = input.LA(1);

                        if ((LA29_0 == COMMA))
                        {
                            alt29 = 1;
                        }


                        switch (alt29)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:298:5: COMMA variableDeclarator
                                {
                                    COMMA102 = (IToken)input.LT(1);
                                    Match(input, COMMA, FOLLOW_COMMA_in_declarationTail1318); if (failed) return retval;
                                    PushFollow(FOLLOW_variableDeclarator_in_declarationTail1321);
                                    variableDeclarator103 = variableDeclarator();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) adaptor.AddChild(root_0, variableDeclarator103.Tree);

                                }
                                break;

                            default:
                                goto loop29;
                        }
                    } while (true);

                loop29:
                    ;	// Stops C# compiler whinging that label 'loop29' has no statements


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 31, declarationTail_StartIndex);
                }
                InOperator_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end declarationTail

        public class variableInitializer_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start variableInitializer
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:301:1: variableInitializer : ASSIGN assignmentExpression ;
        public variableInitializer_return variableInitializer() // throws RecognitionException [1]
        {
            variableInitializer_return retval = new variableInitializer_return();
            retval.start = input.LT(1);
            int variableInitializer_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken ASSIGN104 = null;
            assignmentExpression_return assignmentExpression105 = null;


            CommonTree ASSIGN104_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 32))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:302:4: ( ASSIGN assignmentExpression )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:302:4: ASSIGN assignmentExpression
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    ASSIGN104 = (IToken)input.LT(1);
                    Match(input, ASSIGN, FOLLOW_ASSIGN_in_variableInitializer1334); if (failed) return retval;
                    if (backtracking == 0)
                    {
                        ASSIGN104_tree = (CommonTree)adaptor.Create(ASSIGN104);
                        root_0 = (CommonTree)adaptor.BecomeRoot(ASSIGN104_tree, root_0);
                    }
                    PushFollow(FOLLOW_assignmentExpression_in_variableInitializer1337);
                    assignmentExpression105 = assignmentExpression();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, assignmentExpression105.Tree);

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 32, variableInitializer_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end variableInitializer

        public class parameterDeclarationList_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start parameterDeclarationList
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:307:1: parameterDeclarationList : LPAREN ( parameterDeclaration ( COMMA parameterDeclaration )* )? RPAREN -> ^( PARAMS ( parameterDeclaration )* ) ;
        public parameterDeclarationList_return parameterDeclarationList() // throws RecognitionException [1]
        {
            parameterDeclarationList_return retval = new parameterDeclarationList_return();
            retval.start = input.LT(1);
            int parameterDeclarationList_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken LPAREN106 = null;
            IToken COMMA108 = null;
            IToken RPAREN110 = null;
            parameterDeclaration_return parameterDeclaration107 = null;

            parameterDeclaration_return parameterDeclaration109 = null;


            CommonTree LPAREN106_tree = null;
            CommonTree COMMA108_tree = null;
            CommonTree RPAREN110_tree = null;
            RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
            RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor, "token RPAREN");
            RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor, "token LPAREN");
            RewriteRuleSubtreeStream stream_parameterDeclaration = new RewriteRuleSubtreeStream(adaptor, "rule parameterDeclaration");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 33))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:308:4: ( LPAREN ( parameterDeclaration ( COMMA parameterDeclaration )* )? RPAREN -> ^( PARAMS ( parameterDeclaration )* ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:308:4: LPAREN ( parameterDeclaration ( COMMA parameterDeclaration )* )? RPAREN
                {
                    LPAREN106 = (IToken)input.LT(1);
                    Match(input, LPAREN, FOLLOW_LPAREN_in_parameterDeclarationList1350); if (failed) return retval;
                    if (backtracking == 0) stream_LPAREN.Add(LPAREN106);

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:309:3: ( parameterDeclaration ( COMMA parameterDeclaration )* )?
                    int alt31 = 2;
                    int LA31_0 = input.LA(1);

                    if (((LA31_0 >= GET && LA31_0 <= USE) || LA31_0 == CONST || LA31_0 == REST || LA31_0 == XML || LA31_0 == IDENT || LA31_0 == DYNAMIC || (LA31_0 >= IS && LA31_0 <= AS)))
                    {
                        alt31 = 1;
                    }
                    switch (alt31)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:309:5: parameterDeclaration ( COMMA parameterDeclaration )*
                            {
                                PushFollow(FOLLOW_parameterDeclaration_in_parameterDeclarationList1356);
                                parameterDeclaration107 = parameterDeclaration();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) stream_parameterDeclaration.Add(parameterDeclaration107.Tree);
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:310:4: ( COMMA parameterDeclaration )*
                                do
                                {
                                    int alt30 = 2;
                                    int LA30_0 = input.LA(1);

                                    if ((LA30_0 == COMMA))
                                    {
                                        alt30 = 1;
                                    }


                                    switch (alt30)
                                    {
                                        case 1:
                                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:310:5: COMMA parameterDeclaration
                                            {
                                                COMMA108 = (IToken)input.LT(1);
                                                Match(input, COMMA, FOLLOW_COMMA_in_parameterDeclarationList1362); if (failed) return retval;
                                                if (backtracking == 0) stream_COMMA.Add(COMMA108);

                                                PushFollow(FOLLOW_parameterDeclaration_in_parameterDeclarationList1364);
                                                parameterDeclaration109 = parameterDeclaration();
                                                followingStackPointer_--;
                                                if (failed) return retval;
                                                if (backtracking == 0) stream_parameterDeclaration.Add(parameterDeclaration109.Tree);

                                            }
                                            break;

                                        default:
                                            goto loop30;
                                    }
                                } while (true);

                            loop30:
                                ;	// Stops C# compiler whinging that label 'loop30' has no statements


                            }
                            break;

                    }

                    RPAREN110 = (IToken)input.LT(1);
                    Match(input, RPAREN, FOLLOW_RPAREN_in_parameterDeclarationList1375); if (failed) return retval;
                    if (backtracking == 0) stream_RPAREN.Add(RPAREN110);


                    // AST REWRITE
                    // elements:          parameterDeclaration
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 313:3: -> ^( PARAMS ( parameterDeclaration )* )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:313:6: ^( PARAMS ( parameterDeclaration )* )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(PARAMS, "PARAMS"), root_1);

                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:313:15: ( parameterDeclaration )*
                                while (stream_parameterDeclaration.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_parameterDeclaration.Next());

                                }
                                stream_parameterDeclaration.Reset();

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 33, parameterDeclarationList_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end parameterDeclarationList

        public class parameterDeclaration_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start parameterDeclaration
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:317:1: parameterDeclaration : ( basicParameterDeclaration | parameterRestDeclaration );
        public parameterDeclaration_return parameterDeclaration() // throws RecognitionException [1]
        {
            parameterDeclaration_return retval = new parameterDeclaration_return();
            retval.start = input.LT(1);
            int parameterDeclaration_StartIndex = input.Index();
            CommonTree root_0 = null;

            basicParameterDeclaration_return basicParameterDeclaration111 = null;

            parameterRestDeclaration_return parameterRestDeclaration112 = null;



            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 34))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:318:4: ( basicParameterDeclaration | parameterRestDeclaration )
                int alt32 = 2;
                int LA32_0 = input.LA(1);

                if (((LA32_0 >= GET && LA32_0 <= USE) || LA32_0 == CONST || LA32_0 == XML || LA32_0 == IDENT || LA32_0 == DYNAMIC || (LA32_0 >= IS && LA32_0 <= AS)))
                {
                    alt32 = 1;
                }
                else if ((LA32_0 == REST))
                {
                    alt32 = 2;
                }
                else
                {
                    if (backtracking > 0) { failed = true; return retval; }
                    NoViableAltException nvae_d32s0 =
                        new NoViableAltException("317:1: parameterDeclaration : ( basicParameterDeclaration | parameterRestDeclaration );", 32, 0, input);

                    throw nvae_d32s0;
                }
                switch (alt32)
                {
                    case 1:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:318:4: basicParameterDeclaration
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_basicParameterDeclaration_in_parameterDeclaration1398);
                            basicParameterDeclaration111 = basicParameterDeclaration();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, basicParameterDeclaration111.Tree);

                        }
                        break;
                    case 2:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:318:32: parameterRestDeclaration
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_parameterRestDeclaration_in_parameterDeclaration1402);
                            parameterRestDeclaration112 = parameterRestDeclaration();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, parameterRestDeclaration112.Tree);

                        }
                        break;

                }
                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 34, parameterDeclaration_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end parameterDeclaration

        public class basicParameterDeclaration_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start basicParameterDeclaration
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:321:1: basicParameterDeclaration : ( CONST )? ident ( typeExpression )? ( parameterDefault )? -> ^( PARAM ( CONST )? ident ( typeExpression )? ( parameterDefault )? ) ;
        public basicParameterDeclaration_return basicParameterDeclaration() // throws RecognitionException [1]
        {
            basicParameterDeclaration_return retval = new basicParameterDeclaration_return();
            retval.start = input.LT(1);
            int basicParameterDeclaration_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken CONST113 = null;
            ident_return ident114 = null;

            typeExpression_return typeExpression115 = null;

            parameterDefault_return parameterDefault116 = null;


            CommonTree CONST113_tree = null;
            RewriteRuleTokenStream stream_CONST = new RewriteRuleTokenStream(adaptor, "token CONST");
            RewriteRuleSubtreeStream stream_parameterDefault = new RewriteRuleSubtreeStream(adaptor, "rule parameterDefault");
            RewriteRuleSubtreeStream stream_ident = new RewriteRuleSubtreeStream(adaptor, "rule ident");
            RewriteRuleSubtreeStream stream_typeExpression = new RewriteRuleSubtreeStream(adaptor, "rule typeExpression");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 35))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:322:4: ( ( CONST )? ident ( typeExpression )? ( parameterDefault )? -> ^( PARAM ( CONST )? ident ( typeExpression )? ( parameterDefault )? ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:322:4: ( CONST )? ident ( typeExpression )? ( parameterDefault )?
                {
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:322:4: ( CONST )?
                    int alt33 = 2;
                    int LA33_0 = input.LA(1);

                    if ((LA33_0 == CONST))
                    {
                        alt33 = 1;
                    }
                    switch (alt33)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: CONST
                            {
                                CONST113 = (IToken)input.LT(1);
                                Match(input, CONST, FOLLOW_CONST_in_basicParameterDeclaration1413); if (failed) return retval;
                                if (backtracking == 0) stream_CONST.Add(CONST113);


                            }
                            break;

                    }

                    PushFollow(FOLLOW_ident_in_basicParameterDeclaration1416);
                    ident114 = ident();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_ident.Add(ident114.Tree);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:322:17: ( typeExpression )?
                    int alt34 = 2;
                    int LA34_0 = input.LA(1);

                    if ((LA34_0 == COLON))
                    {
                        alt34 = 1;
                    }
                    switch (alt34)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: typeExpression
                            {
                                PushFollow(FOLLOW_typeExpression_in_basicParameterDeclaration1418);
                                typeExpression115 = typeExpression();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) stream_typeExpression.Add(typeExpression115.Tree);

                            }
                            break;

                    }

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:322:33: ( parameterDefault )?
                    int alt35 = 2;
                    int LA35_0 = input.LA(1);

                    if ((LA35_0 == ASSIGN))
                    {
                        alt35 = 1;
                    }
                    switch (alt35)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: parameterDefault
                            {
                                PushFollow(FOLLOW_parameterDefault_in_basicParameterDeclaration1421);
                                parameterDefault116 = parameterDefault();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) stream_parameterDefault.Add(parameterDefault116.Tree);

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements:          CONST, typeExpression, parameterDefault, ident
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 323:3: -> ^( PARAM ( CONST )? ident ( typeExpression )? ( parameterDefault )? )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:323:6: ^( PARAM ( CONST )? ident ( typeExpression )? ( parameterDefault )? )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(PARAM, "PARAM"), root_1);

                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:323:14: ( CONST )?
                                if (stream_CONST.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_CONST.Next());

                                }
                                stream_CONST.Reset();
                                adaptor.AddChild(root_1, stream_ident.Next());
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:323:27: ( typeExpression )?
                                if (stream_typeExpression.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_typeExpression.Next());

                                }
                                stream_typeExpression.Reset();
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:323:43: ( parameterDefault )?
                                if (stream_parameterDefault.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_parameterDefault.Next());

                                }
                                stream_parameterDefault.Reset();

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 35, basicParameterDeclaration_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end basicParameterDeclaration

        public class parameterDefault_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start parameterDefault
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:326:1: parameterDefault : ASSIGN assignmentExpression ;
        public parameterDefault_return parameterDefault() // throws RecognitionException [1]
        {
            InOperator_stack.Push(new InOperator_scope());

            parameterDefault_return retval = new parameterDefault_return();
            retval.start = input.LT(1);
            int parameterDefault_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken ASSIGN117 = null;
            assignmentExpression_return assignmentExpression118 = null;


            CommonTree ASSIGN117_tree = null;


            ((InOperator_scope)InOperator_stack.Peek()).allowed = true;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 36))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:332:4: ( ASSIGN assignmentExpression )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:332:4: ASSIGN assignmentExpression
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    ASSIGN117 = (IToken)input.LT(1);
                    Match(input, ASSIGN, FOLLOW_ASSIGN_in_parameterDefault1465); if (failed) return retval;
                    if (backtracking == 0)
                    {
                        ASSIGN117_tree = (CommonTree)adaptor.Create(ASSIGN117);
                        root_0 = (CommonTree)adaptor.BecomeRoot(ASSIGN117_tree, root_0);
                    }
                    PushFollow(FOLLOW_assignmentExpression_in_parameterDefault1468);
                    assignmentExpression118 = assignmentExpression();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, assignmentExpression118.Tree);

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 36, parameterDefault_StartIndex);
                }
                InOperator_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end parameterDefault

        public class parameterRestDeclaration_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start parameterRestDeclaration
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:335:1: parameterRestDeclaration : REST ( ident )? -> ^( PARAM REST ( ident )? ) ;
        public parameterRestDeclaration_return parameterRestDeclaration() // throws RecognitionException [1]
        {
            parameterRestDeclaration_return retval = new parameterRestDeclaration_return();
            retval.start = input.LT(1);
            int parameterRestDeclaration_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken REST119 = null;
            ident_return ident120 = null;


            CommonTree REST119_tree = null;
            RewriteRuleTokenStream stream_REST = new RewriteRuleTokenStream(adaptor, "token REST");
            RewriteRuleSubtreeStream stream_ident = new RewriteRuleSubtreeStream(adaptor, "rule ident");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 37))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:336:4: ( REST ( ident )? -> ^( PARAM REST ( ident )? ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:336:4: REST ( ident )?
                {
                    REST119 = (IToken)input.LT(1);
                    Match(input, REST, FOLLOW_REST_in_parameterRestDeclaration1479); if (failed) return retval;
                    if (backtracking == 0) stream_REST.Add(REST119);

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:336:9: ( ident )?
                    int alt36 = 2;
                    int LA36_0 = input.LA(1);

                    if (((LA36_0 >= GET && LA36_0 <= USE) || LA36_0 == XML || LA36_0 == IDENT || LA36_0 == DYNAMIC || (LA36_0 >= IS && LA36_0 <= AS)))
                    {
                        alt36 = 1;
                    }
                    switch (alt36)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: ident
                            {
                                PushFollow(FOLLOW_ident_in_parameterRestDeclaration1481);
                                ident120 = ident();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) stream_ident.Add(ident120.Tree);

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements:          REST, ident
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 337:3: -> ^( PARAM REST ( ident )? )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:337:6: ^( PARAM REST ( ident )? )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(PARAM, "PARAM"), root_1);

                                adaptor.AddChild(root_1, stream_REST.Next());
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:337:19: ( ident )?
                                if (stream_ident.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_ident.Next());

                                }
                                stream_ident.Reset();

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 37, parameterRestDeclaration_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end parameterRestDeclaration

        public class block_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start block
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:339:1: block : LCURLY ( blockEntry )* RCURLY -> ^( BLOCK ( blockEntry )* ) ;
        public block_return block() // throws RecognitionException [1]
        {
            block_return retval = new block_return();
            retval.start = input.LT(1);
            int block_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken LCURLY121 = null;
            IToken RCURLY123 = null;
            blockEntry_return blockEntry122 = null;


            CommonTree LCURLY121_tree = null;
            CommonTree RCURLY123_tree = null;
            RewriteRuleTokenStream stream_LCURLY = new RewriteRuleTokenStream(adaptor, "token LCURLY");
            RewriteRuleTokenStream stream_RCURLY = new RewriteRuleTokenStream(adaptor, "token RCURLY");
            RewriteRuleSubtreeStream stream_blockEntry = new RewriteRuleSubtreeStream(adaptor, "rule blockEntry");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 38))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:340:4: ( LCURLY ( blockEntry )* RCURLY -> ^( BLOCK ( blockEntry )* ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:340:4: LCURLY ( blockEntry )* RCURLY
                {
                    LCURLY121 = (IToken)input.LT(1);
                    Match(input, LCURLY, FOLLOW_LCURLY_in_block1505); if (failed) return retval;
                    if (backtracking == 0) stream_LCURLY.Add(LCURLY121);

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:340:11: ( blockEntry )*
                    do
                    {
                        int alt37 = 2;
                        int LA37_0 = input.LA(1);

                        if ((LA37_0 == LCURLY || LA37_0 == SEMI || (LA37_0 >= STRING_LITERAL && LA37_0 <= CONST) || LA37_0 == LPAREN || LA37_0 == IF || (LA37_0 >= RETURN && LA37_0 <= SWITCH) || (LA37_0 >= DEFAULT && LA37_0 <= FOR) || (LA37_0 >= WHILE && LA37_0 <= XML) || (LA37_0 >= IDENT && LA37_0 <= LBRACK) || LA37_0 == DYNAMIC || LA37_0 == LT || (LA37_0 >= IS && LA37_0 <= AS) || (LA37_0 >= PLUS && LA37_0 <= DIV) || (LA37_0 >= INC && LA37_0 <= BNOT) || (LA37_0 >= E4X_ATTRI && LA37_0 <= ML_COMMENT) || (LA37_0 >= 176 && LA37_0 <= 177) || LA37_0 == 180))
                        {
                            alt37 = 1;
                        }


                        switch (alt37)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: blockEntry
                                {
                                    PushFollow(FOLLOW_blockEntry_in_block1507);
                                    blockEntry122 = blockEntry();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) stream_blockEntry.Add(blockEntry122.Tree);

                                }
                                break;

                            default:
                                goto loop37;
                        }
                    } while (true);

                loop37:
                    ;	// Stops C# compiler whinging that label 'loop37' has no statements

                    RCURLY123 = (IToken)input.LT(1);
                    Match(input, RCURLY, FOLLOW_RCURLY_in_block1510); if (failed) return retval;
                    if (backtracking == 0) stream_RCURLY.Add(RCURLY123);


                    // AST REWRITE
                    // elements:          blockEntry
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 341:3: -> ^( BLOCK ( blockEntry )* )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:341:6: ^( BLOCK ( blockEntry )* )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(BLOCK, "BLOCK"), root_1);

                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:341:14: ( blockEntry )*
                                while (stream_blockEntry.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_blockEntry.Next());

                                }
                                stream_blockEntry.Reset();

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 38, block_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end block

        public class blockEntry_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start blockEntry
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:344:1: blockEntry : statement ;
        public blockEntry_return blockEntry() // throws RecognitionException [1]
        {
            blockEntry_return retval = new blockEntry_return();
            retval.start = input.LT(1);
            int blockEntry_StartIndex = input.Index();
            CommonTree root_0 = null;

            statement_return statement124 = null;



            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 39))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:345:4: ( statement )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:345:4: statement
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    PushFollow(FOLLOW_statement_in_blockEntry1532);
                    statement124 = statement();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, statement124.Tree);

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 39, blockEntry_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end blockEntry

        public class condition_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start condition
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:348:1: condition : LPAREN expression RPAREN -> ^( CONDITION expression ) ;
        public condition_return condition() // throws RecognitionException [1]
        {
            condition_return retval = new condition_return();
            retval.start = input.LT(1);
            int condition_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken LPAREN125 = null;
            IToken RPAREN127 = null;
            expression_return expression126 = null;


            CommonTree LPAREN125_tree = null;
            CommonTree RPAREN127_tree = null;
            RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor, "token RPAREN");
            RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor, "token LPAREN");
            RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor, "rule expression");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 40))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:349:4: ( LPAREN expression RPAREN -> ^( CONDITION expression ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:349:4: LPAREN expression RPAREN
                {
                    LPAREN125 = (IToken)input.LT(1);
                    Match(input, LPAREN, FOLLOW_LPAREN_in_condition1543); if (failed) return retval;
                    if (backtracking == 0) stream_LPAREN.Add(LPAREN125);

                    PushFollow(FOLLOW_expression_in_condition1545);
                    expression126 = expression();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_expression.Add(expression126.Tree);
                    RPAREN127 = (IToken)input.LT(1);
                    Match(input, RPAREN, FOLLOW_RPAREN_in_condition1547); if (failed) return retval;
                    if (backtracking == 0) stream_RPAREN.Add(RPAREN127);


                    // AST REWRITE
                    // elements:          expression
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 350:3: -> ^( CONDITION expression )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:350:6: ^( CONDITION expression )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(CONDITION, "CONDITION"), root_1);

                                adaptor.AddChild(root_1, stream_expression.Next());

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 40, condition_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end condition

        public class statement_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start statement
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:353:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forEachStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | defaultXMLNamespaceStatement | commentExpression | SEMI );
        public statement_return statement() // throws RecognitionException [1]
        {
            statement_return retval = new statement_return();
            retval.start = input.LT(1);
            int statement_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken SEMI145 = null;
            block_return block128 = null;

            declarationStatement_return declarationStatement129 = null;

            expressionStatement_return expressionStatement130 = null;

            ifStatement_return ifStatement131 = null;

            forEachStatement_return forEachStatement132 = null;

            forStatement_return forStatement133 = null;

            whileStatement_return whileStatement134 = null;

            doWhileStatement_return doWhileStatement135 = null;

            withStatement_return withStatement136 = null;

            switchStatement_return switchStatement137 = null;

            breakStatement_return breakStatement138 = null;

            continueStatement_return continueStatement139 = null;

            returnStatement_return returnStatement140 = null;

            throwStatement_return throwStatement141 = null;

            tryStatement_return tryStatement142 = null;

            defaultXMLNamespaceStatement_return defaultXMLNamespaceStatement143 = null;

            commentExpression_return commentExpression144 = null;


            CommonTree SEMI145_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 41))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:354:4: ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forEachStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | defaultXMLNamespaceStatement | commentExpression | SEMI )
                int alt38 = 18;
                switch (input.LA(1))
                {
                    case LCURLY:
                        {
                            int LA38_1 = input.LA(2);

                            if ((LA38_1 == LCURLY) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if (((LA38_1 >= VAR && LA38_1 <= CONST)) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == INC) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == DEC) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == MINUS) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == PLUS) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == DELETE) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == 180) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == TYPEOF) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == LNOT) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == BNOT) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == UNDEFINED) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == LT) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == DIV) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if (((LA38_1 >= HEX_LITERAL && LA38_1 <= FLOAT_LITERAL)))
                            {
                                int LA38_64 = input.LA(3);

                                if ((synpred49()))
                                {
                                    alt38 = 1;
                                }
                                else if ((synpred51()))
                                {
                                    alt38 = 3;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d38s64 =
                                        new NoViableAltException("353:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forEachStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | defaultXMLNamespaceStatement | commentExpression | SEMI );", 38, 64, input);

                                    throw nvae_d38s64;
                                }
                            }
                            else if ((LA38_1 == STRING_LITERAL) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == TRUE) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == FALSE) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == NULL) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == LBRACK) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == FUNCTION) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == NEW) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == LPAREN) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == E4X_ATTRI) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == IDENT))
                            {
                                int LA38_74 = input.LA(3);

                                if ((synpred49()))
                                {
                                    alt38 = 1;
                                }
                                else if ((synpred51()))
                                {
                                    alt38 = 3;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d38s74 =
                                        new NoViableAltException("353:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forEachStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | defaultXMLNamespaceStatement | commentExpression | SEMI );", 38, 74, input);

                                    throw nvae_d38s74;
                                }
                            }
                            else if (((LA38_1 >= PUBLIC && LA38_1 <= INTERNAL)) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == USE))
                            {
                                int LA38_76 = input.LA(3);

                                if ((synpred49()))
                                {
                                    alt38 = 1;
                                }
                                else if ((synpred51()))
                                {
                                    alt38 = 3;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d38s76 =
                                        new NoViableAltException("353:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forEachStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | defaultXMLNamespaceStatement | commentExpression | SEMI );", 38, 76, input);

                                    throw nvae_d38s76;
                                }
                            }
                            else if ((LA38_1 == XML))
                            {
                                int LA38_77 = input.LA(3);

                                if ((synpred49()))
                                {
                                    alt38 = 1;
                                }
                                else if ((synpred51()))
                                {
                                    alt38 = 3;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d38s77 =
                                        new NoViableAltException("353:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forEachStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | defaultXMLNamespaceStatement | commentExpression | SEMI );", 38, 77, input);

                                    throw nvae_d38s77;
                                }
                            }
                            else if ((LA38_1 == DYNAMIC))
                            {
                                int LA38_78 = input.LA(3);

                                if ((synpred49()))
                                {
                                    alt38 = 1;
                                }
                                else if ((synpred51()))
                                {
                                    alt38 = 3;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d38s78 =
                                        new NoViableAltException("353:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forEachStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | defaultXMLNamespaceStatement | commentExpression | SEMI );", 38, 78, input);

                                    throw nvae_d38s78;
                                }
                            }
                            else if ((LA38_1 == NAMESPACE))
                            {
                                int LA38_79 = input.LA(3);

                                if ((synpred49()))
                                {
                                    alt38 = 1;
                                }
                                else if ((synpred51()))
                                {
                                    alt38 = 3;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d38s79 =
                                        new NoViableAltException("353:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forEachStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | defaultXMLNamespaceStatement | commentExpression | SEMI );", 38, 79, input);

                                    throw nvae_d38s79;
                                }
                            }
                            else if ((LA38_1 == IS))
                            {
                                int LA38_80 = input.LA(3);

                                if ((synpred49()))
                                {
                                    alt38 = 1;
                                }
                                else if ((synpred51()))
                                {
                                    alt38 = 3;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d38s80 =
                                        new NoViableAltException("353:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forEachStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | defaultXMLNamespaceStatement | commentExpression | SEMI );", 38, 80, input);

                                    throw nvae_d38s80;
                                }
                            }
                            else if ((LA38_1 == AS))
                            {
                                int LA38_81 = input.LA(3);

                                if ((synpred49()))
                                {
                                    alt38 = 1;
                                }
                                else if ((synpred51()))
                                {
                                    alt38 = 3;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d38s81 =
                                        new NoViableAltException("353:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forEachStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | defaultXMLNamespaceStatement | commentExpression | SEMI );", 38, 81, input);

                                    throw nvae_d38s81;
                                }
                            }
                            else if ((LA38_1 == GET))
                            {
                                int LA38_82 = input.LA(3);

                                if ((synpred49()))
                                {
                                    alt38 = 1;
                                }
                                else if ((synpred51()))
                                {
                                    alt38 = 3;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d38s82 =
                                        new NoViableAltException("353:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forEachStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | defaultXMLNamespaceStatement | commentExpression | SEMI );", 38, 82, input);

                                    throw nvae_d38s82;
                                }
                            }
                            else if ((LA38_1 == SET))
                            {
                                int LA38_83 = input.LA(3);

                                if ((synpred49()))
                                {
                                    alt38 = 1;
                                }
                                else if ((synpred51()))
                                {
                                    alt38 = 3;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d38s83 =
                                        new NoViableAltException("353:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forEachStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | defaultXMLNamespaceStatement | commentExpression | SEMI );", 38, 83, input);

                                    throw nvae_d38s83;
                                }
                            }
                            else if ((LA38_1 == IF) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == FOR) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == WHILE) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == DO) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == WITH) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == SWITCH) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == BREAK) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == CONTINUE) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == RETURN) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == 176) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == 177) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == DEFAULT) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == SL_COMMENT) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == ML_COMMENT) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == SEMI) && (synpred49()))
                            {
                                alt38 = 1;
                            }
                            else if ((LA38_1 == RCURLY))
                            {
                                int LA38_99 = input.LA(3);

                                if ((synpred49()))
                                {
                                    alt38 = 1;
                                }
                                else if ((synpred51()))
                                {
                                    alt38 = 3;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d38s99 =
                                        new NoViableAltException("353:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forEachStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | defaultXMLNamespaceStatement | commentExpression | SEMI );", 38, 99, input);

                                    throw nvae_d38s99;
                                }
                            }
                            else
                            {
                                if (backtracking > 0) { failed = true; return retval; }
                                NoViableAltException nvae_d38s1 =
                                    new NoViableAltException("353:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forEachStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | defaultXMLNamespaceStatement | commentExpression | SEMI );", 38, 1, input);

                                throw nvae_d38s1;
                            }
                        }
                        break;
                    case VAR:
                    case CONST:
                        {
                            alt38 = 2;
                        }
                        break;
                    case STRING_LITERAL:
                    case FUNCTION:
                    case GET:
                    case SET:
                    case NAMESPACE:
                    case USE:
                    case LPAREN:
                    case XML:
                    case IDENT:
                    case PUBLIC:
                    case PRIVATE:
                    case PROTECTED:
                    case INTERNAL:
                    case LBRACK:
                    case DYNAMIC:
                    case LT:
                    case IS:
                    case AS:
                    case PLUS:
                    case MINUS:
                    case DIV:
                    case INC:
                    case DEC:
                    case DELETE:
                    case TYPEOF:
                    case LNOT:
                    case BNOT:
                    case E4X_ATTRI:
                    case UNDEFINED:
                    case TRUE:
                    case FALSE:
                    case NULL:
                    case HEX_LITERAL:
                    case DECIMAL_LITERAL:
                    case OCTAL_LITERAL:
                    case FLOAT_LITERAL:
                    case NEW:
                    case 180:
                        {
                            alt38 = 3;
                        }
                        break;
                    case IF:
                        {
                            alt38 = 4;
                        }
                        break;
                    case FOR:
                        {
                            int LA38_36 = input.LA(2);

                            if ((LA38_36 == LPAREN))
                            {
                                alt38 = 6;
                            }
                            else if ((LA38_36 == EACH))
                            {
                                alt38 = 5;
                            }
                            else
                            {
                                if (backtracking > 0) { failed = true; return retval; }
                                NoViableAltException nvae_d38s36 =
                                    new NoViableAltException("353:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forEachStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | defaultXMLNamespaceStatement | commentExpression | SEMI );", 38, 36, input);

                                throw nvae_d38s36;
                            }
                        }
                        break;
                    case WHILE:
                        {
                            alt38 = 7;
                        }
                        break;
                    case DO:
                        {
                            alt38 = 8;
                        }
                        break;
                    case WITH:
                        {
                            alt38 = 9;
                        }
                        break;
                    case SWITCH:
                        {
                            alt38 = 10;
                        }
                        break;
                    case BREAK:
                        {
                            alt38 = 11;
                        }
                        break;
                    case CONTINUE:
                        {
                            alt38 = 12;
                        }
                        break;
                    case RETURN:
                        {
                            alt38 = 13;
                        }
                        break;
                    case 176:
                        {
                            alt38 = 14;
                        }
                        break;
                    case 177:
                        {
                            alt38 = 15;
                        }
                        break;
                    case DEFAULT:
                        {
                            alt38 = 16;
                        }
                        break;
                    case SL_COMMENT:
                    case ML_COMMENT:
                        {
                            alt38 = 17;
                        }
                        break;
                    case SEMI:
                        {
                            alt38 = 18;
                        }
                        break;
                    default:
                        if (backtracking > 0) { failed = true; return retval; }
                        NoViableAltException nvae_d38s0 =
                            new NoViableAltException("353:1: statement : ( ( LCURLY )=> block | declarationStatement | expressionStatement | ifStatement | forEachStatement | forStatement | whileStatement | doWhileStatement | withStatement | switchStatement | breakStatement | continueStatement | returnStatement | throwStatement | tryStatement | defaultXMLNamespaceStatement | commentExpression | SEMI );", 38, 0, input);

                        throw nvae_d38s0;
                }

                switch (alt38)
                {
                    case 1:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:354:4: ( LCURLY )=> block
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_block_in_statement1573);
                            block128 = block();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, block128.Tree);

                        }
                        break;
                    case 2:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:355:4: declarationStatement
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_declarationStatement_in_statement1578);
                            declarationStatement129 = declarationStatement();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, declarationStatement129.Tree);

                        }
                        break;
                    case 3:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:356:4: expressionStatement
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_expressionStatement_in_statement1583);
                            expressionStatement130 = expressionStatement();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, expressionStatement130.Tree);

                        }
                        break;
                    case 4:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:357:4: ifStatement
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_ifStatement_in_statement1588);
                            ifStatement131 = ifStatement();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, ifStatement131.Tree);

                        }
                        break;
                    case 5:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:359:4: forEachStatement
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_forEachStatement_in_statement1595);
                            forEachStatement132 = forEachStatement();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, forEachStatement132.Tree);

                        }
                        break;
                    case 6:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:360:4: forStatement
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_forStatement_in_statement1600);
                            forStatement133 = forStatement();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, forStatement133.Tree);

                        }
                        break;
                    case 7:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:363:4: whileStatement
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_whileStatement_in_statement1608);
                            whileStatement134 = whileStatement();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, whileStatement134.Tree);

                        }
                        break;
                    case 8:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:366:4: doWhileStatement
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_doWhileStatement_in_statement1616);
                            doWhileStatement135 = doWhileStatement();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, doWhileStatement135.Tree);

                        }
                        break;
                    case 9:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:369:4: withStatement
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_withStatement_in_statement1625);
                            withStatement136 = withStatement();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, withStatement136.Tree);

                        }
                        break;
                    case 10:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:372:4: switchStatement
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_switchStatement_in_statement1634);
                            switchStatement137 = switchStatement();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, switchStatement137.Tree);

                        }
                        break;
                    case 11:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:375:4: breakStatement
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_breakStatement_in_statement1643);
                            breakStatement138 = breakStatement();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, breakStatement138.Tree);

                        }
                        break;
                    case 12:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:378:4: continueStatement
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_continueStatement_in_statement1651);
                            continueStatement139 = continueStatement();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, continueStatement139.Tree);

                        }
                        break;
                    case 13:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:381:4: returnStatement
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_returnStatement_in_statement1659);
                            returnStatement140 = returnStatement();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, returnStatement140.Tree);

                        }
                        break;
                    case 14:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:384:4: throwStatement
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_throwStatement_in_statement1667);
                            throwStatement141 = throwStatement();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, throwStatement141.Tree);

                        }
                        break;
                    case 15:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:387:4: tryStatement
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_tryStatement_in_statement1676);
                            tryStatement142 = tryStatement();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, tryStatement142.Tree);

                        }
                        break;
                    case 16:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:390:4: defaultXMLNamespaceStatement
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_defaultXMLNamespaceStatement_in_statement1685);
                            defaultXMLNamespaceStatement143 = defaultXMLNamespaceStatement();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, defaultXMLNamespaceStatement143.Tree);

                        }
                        break;
                    case 17:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:393:4: commentExpression
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_commentExpression_in_statement1694);
                            commentExpression144 = commentExpression();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, commentExpression144.Tree);

                        }
                        break;
                    case 18:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:396:4: SEMI
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            SEMI145 = (IToken)input.LT(1);
                            Match(input, SEMI, FOLLOW_SEMI_in_statement1702); if (failed) return retval;

                        }
                        break;

                }
                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 41, statement_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end statement

        public class declarationStatement_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start declarationStatement
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:399:1: declarationStatement : declaration semi ;
        public declarationStatement_return declarationStatement() // throws RecognitionException [1]
        {
            InOperator_stack.Push(new InOperator_scope());

            declarationStatement_return retval = new declarationStatement_return();
            retval.start = input.LT(1);
            int declarationStatement_StartIndex = input.Index();
            CommonTree root_0 = null;

            declaration_return declaration146 = null;

            semi_return semi147 = null;




            ((InOperator_scope)InOperator_stack.Peek()).allowed = true;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 42))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:404:4: ( declaration semi )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:404:4: declaration semi
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    PushFollow(FOLLOW_declaration_in_declarationStatement1724);
                    declaration146 = declaration();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, declaration146.Tree);
                    PushFollow(FOLLOW_semi_in_declarationStatement1726);
                    semi147 = semi();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, semi147.Tree);

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 42, declarationStatement_StartIndex);
                }
                InOperator_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end declarationStatement

        public class expressionStatement_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start expressionStatement
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:407:1: expressionStatement : expressionList semi -> ^( EXPR_STMNT expressionList ) ;
        public expressionStatement_return expressionStatement() // throws RecognitionException [1]
        {
            InOperator_stack.Push(new InOperator_scope());

            expressionStatement_return retval = new expressionStatement_return();
            retval.start = input.LT(1);
            int expressionStatement_StartIndex = input.Index();
            CommonTree root_0 = null;

            expressionList_return expressionList148 = null;

            semi_return semi149 = null;


            RewriteRuleSubtreeStream stream_semi = new RewriteRuleSubtreeStream(adaptor, "rule semi");
            RewriteRuleSubtreeStream stream_expressionList = new RewriteRuleSubtreeStream(adaptor, "rule expressionList");

            ((InOperator_scope)InOperator_stack.Peek()).allowed = true;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 43))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:412:4: ( expressionList semi -> ^( EXPR_STMNT expressionList ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:412:4: expressionList semi
                {
                    PushFollow(FOLLOW_expressionList_in_expressionStatement1747);
                    expressionList148 = expressionList();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_expressionList.Add(expressionList148.Tree);
                    PushFollow(FOLLOW_semi_in_expressionStatement1749);
                    semi149 = semi();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_semi.Add(semi149.Tree);

                    // AST REWRITE
                    // elements:          expressionList
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 413:3: -> ^( EXPR_STMNT expressionList )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:413:6: ^( EXPR_STMNT expressionList )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(EXPR_STMNT, "EXPR_STMNT"), root_1);

                                adaptor.AddChild(root_1, stream_expressionList.Next());

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 43, expressionStatement_StartIndex);
                }
                InOperator_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end expressionStatement

        public class ifStatement_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start ifStatement
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:416:1: ifStatement : IF condition ( commentExpression )? statement ( commentExpression )? ( ( ELSE )=> elseClause )? ;
        public ifStatement_return ifStatement() // throws RecognitionException [1]
        {
            ifStatement_return retval = new ifStatement_return();
            retval.start = input.LT(1);
            int ifStatement_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken IF150 = null;
            condition_return condition151 = null;

            commentExpression_return commentExpression152 = null;

            statement_return statement153 = null;

            commentExpression_return commentExpression154 = null;

            elseClause_return elseClause155 = null;


            CommonTree IF150_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 44))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:417:4: ( IF condition ( commentExpression )? statement ( commentExpression )? ( ( ELSE )=> elseClause )? )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:417:4: IF condition ( commentExpression )? statement ( commentExpression )? ( ( ELSE )=> elseClause )?
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    IF150 = (IToken)input.LT(1);
                    Match(input, IF, FOLLOW_IF_in_ifStatement1771); if (failed) return retval;
                    if (backtracking == 0)
                    {
                        IF150_tree = (CommonTree)adaptor.Create(IF150);
                        root_0 = (CommonTree)adaptor.BecomeRoot(IF150_tree, root_0);
                    }
                    PushFollow(FOLLOW_condition_in_ifStatement1774);
                    condition151 = condition();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, condition151.Tree);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:417:18: ( commentExpression )?
                    int alt39 = 2;
                    int LA39_0 = input.LA(1);

                    if ((LA39_0 == SL_COMMENT))
                    {
                        switch (input.LA(2))
                        {
                            case SL_COMMENT:
                                {
                                    int LA39_50 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case ML_COMMENT:
                                {
                                    int LA39_51 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case LCURLY:
                                {
                                    int LA39_52 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case VAR:
                            case CONST:
                                {
                                    int LA39_53 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case INC:
                                {
                                    int LA39_54 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case DEC:
                                {
                                    int LA39_55 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case MINUS:
                                {
                                    int LA39_56 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case PLUS:
                                {
                                    int LA39_57 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case DELETE:
                                {
                                    int LA39_58 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case 180:
                                {
                                    int LA39_59 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case TYPEOF:
                                {
                                    int LA39_60 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case LNOT:
                                {
                                    int LA39_61 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case BNOT:
                                {
                                    int LA39_62 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case UNDEFINED:
                                {
                                    int LA39_63 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case LT:
                                {
                                    int LA39_64 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case DIV:
                                {
                                    int LA39_65 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case HEX_LITERAL:
                            case DECIMAL_LITERAL:
                            case OCTAL_LITERAL:
                            case FLOAT_LITERAL:
                                {
                                    int LA39_66 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case STRING_LITERAL:
                                {
                                    int LA39_67 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case TRUE:
                                {
                                    int LA39_68 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case FALSE:
                                {
                                    int LA39_69 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case NULL:
                                {
                                    int LA39_70 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case LBRACK:
                                {
                                    int LA39_71 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case FUNCTION:
                                {
                                    int LA39_72 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case NEW:
                                {
                                    int LA39_73 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case LPAREN:
                                {
                                    int LA39_74 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case E4X_ATTRI:
                                {
                                    int LA39_75 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case IDENT:
                                {
                                    int LA39_76 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case PUBLIC:
                            case PRIVATE:
                            case PROTECTED:
                            case INTERNAL:
                                {
                                    int LA39_77 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case USE:
                                {
                                    int LA39_78 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case XML:
                                {
                                    int LA39_79 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case DYNAMIC:
                                {
                                    int LA39_80 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case NAMESPACE:
                                {
                                    int LA39_81 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case IS:
                                {
                                    int LA39_82 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case AS:
                                {
                                    int LA39_83 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case GET:
                                {
                                    int LA39_84 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case SET:
                                {
                                    int LA39_85 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case IF:
                                {
                                    int LA39_86 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case FOR:
                                {
                                    int LA39_87 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case WHILE:
                                {
                                    int LA39_88 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case DO:
                                {
                                    int LA39_89 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case WITH:
                                {
                                    int LA39_90 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case SWITCH:
                                {
                                    int LA39_91 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case BREAK:
                                {
                                    int LA39_92 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case CONTINUE:
                                {
                                    int LA39_93 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case RETURN:
                                {
                                    int LA39_94 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case 176:
                                {
                                    int LA39_95 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case 177:
                                {
                                    int LA39_96 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case DEFAULT:
                                {
                                    int LA39_97 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case SEMI:
                                {
                                    int LA39_98 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                        }

                    }
                    else if ((LA39_0 == ML_COMMENT))
                    {
                        switch (input.LA(2))
                        {
                            case SL_COMMENT:
                                {
                                    int LA39_103 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case ML_COMMENT:
                                {
                                    int LA39_104 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case LCURLY:
                                {
                                    int LA39_105 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case VAR:
                            case CONST:
                                {
                                    int LA39_106 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case INC:
                                {
                                    int LA39_107 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case DEC:
                                {
                                    int LA39_108 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case MINUS:
                                {
                                    int LA39_109 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case PLUS:
                                {
                                    int LA39_110 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case DELETE:
                                {
                                    int LA39_111 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case 180:
                                {
                                    int LA39_112 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case TYPEOF:
                                {
                                    int LA39_113 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case LNOT:
                                {
                                    int LA39_114 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case BNOT:
                                {
                                    int LA39_115 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case UNDEFINED:
                                {
                                    int LA39_116 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case LT:
                                {
                                    int LA39_117 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case DIV:
                                {
                                    int LA39_118 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case HEX_LITERAL:
                            case DECIMAL_LITERAL:
                            case OCTAL_LITERAL:
                            case FLOAT_LITERAL:
                                {
                                    int LA39_119 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case STRING_LITERAL:
                                {
                                    int LA39_120 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case TRUE:
                                {
                                    int LA39_121 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case FALSE:
                                {
                                    int LA39_122 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case NULL:
                                {
                                    int LA39_123 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case LBRACK:
                                {
                                    int LA39_124 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case FUNCTION:
                                {
                                    int LA39_125 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case NEW:
                                {
                                    int LA39_126 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case LPAREN:
                                {
                                    int LA39_127 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case E4X_ATTRI:
                                {
                                    int LA39_128 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case IDENT:
                                {
                                    int LA39_129 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case PUBLIC:
                            case PRIVATE:
                            case PROTECTED:
                            case INTERNAL:
                                {
                                    int LA39_130 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case USE:
                                {
                                    int LA39_131 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case XML:
                                {
                                    int LA39_132 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case DYNAMIC:
                                {
                                    int LA39_133 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case NAMESPACE:
                                {
                                    int LA39_134 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case IS:
                                {
                                    int LA39_135 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case AS:
                                {
                                    int LA39_136 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case GET:
                                {
                                    int LA39_137 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case SET:
                                {
                                    int LA39_138 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case IF:
                                {
                                    int LA39_139 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case FOR:
                                {
                                    int LA39_140 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case WHILE:
                                {
                                    int LA39_141 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case DO:
                                {
                                    int LA39_142 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case WITH:
                                {
                                    int LA39_143 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case SWITCH:
                                {
                                    int LA39_144 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case BREAK:
                                {
                                    int LA39_145 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case CONTINUE:
                                {
                                    int LA39_146 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case RETURN:
                                {
                                    int LA39_147 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case 176:
                                {
                                    int LA39_148 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case 177:
                                {
                                    int LA39_149 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case DEFAULT:
                                {
                                    int LA39_150 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                            case SEMI:
                                {
                                    int LA39_151 = input.LA(3);

                                    if ((synpred66()))
                                    {
                                        alt39 = 1;
                                    }
                                }
                                break;
                        }

                    }
                    switch (alt39)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: commentExpression
                            {
                                PushFollow(FOLLOW_commentExpression_in_ifStatement1776);
                                commentExpression152 = commentExpression();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) adaptor.AddChild(root_0, commentExpression152.Tree);

                            }
                            break;

                    }

                    PushFollow(FOLLOW_statement_in_ifStatement1779);
                    statement153 = statement();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, statement153.Tree);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:417:47: ( commentExpression )?
                    int alt40 = 2;
                    int LA40_0 = input.LA(1);

                    if ((LA40_0 == SL_COMMENT))
                    {
                        int LA40_1 = input.LA(2);

                        if ((synpred67()))
                        {
                            alt40 = 1;
                        }
                    }
                    else if ((LA40_0 == ML_COMMENT))
                    {
                        int LA40_2 = input.LA(2);

                        if ((synpred67()))
                        {
                            alt40 = 1;
                        }
                    }
                    switch (alt40)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: commentExpression
                            {
                                PushFollow(FOLLOW_commentExpression_in_ifStatement1781);
                                commentExpression154 = commentExpression();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) adaptor.AddChild(root_0, commentExpression154.Tree);

                            }
                            break;

                    }

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:418:3: ( ( ELSE )=> elseClause )?
                    int alt41 = 2;
                    int LA41_0 = input.LA(1);

                    if ((LA41_0 == ELSE))
                    {
                        int LA41_1 = input.LA(2);

                        if ((synpred68()))
                        {
                            alt41 = 1;
                        }
                    }
                    switch (alt41)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:418:4: ( ELSE )=> elseClause
                            {
                                PushFollow(FOLLOW_elseClause_in_ifStatement1791);
                                elseClause155 = elseClause();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) adaptor.AddChild(root_0, elseClause155.Tree);

                            }
                            break;

                    }


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 44, ifStatement_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end ifStatement

        public class elseClause_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start elseClause
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:421:1: elseClause : ELSE ( commentExpression )? statement ;
        public elseClause_return elseClause() // throws RecognitionException [1]
        {
            elseClause_return retval = new elseClause_return();
            retval.start = input.LT(1);
            int elseClause_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken ELSE156 = null;
            commentExpression_return commentExpression157 = null;

            statement_return statement158 = null;


            CommonTree ELSE156_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 45))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:422:4: ( ELSE ( commentExpression )? statement )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:422:4: ELSE ( commentExpression )? statement
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    ELSE156 = (IToken)input.LT(1);
                    Match(input, ELSE, FOLLOW_ELSE_in_elseClause1804); if (failed) return retval;
                    if (backtracking == 0)
                    {
                        ELSE156_tree = (CommonTree)adaptor.Create(ELSE156);
                        root_0 = (CommonTree)adaptor.BecomeRoot(ELSE156_tree, root_0);
                    }
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:422:10: ( commentExpression )?
                    int alt42 = 2;
                    int LA42_0 = input.LA(1);

                    if ((LA42_0 == SL_COMMENT))
                    {
                        switch (input.LA(2))
                        {
                            case SL_COMMENT:
                                {
                                    int LA42_50 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case ML_COMMENT:
                                {
                                    int LA42_51 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case LCURLY:
                                {
                                    int LA42_53 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case VAR:
                            case CONST:
                                {
                                    int LA42_54 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case INC:
                                {
                                    int LA42_55 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case DEC:
                                {
                                    int LA42_56 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case MINUS:
                                {
                                    int LA42_57 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case PLUS:
                                {
                                    int LA42_58 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case DELETE:
                                {
                                    int LA42_59 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case 180:
                                {
                                    int LA42_60 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case TYPEOF:
                                {
                                    int LA42_61 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case LNOT:
                                {
                                    int LA42_62 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case BNOT:
                                {
                                    int LA42_63 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case UNDEFINED:
                                {
                                    int LA42_64 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case LT:
                                {
                                    int LA42_65 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case DIV:
                                {
                                    int LA42_66 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case HEX_LITERAL:
                            case DECIMAL_LITERAL:
                            case OCTAL_LITERAL:
                            case FLOAT_LITERAL:
                                {
                                    int LA42_67 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case STRING_LITERAL:
                                {
                                    int LA42_68 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case TRUE:
                                {
                                    int LA42_69 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case FALSE:
                                {
                                    int LA42_70 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case NULL:
                                {
                                    int LA42_71 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case LBRACK:
                                {
                                    int LA42_72 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case FUNCTION:
                                {
                                    int LA42_73 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case NEW:
                                {
                                    int LA42_74 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case LPAREN:
                                {
                                    int LA42_75 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case E4X_ATTRI:
                                {
                                    int LA42_76 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case IDENT:
                                {
                                    int LA42_77 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case PUBLIC:
                            case PRIVATE:
                            case PROTECTED:
                            case INTERNAL:
                                {
                                    int LA42_78 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case USE:
                                {
                                    int LA42_79 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case XML:
                                {
                                    int LA42_80 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case DYNAMIC:
                                {
                                    int LA42_81 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case NAMESPACE:
                                {
                                    int LA42_82 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case IS:
                                {
                                    int LA42_83 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case AS:
                                {
                                    int LA42_84 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case GET:
                                {
                                    int LA42_85 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case SET:
                                {
                                    int LA42_86 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case IF:
                                {
                                    int LA42_87 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case FOR:
                                {
                                    int LA42_88 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case WHILE:
                                {
                                    int LA42_89 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case DO:
                                {
                                    int LA42_90 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case WITH:
                                {
                                    int LA42_91 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case SWITCH:
                                {
                                    int LA42_92 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case BREAK:
                                {
                                    int LA42_93 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case CONTINUE:
                                {
                                    int LA42_94 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case RETURN:
                                {
                                    int LA42_95 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case 176:
                                {
                                    int LA42_96 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case 177:
                                {
                                    int LA42_97 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case DEFAULT:
                                {
                                    int LA42_98 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case SEMI:
                                {
                                    int LA42_99 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                        }

                    }
                    else if ((LA42_0 == ML_COMMENT))
                    {
                        switch (input.LA(2))
                        {
                            case SL_COMMENT:
                                {
                                    int LA42_103 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case ML_COMMENT:
                                {
                                    int LA42_104 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case LCURLY:
                                {
                                    int LA42_105 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case VAR:
                            case CONST:
                                {
                                    int LA42_106 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case INC:
                                {
                                    int LA42_107 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case DEC:
                                {
                                    int LA42_108 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case MINUS:
                                {
                                    int LA42_109 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case PLUS:
                                {
                                    int LA42_110 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case DELETE:
                                {
                                    int LA42_111 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case 180:
                                {
                                    int LA42_112 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case TYPEOF:
                                {
                                    int LA42_113 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case LNOT:
                                {
                                    int LA42_114 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case BNOT:
                                {
                                    int LA42_115 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case UNDEFINED:
                                {
                                    int LA42_116 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case LT:
                                {
                                    int LA42_117 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case DIV:
                                {
                                    int LA42_118 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case HEX_LITERAL:
                            case DECIMAL_LITERAL:
                            case OCTAL_LITERAL:
                            case FLOAT_LITERAL:
                                {
                                    int LA42_119 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case STRING_LITERAL:
                                {
                                    int LA42_120 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case TRUE:
                                {
                                    int LA42_121 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case FALSE:
                                {
                                    int LA42_122 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case NULL:
                                {
                                    int LA42_123 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case LBRACK:
                                {
                                    int LA42_124 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case FUNCTION:
                                {
                                    int LA42_125 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case NEW:
                                {
                                    int LA42_126 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case LPAREN:
                                {
                                    int LA42_127 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case E4X_ATTRI:
                                {
                                    int LA42_128 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case IDENT:
                                {
                                    int LA42_129 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case PUBLIC:
                            case PRIVATE:
                            case PROTECTED:
                            case INTERNAL:
                                {
                                    int LA42_130 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case USE:
                                {
                                    int LA42_131 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case XML:
                                {
                                    int LA42_132 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case DYNAMIC:
                                {
                                    int LA42_133 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case NAMESPACE:
                                {
                                    int LA42_134 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case IS:
                                {
                                    int LA42_135 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case AS:
                                {
                                    int LA42_136 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case GET:
                                {
                                    int LA42_137 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case SET:
                                {
                                    int LA42_138 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case IF:
                                {
                                    int LA42_139 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case FOR:
                                {
                                    int LA42_140 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case WHILE:
                                {
                                    int LA42_141 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case DO:
                                {
                                    int LA42_142 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case WITH:
                                {
                                    int LA42_143 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case SWITCH:
                                {
                                    int LA42_144 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case BREAK:
                                {
                                    int LA42_145 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case CONTINUE:
                                {
                                    int LA42_146 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case RETURN:
                                {
                                    int LA42_147 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case 176:
                                {
                                    int LA42_148 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case 177:
                                {
                                    int LA42_149 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case DEFAULT:
                                {
                                    int LA42_150 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                            case SEMI:
                                {
                                    int LA42_151 = input.LA(3);

                                    if ((synpred69()))
                                    {
                                        alt42 = 1;
                                    }
                                }
                                break;
                        }

                    }
                    switch (alt42)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: commentExpression
                            {
                                PushFollow(FOLLOW_commentExpression_in_elseClause1807);
                                commentExpression157 = commentExpression();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) adaptor.AddChild(root_0, commentExpression157.Tree);

                            }
                            break;

                    }

                    PushFollow(FOLLOW_statement_in_elseClause1810);
                    statement158 = statement();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, statement158.Tree);

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 45, elseClause_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end elseClause

        public class throwStatement_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start throwStatement
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:425:1: throwStatement : 'throw' expression semi ;
        public throwStatement_return throwStatement() // throws RecognitionException [1]
        {
            throwStatement_return retval = new throwStatement_return();
            retval.start = input.LT(1);
            int throwStatement_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken string_literal159 = null;
            expression_return expression160 = null;

            semi_return semi161 = null;


            CommonTree string_literal159_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 46))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:426:4: ( 'throw' expression semi )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:426:4: 'throw' expression semi
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    string_literal159 = (IToken)input.LT(1);
                    Match(input, 176, FOLLOW_176_in_throwStatement1821); if (failed) return retval;
                    if (backtracking == 0)
                    {
                        string_literal159_tree = (CommonTree)adaptor.Create(string_literal159);
                        root_0 = (CommonTree)adaptor.BecomeRoot(string_literal159_tree, root_0);
                    }
                    PushFollow(FOLLOW_expression_in_throwStatement1824);
                    expression160 = expression();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, expression160.Tree);
                    PushFollow(FOLLOW_semi_in_throwStatement1826);
                    semi161 = semi();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, semi161.Tree);

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 46, throwStatement_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end throwStatement

        public class tryStatement_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start tryStatement
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:429:1: tryStatement : 'try' block ( catchBlock )* ( finallyBlock )? ;
        public tryStatement_return tryStatement() // throws RecognitionException [1]
        {
            tryStatement_return retval = new tryStatement_return();
            retval.start = input.LT(1);
            int tryStatement_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken string_literal162 = null;
            block_return block163 = null;

            catchBlock_return catchBlock164 = null;

            finallyBlock_return finallyBlock165 = null;


            CommonTree string_literal162_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 47))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:430:4: ( 'try' block ( catchBlock )* ( finallyBlock )? )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:430:4: 'try' block ( catchBlock )* ( finallyBlock )?
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    string_literal162 = (IToken)input.LT(1);
                    Match(input, 177, FOLLOW_177_in_tryStatement1837); if (failed) return retval;
                    if (backtracking == 0)
                    {
                        string_literal162_tree = (CommonTree)adaptor.Create(string_literal162);
                        adaptor.AddChild(root_0, string_literal162_tree);
                    }
                    PushFollow(FOLLOW_block_in_tryStatement1841);
                    block163 = block();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, block163.Tree);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:432:3: ( catchBlock )*
                    do
                    {
                        int alt43 = 2;
                        int LA43_0 = input.LA(1);

                        if ((LA43_0 == 178))
                        {
                            alt43 = 1;
                        }


                        switch (alt43)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: catchBlock
                                {
                                    PushFollow(FOLLOW_catchBlock_in_tryStatement1845);
                                    catchBlock164 = catchBlock();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) adaptor.AddChild(root_0, catchBlock164.Tree);

                                }
                                break;

                            default:
                                goto loop43;
                        }
                    } while (true);

                loop43:
                    ;	// Stops C# compiler whinging that label 'loop43' has no statements

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:433:3: ( finallyBlock )?
                    int alt44 = 2;
                    int LA44_0 = input.LA(1);

                    if ((LA44_0 == 179))
                    {
                        alt44 = 1;
                    }
                    switch (alt44)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: finallyBlock
                            {
                                PushFollow(FOLLOW_finallyBlock_in_tryStatement1850);
                                finallyBlock165 = finallyBlock();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) adaptor.AddChild(root_0, finallyBlock165.Tree);

                            }
                            break;

                    }


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 47, tryStatement_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end tryStatement

        public class catchBlock_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start catchBlock
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:436:1: catchBlock : 'catch' LPAREN ident ( typeExpression )? RPAREN block ;
        public catchBlock_return catchBlock() // throws RecognitionException [1]
        {
            catchBlock_return retval = new catchBlock_return();
            retval.start = input.LT(1);
            int catchBlock_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken string_literal166 = null;
            IToken LPAREN167 = null;
            IToken RPAREN170 = null;
            ident_return ident168 = null;

            typeExpression_return typeExpression169 = null;

            block_return block171 = null;


            CommonTree string_literal166_tree = null;
            CommonTree LPAREN167_tree = null;
            CommonTree RPAREN170_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 48))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:437:4: ( 'catch' LPAREN ident ( typeExpression )? RPAREN block )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:437:4: 'catch' LPAREN ident ( typeExpression )? RPAREN block
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    string_literal166 = (IToken)input.LT(1);
                    Match(input, 178, FOLLOW_178_in_catchBlock1862); if (failed) return retval;
                    if (backtracking == 0)
                    {
                        string_literal166_tree = (CommonTree)adaptor.Create(string_literal166);
                        adaptor.AddChild(root_0, string_literal166_tree);
                    }
                    LPAREN167 = (IToken)input.LT(1);
                    Match(input, LPAREN, FOLLOW_LPAREN_in_catchBlock1864); if (failed) return retval;
                    PushFollow(FOLLOW_ident_in_catchBlock1867);
                    ident168 = ident();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, ident168.Tree);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:437:26: ( typeExpression )?
                    int alt45 = 2;
                    int LA45_0 = input.LA(1);

                    if ((LA45_0 == COLON))
                    {
                        alt45 = 1;
                    }
                    switch (alt45)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: typeExpression
                            {
                                PushFollow(FOLLOW_typeExpression_in_catchBlock1869);
                                typeExpression169 = typeExpression();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) adaptor.AddChild(root_0, typeExpression169.Tree);

                            }
                            break;

                    }

                    RPAREN170 = (IToken)input.LT(1);
                    Match(input, RPAREN, FOLLOW_RPAREN_in_catchBlock1872); if (failed) return retval;
                    PushFollow(FOLLOW_block_in_catchBlock1877);
                    block171 = block();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, block171.Tree);

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 48, catchBlock_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end catchBlock

        public class finallyBlock_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start finallyBlock
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:441:1: finallyBlock : 'finally' block ;
        public finallyBlock_return finallyBlock() // throws RecognitionException [1]
        {
            finallyBlock_return retval = new finallyBlock_return();
            retval.start = input.LT(1);
            int finallyBlock_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken string_literal172 = null;
            block_return block173 = null;


            CommonTree string_literal172_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 49))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:442:4: ( 'finally' block )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:442:4: 'finally' block
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    string_literal172 = (IToken)input.LT(1);
                    Match(input, 179, FOLLOW_179_in_finallyBlock1888); if (failed) return retval;
                    if (backtracking == 0)
                    {
                        string_literal172_tree = (CommonTree)adaptor.Create(string_literal172);
                        adaptor.AddChild(root_0, string_literal172_tree);
                    }
                    PushFollow(FOLLOW_block_in_finallyBlock1890);
                    block173 = block();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, block173.Tree);

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 49, finallyBlock_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end finallyBlock

        public class returnStatement_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start returnStatement
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:445:1: returnStatement : RETURN ( expression )? semi ;
        public returnStatement_return returnStatement() // throws RecognitionException [1]
        {
            returnStatement_return retval = new returnStatement_return();
            retval.start = input.LT(1);
            int returnStatement_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken RETURN174 = null;
            expression_return expression175 = null;

            semi_return semi176 = null;


            CommonTree RETURN174_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 50))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:446:4: ( RETURN ( expression )? semi )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:446:4: RETURN ( expression )? semi
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    RETURN174 = (IToken)input.LT(1);
                    Match(input, RETURN, FOLLOW_RETURN_in_returnStatement1901); if (failed) return retval;
                    if (backtracking == 0)
                    {
                        RETURN174_tree = (CommonTree)adaptor.Create(RETURN174);
                        root_0 = (CommonTree)adaptor.BecomeRoot(RETURN174_tree, root_0);
                    }
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:446:12: ( expression )?
                    int alt46 = 2;
                    switch (input.LA(1))
                    {
                        case INC:
                            {
                                int LA46_1 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case DEC:
                            {
                                int LA46_2 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case MINUS:
                            {
                                int LA46_3 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case PLUS:
                            {
                                int LA46_4 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case DELETE:
                            {
                                int LA46_5 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case 180:
                            {
                                int LA46_6 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case TYPEOF:
                            {
                                int LA46_7 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case LNOT:
                            {
                                int LA46_8 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case BNOT:
                            {
                                int LA46_9 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case UNDEFINED:
                            {
                                int LA46_10 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case LT:
                            {
                                int LA46_11 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case DIV:
                            {
                                int LA46_12 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case HEX_LITERAL:
                        case DECIMAL_LITERAL:
                        case OCTAL_LITERAL:
                        case FLOAT_LITERAL:
                            {
                                int LA46_13 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case STRING_LITERAL:
                            {
                                int LA46_14 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case TRUE:
                            {
                                int LA46_15 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case FALSE:
                            {
                                int LA46_16 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case NULL:
                            {
                                int LA46_17 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case LBRACK:
                            {
                                int LA46_18 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case LCURLY:
                            {
                                int LA46_19 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case FUNCTION:
                            {
                                int LA46_20 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case NEW:
                            {
                                int LA46_21 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case LPAREN:
                            {
                                int LA46_22 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case E4X_ATTRI:
                            {
                                int LA46_23 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case IDENT:
                            {
                                int LA46_24 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case PUBLIC:
                        case PRIVATE:
                        case PROTECTED:
                        case INTERNAL:
                            {
                                int LA46_25 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case USE:
                            {
                                int LA46_26 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case XML:
                            {
                                int LA46_27 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case DYNAMIC:
                            {
                                int LA46_28 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case NAMESPACE:
                            {
                                int LA46_29 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case IS:
                            {
                                int LA46_30 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case AS:
                            {
                                int LA46_31 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case GET:
                            {
                                int LA46_32 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                        case SET:
                            {
                                int LA46_33 = input.LA(2);

                                if ((synpred73()))
                                {
                                    alt46 = 1;
                                }
                            }
                            break;
                    }

                    switch (alt46)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: expression
                            {
                                PushFollow(FOLLOW_expression_in_returnStatement1904);
                                expression175 = expression();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) adaptor.AddChild(root_0, expression175.Tree);

                            }
                            break;

                    }

                    PushFollow(FOLLOW_semi_in_returnStatement1907);
                    semi176 = semi();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, semi176.Tree);

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 50, returnStatement_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end returnStatement

        public class continueStatement_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start continueStatement
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:449:1: continueStatement : CONTINUE semi ;
        public continueStatement_return continueStatement() // throws RecognitionException [1]
        {
            continueStatement_return retval = new continueStatement_return();
            retval.start = input.LT(1);
            int continueStatement_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken CONTINUE177 = null;
            semi_return semi178 = null;


            CommonTree CONTINUE177_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 51))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:450:4: ( CONTINUE semi )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:450:4: CONTINUE semi
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    CONTINUE177 = (IToken)input.LT(1);
                    Match(input, CONTINUE, FOLLOW_CONTINUE_in_continueStatement1920); if (failed) return retval;
                    if (backtracking == 0)
                    {
                        CONTINUE177_tree = (CommonTree)adaptor.Create(CONTINUE177);
                        root_0 = (CommonTree)adaptor.BecomeRoot(CONTINUE177_tree, root_0);
                    }
                    PushFollow(FOLLOW_semi_in_continueStatement1923);
                    semi178 = semi();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, semi178.Tree);

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 51, continueStatement_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end continueStatement

        public class breakStatement_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start breakStatement
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:453:1: breakStatement : BREAK semi ;
        public breakStatement_return breakStatement() // throws RecognitionException [1]
        {
            breakStatement_return retval = new breakStatement_return();
            retval.start = input.LT(1);
            int breakStatement_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken BREAK179 = null;
            semi_return semi180 = null;


            CommonTree BREAK179_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 52))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:454:4: ( BREAK semi )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:454:4: BREAK semi
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    BREAK179 = (IToken)input.LT(1);
                    Match(input, BREAK, FOLLOW_BREAK_in_breakStatement1934); if (failed) return retval;
                    if (backtracking == 0)
                    {
                        BREAK179_tree = (CommonTree)adaptor.Create(BREAK179);
                        root_0 = (CommonTree)adaptor.BecomeRoot(BREAK179_tree, root_0);
                    }
                    PushFollow(FOLLOW_semi_in_breakStatement1937);
                    semi180 = semi();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, semi180.Tree);

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 52, breakStatement_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end breakStatement

        public class switchStatement_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start switchStatement
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:457:1: switchStatement : SWITCH ( condition ( commentExpression )* ) switchBlock ;
        public switchStatement_return switchStatement() // throws RecognitionException [1]
        {
            switchStatement_return retval = new switchStatement_return();
            retval.start = input.LT(1);
            int switchStatement_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken SWITCH181 = null;
            condition_return condition182 = null;

            commentExpression_return commentExpression183 = null;

            switchBlock_return switchBlock184 = null;


            CommonTree SWITCH181_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 53))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:458:4: ( SWITCH ( condition ( commentExpression )* ) switchBlock )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:458:4: SWITCH ( condition ( commentExpression )* ) switchBlock
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    SWITCH181 = (IToken)input.LT(1);
                    Match(input, SWITCH, FOLLOW_SWITCH_in_switchStatement1948); if (failed) return retval;
                    if (backtracking == 0)
                    {
                        SWITCH181_tree = (CommonTree)adaptor.Create(SWITCH181);
                        root_0 = (CommonTree)adaptor.BecomeRoot(SWITCH181_tree, root_0);
                    }
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:458:12: ( condition ( commentExpression )* )
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:458:13: condition ( commentExpression )*
                    {
                        PushFollow(FOLLOW_condition_in_switchStatement1952);
                        condition182 = condition();
                        followingStackPointer_--;
                        if (failed) return retval;
                        if (backtracking == 0) adaptor.AddChild(root_0, condition182.Tree);
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:458:23: ( commentExpression )*
                        do
                        {
                            int alt47 = 2;
                            int LA47_0 = input.LA(1);

                            if (((LA47_0 >= SL_COMMENT && LA47_0 <= ML_COMMENT)))
                            {
                                alt47 = 1;
                            }


                            switch (alt47)
                            {
                                case 1:
                                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: commentExpression
                                    {
                                        PushFollow(FOLLOW_commentExpression_in_switchStatement1954);
                                        commentExpression183 = commentExpression();
                                        followingStackPointer_--;
                                        if (failed) return retval;
                                        if (backtracking == 0) adaptor.AddChild(root_0, commentExpression183.Tree);

                                    }
                                    break;

                                default:
                                    goto loop47;
                            }
                        } while (true);

                    loop47:
                        ;	// Stops C# compiler whinging that label 'loop47' has no statements


                    }

                    PushFollow(FOLLOW_switchBlock_in_switchStatement1960);
                    switchBlock184 = switchBlock();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, switchBlock184.Tree);

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 53, switchStatement_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end switchStatement

        public class switchBlock_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start switchBlock
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:462:1: switchBlock : LCURLY ( caseStatement )* ( defaultStatement )? RCURLY -> ^( BLOCK ( caseStatement )* ( defaultStatement )? ) ;
        public switchBlock_return switchBlock() // throws RecognitionException [1]
        {
            switchBlock_return retval = new switchBlock_return();
            retval.start = input.LT(1);
            int switchBlock_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken LCURLY185 = null;
            IToken RCURLY188 = null;
            caseStatement_return caseStatement186 = null;

            defaultStatement_return defaultStatement187 = null;


            CommonTree LCURLY185_tree = null;
            CommonTree RCURLY188_tree = null;
            RewriteRuleTokenStream stream_LCURLY = new RewriteRuleTokenStream(adaptor, "token LCURLY");
            RewriteRuleTokenStream stream_RCURLY = new RewriteRuleTokenStream(adaptor, "token RCURLY");
            RewriteRuleSubtreeStream stream_caseStatement = new RewriteRuleSubtreeStream(adaptor, "rule caseStatement");
            RewriteRuleSubtreeStream stream_defaultStatement = new RewriteRuleSubtreeStream(adaptor, "rule defaultStatement");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 54))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:463:4: ( LCURLY ( caseStatement )* ( defaultStatement )? RCURLY -> ^( BLOCK ( caseStatement )* ( defaultStatement )? ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:463:4: LCURLY ( caseStatement )* ( defaultStatement )? RCURLY
                {
                    LCURLY185 = (IToken)input.LT(1);
                    Match(input, LCURLY, FOLLOW_LCURLY_in_switchBlock1971); if (failed) return retval;
                    if (backtracking == 0) stream_LCURLY.Add(LCURLY185);

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:464:3: ( caseStatement )*
                    do
                    {
                        int alt48 = 2;
                        int LA48_0 = input.LA(1);

                        if ((LA48_0 == CASE))
                        {
                            alt48 = 1;
                        }


                        switch (alt48)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:464:4: caseStatement
                                {
                                    PushFollow(FOLLOW_caseStatement_in_switchBlock1976);
                                    caseStatement186 = caseStatement();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) stream_caseStatement.Add(caseStatement186.Tree);

                                }
                                break;

                            default:
                                goto loop48;
                        }
                    } while (true);

                loop48:
                    ;	// Stops C# compiler whinging that label 'loop48' has no statements

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:465:3: ( defaultStatement )?
                    int alt49 = 2;
                    int LA49_0 = input.LA(1);

                    if ((LA49_0 == DEFAULT))
                    {
                        alt49 = 1;
                    }
                    switch (alt49)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:465:4: defaultStatement
                            {
                                PushFollow(FOLLOW_defaultStatement_in_switchBlock1983);
                                defaultStatement187 = defaultStatement();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) stream_defaultStatement.Add(defaultStatement187.Tree);

                            }
                            break;

                    }

                    RCURLY188 = (IToken)input.LT(1);
                    Match(input, RCURLY, FOLLOW_RCURLY_in_switchBlock1989); if (failed) return retval;
                    if (backtracking == 0) stream_RCURLY.Add(RCURLY188);


                    // AST REWRITE
                    // elements:          defaultStatement, caseStatement
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 467:3: -> ^( BLOCK ( caseStatement )* ( defaultStatement )? )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:467:6: ^( BLOCK ( caseStatement )* ( defaultStatement )? )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(BLOCK, "BLOCK"), root_1);

                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:467:14: ( caseStatement )*
                                while (stream_caseStatement.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_caseStatement.Next());

                                }
                                stream_caseStatement.Reset();
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:467:29: ( defaultStatement )?
                                if (stream_defaultStatement.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_defaultStatement.Next());

                                }
                                stream_defaultStatement.Reset();

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 54, switchBlock_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end switchBlock

        public class caseStatement_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start caseStatement
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:470:1: caseStatement : CASE expression COLON l= switchStatementList ;
        public caseStatement_return caseStatement() // throws RecognitionException [1]
        {
            caseStatement_return retval = new caseStatement_return();
            retval.start = input.LT(1);
            int caseStatement_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken CASE189 = null;
            IToken COLON191 = null;
            switchStatementList_return l = null;

            expression_return expression190 = null;


            CommonTree CASE189_tree = null;
            CommonTree COLON191_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 55))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:471:4: ( CASE expression COLON l= switchStatementList )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:471:4: CASE expression COLON l= switchStatementList
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    CASE189 = (IToken)input.LT(1);
                    Match(input, CASE, FOLLOW_CASE_in_caseStatement2014); if (failed) return retval;
                    if (backtracking == 0)
                    {
                        CASE189_tree = (CommonTree)adaptor.Create(CASE189);
                        root_0 = (CommonTree)adaptor.BecomeRoot(CASE189_tree, root_0);
                    }
                    PushFollow(FOLLOW_expression_in_caseStatement2017);
                    expression190 = expression();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, expression190.Tree);
                    COLON191 = (IToken)input.LT(1);
                    Match(input, COLON, FOLLOW_COLON_in_caseStatement2019); if (failed) return retval;
                    PushFollow(FOLLOW_switchStatementList_in_caseStatement2024);
                    l = switchStatementList();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, l.Tree);

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 55, caseStatement_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end caseStatement

        public class defaultStatement_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start defaultStatement
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:474:1: defaultStatement : DEFAULT COLON l= switchStatementList ;
        public defaultStatement_return defaultStatement() // throws RecognitionException [1]
        {
            defaultStatement_return retval = new defaultStatement_return();
            retval.start = input.LT(1);
            int defaultStatement_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken DEFAULT192 = null;
            IToken COLON193 = null;
            switchStatementList_return l = null;


            CommonTree DEFAULT192_tree = null;
            CommonTree COLON193_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 56))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:475:4: ( DEFAULT COLON l= switchStatementList )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:475:4: DEFAULT COLON l= switchStatementList
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    DEFAULT192 = (IToken)input.LT(1);
                    Match(input, DEFAULT, FOLLOW_DEFAULT_in_defaultStatement2036); if (failed) return retval;
                    if (backtracking == 0)
                    {
                        DEFAULT192_tree = (CommonTree)adaptor.Create(DEFAULT192);
                        root_0 = (CommonTree)adaptor.BecomeRoot(DEFAULT192_tree, root_0);
                    }
                    COLON193 = (IToken)input.LT(1);
                    Match(input, COLON, FOLLOW_COLON_in_defaultStatement2039); if (failed) return retval;
                    PushFollow(FOLLOW_switchStatementList_in_defaultStatement2044);
                    l = switchStatementList();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, l.Tree);

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 56, defaultStatement_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end defaultStatement

        public class switchStatementList_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start switchStatementList
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:478:1: switchStatementList : ( statement )* -> ^( SWITCH_STATEMENT_LIST ( statement )* ) ;
        public switchStatementList_return switchStatementList() // throws RecognitionException [1]
        {
            switchStatementList_return retval = new switchStatementList_return();
            retval.start = input.LT(1);
            int switchStatementList_StartIndex = input.Index();
            CommonTree root_0 = null;

            statement_return statement194 = null;


            RewriteRuleSubtreeStream stream_statement = new RewriteRuleSubtreeStream(adaptor, "rule statement");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 57))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:479:4: ( ( statement )* -> ^( SWITCH_STATEMENT_LIST ( statement )* ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:479:4: ( statement )*
                {
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:479:4: ( statement )*
                    do
                    {
                        int alt50 = 2;
                        int LA50_0 = input.LA(1);

                        if ((LA50_0 == DEFAULT))
                        {
                            int LA50_1 = input.LA(2);

                            if ((LA50_1 == XML))
                            {
                                alt50 = 1;
                            }


                        }
                        else if ((LA50_0 == LCURLY || LA50_0 == SEMI || (LA50_0 >= STRING_LITERAL && LA50_0 <= CONST) || LA50_0 == LPAREN || LA50_0 == IF || (LA50_0 >= RETURN && LA50_0 <= SWITCH) || LA50_0 == FOR || (LA50_0 >= WHILE && LA50_0 <= XML) || (LA50_0 >= IDENT && LA50_0 <= LBRACK) || LA50_0 == DYNAMIC || LA50_0 == LT || (LA50_0 >= IS && LA50_0 <= AS) || (LA50_0 >= PLUS && LA50_0 <= DIV) || (LA50_0 >= INC && LA50_0 <= BNOT) || (LA50_0 >= E4X_ATTRI && LA50_0 <= ML_COMMENT) || (LA50_0 >= 176 && LA50_0 <= 177) || LA50_0 == 180))
                        {
                            alt50 = 1;
                        }


                        switch (alt50)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: statement
                                {
                                    PushFollow(FOLLOW_statement_in_switchStatementList2055);
                                    statement194 = statement();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) stream_statement.Add(statement194.Tree);

                                }
                                break;

                            default:
                                goto loop50;
                        }
                    } while (true);

                loop50:
                    ;	// Stops C# compiler whinging that label 'loop50' has no statements


                    // AST REWRITE
                    // elements:          statement
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 479:15: -> ^( SWITCH_STATEMENT_LIST ( statement )* )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:479:18: ^( SWITCH_STATEMENT_LIST ( statement )* )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(SWITCH_STATEMENT_LIST, "SWITCH_STATEMENT_LIST"), root_1);

                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:479:42: ( statement )*
                                while (stream_statement.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_statement.Next());

                                }
                                stream_statement.Reset();

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 57, switchStatementList_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end switchStatementList

        public class forEachStatement_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start forEachStatement
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:482:1: forEachStatement : f= FOR EACH LPAREN forInClause RPAREN statement -> ^( FOR_EACH[$f] forInClause statement ) ;
        public forEachStatement_return forEachStatement() // throws RecognitionException [1]
        {
            forEachStatement_return retval = new forEachStatement_return();
            retval.start = input.LT(1);
            int forEachStatement_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken f = null;
            IToken EACH195 = null;
            IToken LPAREN196 = null;
            IToken RPAREN198 = null;
            forInClause_return forInClause197 = null;

            statement_return statement199 = null;


            CommonTree f_tree = null;
            CommonTree EACH195_tree = null;
            CommonTree LPAREN196_tree = null;
            CommonTree RPAREN198_tree = null;
            RewriteRuleTokenStream stream_EACH = new RewriteRuleTokenStream(adaptor, "token EACH");
            RewriteRuleTokenStream stream_FOR = new RewriteRuleTokenStream(adaptor, "token FOR");
            RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor, "token RPAREN");
            RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor, "token LPAREN");
            RewriteRuleSubtreeStream stream_statement = new RewriteRuleSubtreeStream(adaptor, "rule statement");
            RewriteRuleSubtreeStream stream_forInClause = new RewriteRuleSubtreeStream(adaptor, "rule forInClause");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 58))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:483:4: (f= FOR EACH LPAREN forInClause RPAREN statement -> ^( FOR_EACH[$f] forInClause statement ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:483:4: f= FOR EACH LPAREN forInClause RPAREN statement
                {
                    f = (IToken)input.LT(1);
                    Match(input, FOR, FOLLOW_FOR_in_forEachStatement2078); if (failed) return retval;
                    if (backtracking == 0) stream_FOR.Add(f);

                    EACH195 = (IToken)input.LT(1);
                    Match(input, EACH, FOLLOW_EACH_in_forEachStatement2080); if (failed) return retval;
                    if (backtracking == 0) stream_EACH.Add(EACH195);

                    LPAREN196 = (IToken)input.LT(1);
                    Match(input, LPAREN, FOLLOW_LPAREN_in_forEachStatement2084); if (failed) return retval;
                    if (backtracking == 0) stream_LPAREN.Add(LPAREN196);

                    PushFollow(FOLLOW_forInClause_in_forEachStatement2088);
                    forInClause197 = forInClause();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_forInClause.Add(forInClause197.Tree);
                    RPAREN198 = (IToken)input.LT(1);
                    Match(input, RPAREN, FOLLOW_RPAREN_in_forEachStatement2092); if (failed) return retval;
                    if (backtracking == 0) stream_RPAREN.Add(RPAREN198);

                    PushFollow(FOLLOW_statement_in_forEachStatement2096);
                    statement199 = statement();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_statement.Add(statement199.Tree);

                    // AST REWRITE
                    // elements:          statement, forInClause
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 488:3: -> ^( FOR_EACH[$f] forInClause statement )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:488:6: ^( FOR_EACH[$f] forInClause statement )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(FOR_EACH, f), root_1);

                                adaptor.AddChild(root_1, stream_forInClause.Next());
                                adaptor.AddChild(root_1, stream_statement.Next());

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 58, forEachStatement_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end forEachStatement

        public class forStatement_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start forStatement
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:491:1: forStatement : f= FOR LPAREN ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) ) ;
        public forStatement_return forStatement() // throws RecognitionException [1]
        {
            InOperator_stack.Push(new InOperator_scope());

            forStatement_return retval = new forStatement_return();
            retval.start = input.LT(1);
            int forStatement_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken f = null;
            IToken LPAREN200 = null;
            IToken RPAREN202 = null;
            IToken RPAREN205 = null;
            forInClause_return forInClause201 = null;

            statement_return statement203 = null;

            traditionalForClause_return traditionalForClause204 = null;

            statement_return statement206 = null;


            CommonTree f_tree = null;
            CommonTree LPAREN200_tree = null;
            CommonTree RPAREN202_tree = null;
            CommonTree RPAREN205_tree = null;
            RewriteRuleTokenStream stream_FOR = new RewriteRuleTokenStream(adaptor, "token FOR");
            RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor, "token RPAREN");
            RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor, "token LPAREN");
            RewriteRuleSubtreeStream stream_statement = new RewriteRuleSubtreeStream(adaptor, "rule statement");
            RewriteRuleSubtreeStream stream_traditionalForClause = new RewriteRuleSubtreeStream(adaptor, "rule traditionalForClause");
            RewriteRuleSubtreeStream stream_forInClause = new RewriteRuleSubtreeStream(adaptor, "rule forInClause");

            ((InOperator_scope)InOperator_stack.Peek()).allowed = false;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 59))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:496:4: (f= FOR LPAREN ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:496:4: f= FOR LPAREN ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )
                {
                    f = (IToken)input.LT(1);
                    Match(input, FOR, FOLLOW_FOR_in_forStatement2132); if (failed) return retval;
                    if (backtracking == 0) stream_FOR.Add(f);

                    LPAREN200 = (IToken)input.LT(1);
                    Match(input, LPAREN, FOLLOW_LPAREN_in_forStatement2136); if (failed) return retval;
                    if (backtracking == 0) stream_LPAREN.Add(LPAREN200);

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )
                    int alt51 = 2;
                    switch (input.LA(1))
                    {
                        case VAR:
                        case CONST:
                            {
                                switch (input.LA(2))
                                {
                                    case IDENT:
                                        {
                                            int LA51_36 = input.LA(3);

                                            if ((synpred78()))
                                            {
                                                alt51 = 1;
                                            }
                                            else if ((true))
                                            {
                                                alt51 = 2;
                                            }
                                            else
                                            {
                                                if (backtracking > 0) { failed = true; return retval; }
                                                NoViableAltException nvae_d51s36 =
                                                    new NoViableAltException("498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 51, 36, input);

                                                throw nvae_d51s36;
                                            }
                                        }
                                        break;
                                    case USE:
                                        {
                                            int LA51_37 = input.LA(3);

                                            if ((synpred78()))
                                            {
                                                alt51 = 1;
                                            }
                                            else if ((true))
                                            {
                                                alt51 = 2;
                                            }
                                            else
                                            {
                                                if (backtracking > 0) { failed = true; return retval; }
                                                NoViableAltException nvae_d51s37 =
                                                    new NoViableAltException("498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 51, 37, input);

                                                throw nvae_d51s37;
                                            }
                                        }
                                        break;
                                    case XML:
                                        {
                                            int LA51_38 = input.LA(3);

                                            if ((synpred78()))
                                            {
                                                alt51 = 1;
                                            }
                                            else if ((true))
                                            {
                                                alt51 = 2;
                                            }
                                            else
                                            {
                                                if (backtracking > 0) { failed = true; return retval; }
                                                NoViableAltException nvae_d51s38 =
                                                    new NoViableAltException("498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 51, 38, input);

                                                throw nvae_d51s38;
                                            }
                                        }
                                        break;
                                    case DYNAMIC:
                                        {
                                            int LA51_39 = input.LA(3);

                                            if ((synpred78()))
                                            {
                                                alt51 = 1;
                                            }
                                            else if ((true))
                                            {
                                                alt51 = 2;
                                            }
                                            else
                                            {
                                                if (backtracking > 0) { failed = true; return retval; }
                                                NoViableAltException nvae_d51s39 =
                                                    new NoViableAltException("498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 51, 39, input);

                                                throw nvae_d51s39;
                                            }
                                        }
                                        break;
                                    case NAMESPACE:
                                        {
                                            int LA51_40 = input.LA(3);

                                            if ((synpred78()))
                                            {
                                                alt51 = 1;
                                            }
                                            else if ((true))
                                            {
                                                alt51 = 2;
                                            }
                                            else
                                            {
                                                if (backtracking > 0) { failed = true; return retval; }
                                                NoViableAltException nvae_d51s40 =
                                                    new NoViableAltException("498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 51, 40, input);

                                                throw nvae_d51s40;
                                            }
                                        }
                                        break;
                                    case IS:
                                        {
                                            int LA51_41 = input.LA(3);

                                            if ((synpred78()))
                                            {
                                                alt51 = 1;
                                            }
                                            else if ((true))
                                            {
                                                alt51 = 2;
                                            }
                                            else
                                            {
                                                if (backtracking > 0) { failed = true; return retval; }
                                                NoViableAltException nvae_d51s41 =
                                                    new NoViableAltException("498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 51, 41, input);

                                                throw nvae_d51s41;
                                            }
                                        }
                                        break;
                                    case AS:
                                        {
                                            int LA51_42 = input.LA(3);

                                            if ((synpred78()))
                                            {
                                                alt51 = 1;
                                            }
                                            else if ((true))
                                            {
                                                alt51 = 2;
                                            }
                                            else
                                            {
                                                if (backtracking > 0) { failed = true; return retval; }
                                                NoViableAltException nvae_d51s42 =
                                                    new NoViableAltException("498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 51, 42, input);

                                                throw nvae_d51s42;
                                            }
                                        }
                                        break;
                                    case GET:
                                        {
                                            int LA51_43 = input.LA(3);

                                            if ((synpred78()))
                                            {
                                                alt51 = 1;
                                            }
                                            else if ((true))
                                            {
                                                alt51 = 2;
                                            }
                                            else
                                            {
                                                if (backtracking > 0) { failed = true; return retval; }
                                                NoViableAltException nvae_d51s43 =
                                                    new NoViableAltException("498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 51, 43, input);

                                                throw nvae_d51s43;
                                            }
                                        }
                                        break;
                                    case SET:
                                        {
                                            int LA51_44 = input.LA(3);

                                            if ((synpred78()))
                                            {
                                                alt51 = 1;
                                            }
                                            else if ((true))
                                            {
                                                alt51 = 2;
                                            }
                                            else
                                            {
                                                if (backtracking > 0) { failed = true; return retval; }
                                                NoViableAltException nvae_d51s44 =
                                                    new NoViableAltException("498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 51, 44, input);

                                                throw nvae_d51s44;
                                            }
                                        }
                                        break;
                                    default:
                                        if (backtracking > 0) { failed = true; return retval; }
                                        NoViableAltException nvae_d51s1 =
                                            new NoViableAltException("498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 51, 1, input);

                                        throw nvae_d51s1;
                                }

                            }
                            break;
                        case IDENT:
                            {
                                int LA51_2 = input.LA(2);

                                if ((LA51_2 == SEMI || LA51_2 == COMMA || (LA51_2 >= ASSIGN && LA51_2 <= LPAREN) || (LA51_2 >= STAR && LA51_2 <= DBL_COLON) || LA51_2 == LBRACK || (LA51_2 >= STAR_ASSIGN && LA51_2 <= DEC) || LA51_2 == E4X_DESC || (LA51_2 >= 186 && LA51_2 <= 187)))
                                {
                                    alt51 = 2;
                                }
                                else if ((LA51_2 == IN))
                                {
                                    int LA51_54 = input.LA(3);

                                    if ((synpred78()))
                                    {
                                        alt51 = 1;
                                    }
                                    else if ((true))
                                    {
                                        alt51 = 2;
                                    }
                                    else
                                    {
                                        if (backtracking > 0) { failed = true; return retval; }
                                        NoViableAltException nvae_d51s54 =
                                            new NoViableAltException("498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 51, 54, input);

                                        throw nvae_d51s54;
                                    }
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d51s2 =
                                        new NoViableAltException("498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 51, 2, input);

                                    throw nvae_d51s2;
                                }
                            }
                            break;
                        case USE:
                            {
                                int LA51_3 = input.LA(2);

                                if ((LA51_3 == IN))
                                {
                                    int LA51_73 = input.LA(3);

                                    if ((synpred78()))
                                    {
                                        alt51 = 1;
                                    }
                                    else if ((true))
                                    {
                                        alt51 = 2;
                                    }
                                    else
                                    {
                                        if (backtracking > 0) { failed = true; return retval; }
                                        NoViableAltException nvae_d51s73 =
                                            new NoViableAltException("498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 51, 73, input);

                                        throw nvae_d51s73;
                                    }
                                }
                                else if ((LA51_3 == SEMI || LA51_3 == COMMA || (LA51_3 >= ASSIGN && LA51_3 <= LPAREN) || (LA51_3 >= STAR && LA51_3 <= DOT) || LA51_3 == LBRACK || (LA51_3 >= STAR_ASSIGN && LA51_3 <= DEC) || LA51_3 == E4X_DESC || (LA51_3 >= 186 && LA51_3 <= 187)))
                                {
                                    alt51 = 2;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d51s3 =
                                        new NoViableAltException("498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 51, 3, input);

                                    throw nvae_d51s3;
                                }
                            }
                            break;
                        case XML:
                            {
                                int LA51_4 = input.LA(2);

                                if ((LA51_4 == SEMI || LA51_4 == COMMA || (LA51_4 >= ASSIGN && LA51_4 <= LPAREN) || (LA51_4 >= STAR && LA51_4 <= DOT) || LA51_4 == LBRACK || (LA51_4 >= STAR_ASSIGN && LA51_4 <= DEC) || LA51_4 == E4X_DESC || (LA51_4 >= 186 && LA51_4 <= 187)))
                                {
                                    alt51 = 2;
                                }
                                else if ((LA51_4 == IN))
                                {
                                    int LA51_109 = input.LA(3);

                                    if ((synpred78()))
                                    {
                                        alt51 = 1;
                                    }
                                    else if ((true))
                                    {
                                        alt51 = 2;
                                    }
                                    else
                                    {
                                        if (backtracking > 0) { failed = true; return retval; }
                                        NoViableAltException nvae_d51s109 =
                                            new NoViableAltException("498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 51, 109, input);

                                        throw nvae_d51s109;
                                    }
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d51s4 =
                                        new NoViableAltException("498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 51, 4, input);

                                    throw nvae_d51s4;
                                }
                            }
                            break;
                        case DYNAMIC:
                            {
                                int LA51_5 = input.LA(2);

                                if ((LA51_5 == SEMI || LA51_5 == COMMA || (LA51_5 >= ASSIGN && LA51_5 <= LPAREN) || (LA51_5 >= STAR && LA51_5 <= DOT) || LA51_5 == LBRACK || (LA51_5 >= STAR_ASSIGN && LA51_5 <= DEC) || LA51_5 == E4X_DESC || (LA51_5 >= 186 && LA51_5 <= 187)))
                                {
                                    alt51 = 2;
                                }
                                else if ((LA51_5 == IN))
                                {
                                    int LA51_136 = input.LA(3);

                                    if ((synpred78()))
                                    {
                                        alt51 = 1;
                                    }
                                    else if ((true))
                                    {
                                        alt51 = 2;
                                    }
                                    else
                                    {
                                        if (backtracking > 0) { failed = true; return retval; }
                                        NoViableAltException nvae_d51s136 =
                                            new NoViableAltException("498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 51, 136, input);

                                        throw nvae_d51s136;
                                    }
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d51s5 =
                                        new NoViableAltException("498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 51, 5, input);

                                    throw nvae_d51s5;
                                }
                            }
                            break;
                        case NAMESPACE:
                            {
                                int LA51_6 = input.LA(2);

                                if ((LA51_6 == SEMI || LA51_6 == COMMA || (LA51_6 >= ASSIGN && LA51_6 <= LPAREN) || (LA51_6 >= STAR && LA51_6 <= DOT) || LA51_6 == LBRACK || (LA51_6 >= STAR_ASSIGN && LA51_6 <= DEC) || LA51_6 == E4X_DESC || (LA51_6 >= 186 && LA51_6 <= 187)))
                                {
                                    alt51 = 2;
                                }
                                else if ((LA51_6 == IN))
                                {
                                    int LA51_163 = input.LA(3);

                                    if ((synpred78()))
                                    {
                                        alt51 = 1;
                                    }
                                    else if ((true))
                                    {
                                        alt51 = 2;
                                    }
                                    else
                                    {
                                        if (backtracking > 0) { failed = true; return retval; }
                                        NoViableAltException nvae_d51s163 =
                                            new NoViableAltException("498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 51, 163, input);

                                        throw nvae_d51s163;
                                    }
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d51s6 =
                                        new NoViableAltException("498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 51, 6, input);

                                    throw nvae_d51s6;
                                }
                            }
                            break;
                        case IS:
                            {
                                int LA51_7 = input.LA(2);

                                if ((LA51_7 == SEMI || LA51_7 == COMMA || (LA51_7 >= ASSIGN && LA51_7 <= LPAREN) || (LA51_7 >= STAR && LA51_7 <= DOT) || LA51_7 == LBRACK || (LA51_7 >= STAR_ASSIGN && LA51_7 <= DEC) || LA51_7 == E4X_DESC || (LA51_7 >= 186 && LA51_7 <= 187)))
                                {
                                    alt51 = 2;
                                }
                                else if ((LA51_7 == IN))
                                {
                                    int LA51_190 = input.LA(3);

                                    if ((synpred78()))
                                    {
                                        alt51 = 1;
                                    }
                                    else if ((true))
                                    {
                                        alt51 = 2;
                                    }
                                    else
                                    {
                                        if (backtracking > 0) { failed = true; return retval; }
                                        NoViableAltException nvae_d51s190 =
                                            new NoViableAltException("498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 51, 190, input);

                                        throw nvae_d51s190;
                                    }
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d51s7 =
                                        new NoViableAltException("498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 51, 7, input);

                                    throw nvae_d51s7;
                                }
                            }
                            break;
                        case AS:
                            {
                                int LA51_8 = input.LA(2);

                                if ((LA51_8 == SEMI || LA51_8 == COMMA || (LA51_8 >= ASSIGN && LA51_8 <= LPAREN) || (LA51_8 >= STAR && LA51_8 <= DOT) || LA51_8 == LBRACK || (LA51_8 >= STAR_ASSIGN && LA51_8 <= DEC) || LA51_8 == E4X_DESC || (LA51_8 >= 186 && LA51_8 <= 187)))
                                {
                                    alt51 = 2;
                                }
                                else if ((LA51_8 == IN))
                                {
                                    int LA51_217 = input.LA(3);

                                    if ((synpred78()))
                                    {
                                        alt51 = 1;
                                    }
                                    else if ((true))
                                    {
                                        alt51 = 2;
                                    }
                                    else
                                    {
                                        if (backtracking > 0) { failed = true; return retval; }
                                        NoViableAltException nvae_d51s217 =
                                            new NoViableAltException("498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 51, 217, input);

                                        throw nvae_d51s217;
                                    }
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d51s8 =
                                        new NoViableAltException("498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 51, 8, input);

                                    throw nvae_d51s8;
                                }
                            }
                            break;
                        case GET:
                            {
                                int LA51_9 = input.LA(2);

                                if ((LA51_9 == SEMI || LA51_9 == COMMA || (LA51_9 >= ASSIGN && LA51_9 <= LPAREN) || (LA51_9 >= STAR && LA51_9 <= DOT) || LA51_9 == LBRACK || (LA51_9 >= STAR_ASSIGN && LA51_9 <= DEC) || LA51_9 == E4X_DESC || (LA51_9 >= 186 && LA51_9 <= 187)))
                                {
                                    alt51 = 2;
                                }
                                else if ((LA51_9 == IN))
                                {
                                    int LA51_244 = input.LA(3);

                                    if ((synpred78()))
                                    {
                                        alt51 = 1;
                                    }
                                    else if ((true))
                                    {
                                        alt51 = 2;
                                    }
                                    else
                                    {
                                        if (backtracking > 0) { failed = true; return retval; }
                                        NoViableAltException nvae_d51s244 =
                                            new NoViableAltException("498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 51, 244, input);

                                        throw nvae_d51s244;
                                    }
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d51s9 =
                                        new NoViableAltException("498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 51, 9, input);

                                    throw nvae_d51s9;
                                }
                            }
                            break;
                        case SET:
                            {
                                int LA51_10 = input.LA(2);

                                if ((LA51_10 == SEMI || LA51_10 == COMMA || (LA51_10 >= ASSIGN && LA51_10 <= LPAREN) || (LA51_10 >= STAR && LA51_10 <= DOT) || LA51_10 == LBRACK || (LA51_10 >= STAR_ASSIGN && LA51_10 <= DEC) || LA51_10 == E4X_DESC || (LA51_10 >= 186 && LA51_10 <= 187)))
                                {
                                    alt51 = 2;
                                }
                                else if ((LA51_10 == IN))
                                {
                                    int LA51_271 = input.LA(3);

                                    if ((synpred78()))
                                    {
                                        alt51 = 1;
                                    }
                                    else if ((true))
                                    {
                                        alt51 = 2;
                                    }
                                    else
                                    {
                                        if (backtracking > 0) { failed = true; return retval; }
                                        NoViableAltException nvae_d51s271 =
                                            new NoViableAltException("498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 51, 271, input);

                                        throw nvae_d51s271;
                                    }
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d51s10 =
                                        new NoViableAltException("498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 51, 10, input);

                                    throw nvae_d51s10;
                                }
                            }
                            break;
                        case LCURLY:
                        case SEMI:
                        case STRING_LITERAL:
                        case FUNCTION:
                        case LPAREN:
                        case PUBLIC:
                        case PRIVATE:
                        case PROTECTED:
                        case INTERNAL:
                        case LBRACK:
                        case LT:
                        case PLUS:
                        case MINUS:
                        case DIV:
                        case INC:
                        case DEC:
                        case DELETE:
                        case TYPEOF:
                        case LNOT:
                        case BNOT:
                        case E4X_ATTRI:
                        case UNDEFINED:
                        case TRUE:
                        case FALSE:
                        case NULL:
                        case HEX_LITERAL:
                        case DECIMAL_LITERAL:
                        case OCTAL_LITERAL:
                        case FLOAT_LITERAL:
                        case NEW:
                        case 180:
                            {
                                alt51 = 2;
                            }
                            break;
                        default:
                            if (backtracking > 0) { failed = true; return retval; }
                            NoViableAltException nvae_d51s0 =
                                new NoViableAltException("498:3: ( ( forInClauseDecl IN )=> forInClause RPAREN statement -> ^( FOR_IN[$f] forInClause statement ) | traditionalForClause RPAREN statement -> ^( $f traditionalForClause statement ) )", 51, 0, input);

                            throw nvae_d51s0;
                    }

                    switch (alt51)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:498:5: ( forInClauseDecl IN )=> forInClause RPAREN statement
                            {
                                PushFollow(FOLLOW_forInClause_in_forStatement2148);
                                forInClause201 = forInClause();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) stream_forInClause.Add(forInClause201.Tree);
                                RPAREN202 = (IToken)input.LT(1);
                                Match(input, RPAREN, FOLLOW_RPAREN_in_forStatement2150); if (failed) return retval;
                                if (backtracking == 0) stream_RPAREN.Add(RPAREN202);

                                PushFollow(FOLLOW_statement_in_forStatement2152);
                                statement203 = statement();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) stream_statement.Add(statement203.Tree);

                                // AST REWRITE
                                // elements:          forInClause, statement
                                // token labels:      
                                // rule labels:       retval
                                // token list labels: 
                                // rule list labels:  
                                if (backtracking == 0)
                                {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                    root_0 = (CommonTree)adaptor.GetNilNode();
                                    // 499:4: -> ^( FOR_IN[$f] forInClause statement )
                                    {
                                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:499:7: ^( FOR_IN[$f] forInClause statement )
                                        {
                                            CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                            root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(FOR_IN, f), root_1);

                                            adaptor.AddChild(root_1, stream_forInClause.Next());
                                            adaptor.AddChild(root_1, stream_statement.Next());

                                            adaptor.AddChild(root_0, root_1);
                                        }

                                    }

                                }

                            }
                            break;
                        case 2:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:501:5: traditionalForClause RPAREN statement
                            {
                                PushFollow(FOLLOW_traditionalForClause_in_forStatement2173);
                                traditionalForClause204 = traditionalForClause();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) stream_traditionalForClause.Add(traditionalForClause204.Tree);
                                RPAREN205 = (IToken)input.LT(1);
                                Match(input, RPAREN, FOLLOW_RPAREN_in_forStatement2175); if (failed) return retval;
                                if (backtracking == 0) stream_RPAREN.Add(RPAREN205);

                                PushFollow(FOLLOW_statement_in_forStatement2177);
                                statement206 = statement();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) stream_statement.Add(statement206.Tree);

                                // AST REWRITE
                                // elements:          f, traditionalForClause, statement
                                // token labels:      f
                                // rule labels:       retval
                                // token list labels: 
                                // rule list labels:  
                                if (backtracking == 0)
                                {
                                    retval.tree = root_0;
                                    RewriteRuleTokenStream stream_f = new RewriteRuleTokenStream(adaptor, "token f", f);
                                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                    root_0 = (CommonTree)adaptor.GetNilNode();
                                    // 502:4: -> ^( $f traditionalForClause statement )
                                    {
                                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:502:7: ^( $f traditionalForClause statement )
                                        {
                                            CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                            root_1 = (CommonTree)adaptor.BecomeRoot(stream_f.Next(), root_1);

                                            adaptor.AddChild(root_1, stream_traditionalForClause.Next());
                                            adaptor.AddChild(root_1, stream_statement.Next());

                                            adaptor.AddChild(root_0, root_1);
                                        }

                                    }

                                }

                            }
                            break;

                    }


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 59, forStatement_StartIndex);
                }
                InOperator_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end forStatement

        public class traditionalForClause_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start traditionalForClause
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:506:1: traditionalForClause : a= forInit SEMI b= forCond SEMI c= forIter ;
        public traditionalForClause_return traditionalForClause() // throws RecognitionException [1]
        {
            traditionalForClause_return retval = new traditionalForClause_return();
            retval.start = input.LT(1);
            int traditionalForClause_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken SEMI207 = null;
            IToken SEMI208 = null;
            forInit_return a = null;

            forCond_return b = null;

            forIter_return c = null;


            CommonTree SEMI207_tree = null;
            CommonTree SEMI208_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 60))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:507:4: (a= forInit SEMI b= forCond SEMI c= forIter )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:507:4: a= forInit SEMI b= forCond SEMI c= forIter
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    PushFollow(FOLLOW_forInit_in_traditionalForClause2208);
                    a = forInit();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, a.Tree);
                    SEMI207 = (IToken)input.LT(1);
                    Match(input, SEMI, FOLLOW_SEMI_in_traditionalForClause2210); if (failed) return retval;
                    PushFollow(FOLLOW_forCond_in_traditionalForClause2218);
                    b = forCond();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, b.Tree);
                    SEMI208 = (IToken)input.LT(1);
                    Match(input, SEMI, FOLLOW_SEMI_in_traditionalForClause2220); if (failed) return retval;
                    PushFollow(FOLLOW_forIter_in_traditionalForClause2228);
                    c = forIter();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, c.Tree);

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 60, traditionalForClause_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end traditionalForClause

        public class forInClause_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start forInClause
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:512:1: forInClause : forInClauseDecl IN forInClauseTail ;
        public forInClause_return forInClause() // throws RecognitionException [1]
        {
            forInClause_return retval = new forInClause_return();
            retval.start = input.LT(1);
            int forInClause_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken IN210 = null;
            forInClauseDecl_return forInClauseDecl209 = null;

            forInClauseTail_return forInClauseTail211 = null;


            CommonTree IN210_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 61))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:513:4: ( forInClauseDecl IN forInClauseTail )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:513:4: forInClauseDecl IN forInClauseTail
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    PushFollow(FOLLOW_forInClauseDecl_in_forInClause2240);
                    forInClauseDecl209 = forInClauseDecl();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, forInClauseDecl209.Tree);
                    IN210 = (IToken)input.LT(1);
                    Match(input, IN, FOLLOW_IN_in_forInClause2242); if (failed) return retval;
                    PushFollow(FOLLOW_forInClauseTail_in_forInClause2245);
                    forInClauseTail211 = forInClauseTail();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, forInClauseTail211.Tree);

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 61, forInClause_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end forInClause

        public class forInClauseDecl_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start forInClauseDecl
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:516:1: forInClauseDecl : ( declaration | ident );
        public forInClauseDecl_return forInClauseDecl() // throws RecognitionException [1]
        {
            InOperator_stack.Push(new InOperator_scope());

            forInClauseDecl_return retval = new forInClauseDecl_return();
            retval.start = input.LT(1);
            int forInClauseDecl_StartIndex = input.Index();
            CommonTree root_0 = null;

            declaration_return declaration212 = null;

            ident_return ident213 = null;




            ((InOperator_scope)InOperator_stack.Peek()).allowed = false;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 62))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:521:4: ( declaration | ident )
                int alt52 = 2;
                int LA52_0 = input.LA(1);

                if (((LA52_0 >= VAR && LA52_0 <= CONST)))
                {
                    alt52 = 1;
                }
                else if (((LA52_0 >= GET && LA52_0 <= USE) || LA52_0 == XML || LA52_0 == IDENT || LA52_0 == DYNAMIC || (LA52_0 >= IS && LA52_0 <= AS)))
                {
                    alt52 = 2;
                }
                else
                {
                    if (backtracking > 0) { failed = true; return retval; }
                    NoViableAltException nvae_d52s0 =
                        new NoViableAltException("516:1: forInClauseDecl : ( declaration | ident );", 52, 0, input);

                    throw nvae_d52s0;
                }
                switch (alt52)
                {
                    case 1:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:521:4: declaration
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_declaration_in_forInClauseDecl2266);
                            declaration212 = declaration();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, declaration212.Tree);

                        }
                        break;
                    case 2:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:521:18: ident
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_ident_in_forInClauseDecl2270);
                            ident213 = ident();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, ident213.Tree);

                        }
                        break;

                }
                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 62, forInClauseDecl_StartIndex);
                }
                InOperator_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end forInClauseDecl

        public class forInClauseTail_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start forInClauseTail
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:525:1: forInClauseTail : expressionList ;
        public forInClauseTail_return forInClauseTail() // throws RecognitionException [1]
        {
            InOperator_stack.Push(new InOperator_scope());

            forInClauseTail_return retval = new forInClauseTail_return();
            retval.start = input.LT(1);
            int forInClauseTail_StartIndex = input.Index();
            CommonTree root_0 = null;

            expressionList_return expressionList214 = null;




            ((InOperator_scope)InOperator_stack.Peek()).allowed = true;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 63))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:530:4: ( expressionList )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:530:4: expressionList
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    PushFollow(FOLLOW_expressionList_in_forInClauseTail2292);
                    expressionList214 = expressionList();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, expressionList214.Tree);

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 63, forInClauseTail_StartIndex);
                }
                InOperator_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end forInClauseTail

        public class forInit_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start forInit
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:534:1: forInit : ( declaration | expressionList )? -> ^( FOR_INIT ( declaration )? ( expressionList )? ) ;
        public forInit_return forInit() // throws RecognitionException [1]
        {
            InOperator_stack.Push(new InOperator_scope());

            forInit_return retval = new forInit_return();
            retval.start = input.LT(1);
            int forInit_StartIndex = input.Index();
            CommonTree root_0 = null;

            declaration_return declaration215 = null;

            expressionList_return expressionList216 = null;


            RewriteRuleSubtreeStream stream_expressionList = new RewriteRuleSubtreeStream(adaptor, "rule expressionList");
            RewriteRuleSubtreeStream stream_declaration = new RewriteRuleSubtreeStream(adaptor, "rule declaration");

            ((InOperator_scope)InOperator_stack.Peek()).allowed = false;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 64))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:539:4: ( ( declaration | expressionList )? -> ^( FOR_INIT ( declaration )? ( expressionList )? ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:539:4: ( declaration | expressionList )?
                {
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:539:4: ( declaration | expressionList )?
                    int alt53 = 3;
                    int LA53_0 = input.LA(1);

                    if (((LA53_0 >= VAR && LA53_0 <= CONST)))
                    {
                        alt53 = 1;
                    }
                    else if ((LA53_0 == LCURLY || (LA53_0 >= STRING_LITERAL && LA53_0 <= USE) || LA53_0 == LPAREN || LA53_0 == XML || (LA53_0 >= IDENT && LA53_0 <= LBRACK) || LA53_0 == DYNAMIC || LA53_0 == LT || (LA53_0 >= IS && LA53_0 <= AS) || (LA53_0 >= PLUS && LA53_0 <= DIV) || (LA53_0 >= INC && LA53_0 <= BNOT) || (LA53_0 >= E4X_ATTRI && LA53_0 <= NEW) || LA53_0 == 180))
                    {
                        alt53 = 2;
                    }
                    switch (alt53)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:539:5: declaration
                            {
                                PushFollow(FOLLOW_declaration_in_forInit2316);
                                declaration215 = declaration();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) stream_declaration.Add(declaration215.Tree);

                            }
                            break;
                        case 2:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:539:19: expressionList
                            {
                                PushFollow(FOLLOW_expressionList_in_forInit2320);
                                expressionList216 = expressionList();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) stream_expressionList.Add(expressionList216.Tree);

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements:          declaration, expressionList
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 540:3: -> ^( FOR_INIT ( declaration )? ( expressionList )? )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:540:6: ^( FOR_INIT ( declaration )? ( expressionList )? )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(FOR_INIT, "FOR_INIT"), root_1);

                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:540:17: ( declaration )?
                                if (stream_declaration.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_declaration.Next());

                                }
                                stream_declaration.Reset();
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:540:30: ( expressionList )?
                                if (stream_expressionList.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_expressionList.Next());

                                }
                                stream_expressionList.Reset();

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 64, forInit_StartIndex);
                }
                InOperator_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end forInit

        public class forCond_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start forCond
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:543:1: forCond : ( expressionList )? -> ^( FOR_CONDITION ( expressionList )? ) ;
        public forCond_return forCond() // throws RecognitionException [1]
        {
            InOperator_stack.Push(new InOperator_scope());

            forCond_return retval = new forCond_return();
            retval.start = input.LT(1);
            int forCond_StartIndex = input.Index();
            CommonTree root_0 = null;

            expressionList_return expressionList217 = null;


            RewriteRuleSubtreeStream stream_expressionList = new RewriteRuleSubtreeStream(adaptor, "rule expressionList");

            ((InOperator_scope)InOperator_stack.Peek()).allowed = true;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 65))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:548:4: ( ( expressionList )? -> ^( FOR_CONDITION ( expressionList )? ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:548:4: ( expressionList )?
                {
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:548:4: ( expressionList )?
                    int alt54 = 2;
                    int LA54_0 = input.LA(1);

                    if ((LA54_0 == LCURLY || (LA54_0 >= STRING_LITERAL && LA54_0 <= USE) || LA54_0 == LPAREN || LA54_0 == XML || (LA54_0 >= IDENT && LA54_0 <= LBRACK) || LA54_0 == DYNAMIC || LA54_0 == LT || (LA54_0 >= IS && LA54_0 <= AS) || (LA54_0 >= PLUS && LA54_0 <= DIV) || (LA54_0 >= INC && LA54_0 <= BNOT) || (LA54_0 >= E4X_ATTRI && LA54_0 <= NEW) || LA54_0 == 180))
                    {
                        alt54 = 1;
                    }
                    switch (alt54)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: expressionList
                            {
                                PushFollow(FOLLOW_expressionList_in_forCond2358);
                                expressionList217 = expressionList();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) stream_expressionList.Add(expressionList217.Tree);

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements:          expressionList
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 549:3: -> ^( FOR_CONDITION ( expressionList )? )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:549:6: ^( FOR_CONDITION ( expressionList )? )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(FOR_CONDITION, "FOR_CONDITION"), root_1);

                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:549:22: ( expressionList )?
                                if (stream_expressionList.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_expressionList.Next());

                                }
                                stream_expressionList.Reset();

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 65, forCond_StartIndex);
                }
                InOperator_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end forCond

        public class forIter_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start forIter
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:552:1: forIter : ( expressionList )? -> ^( FOR_ITERATOR ( expressionList )? ) ;
        public forIter_return forIter() // throws RecognitionException [1]
        {
            InOperator_stack.Push(new InOperator_scope());

            forIter_return retval = new forIter_return();
            retval.start = input.LT(1);
            int forIter_StartIndex = input.Index();
            CommonTree root_0 = null;

            expressionList_return expressionList218 = null;


            RewriteRuleSubtreeStream stream_expressionList = new RewriteRuleSubtreeStream(adaptor, "rule expressionList");

            ((InOperator_scope)InOperator_stack.Peek()).allowed = true;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 66))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:557:4: ( ( expressionList )? -> ^( FOR_ITERATOR ( expressionList )? ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:557:4: ( expressionList )?
                {
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:557:4: ( expressionList )?
                    int alt55 = 2;
                    int LA55_0 = input.LA(1);

                    if ((LA55_0 == LCURLY || (LA55_0 >= STRING_LITERAL && LA55_0 <= USE) || LA55_0 == LPAREN || LA55_0 == XML || (LA55_0 >= IDENT && LA55_0 <= LBRACK) || LA55_0 == DYNAMIC || LA55_0 == LT || (LA55_0 >= IS && LA55_0 <= AS) || (LA55_0 >= PLUS && LA55_0 <= DIV) || (LA55_0 >= INC && LA55_0 <= BNOT) || (LA55_0 >= E4X_ATTRI && LA55_0 <= NEW) || LA55_0 == 180))
                    {
                        alt55 = 1;
                    }
                    switch (alt55)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: expressionList
                            {
                                PushFollow(FOLLOW_expressionList_in_forIter2391);
                                expressionList218 = expressionList();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) stream_expressionList.Add(expressionList218.Tree);

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements:          expressionList
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 558:3: -> ^( FOR_ITERATOR ( expressionList )? )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:558:6: ^( FOR_ITERATOR ( expressionList )? )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(FOR_ITERATOR, "FOR_ITERATOR"), root_1);

                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:558:21: ( expressionList )?
                                if (stream_expressionList.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_expressionList.Next());

                                }
                                stream_expressionList.Reset();

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 66, forIter_StartIndex);
                }
                InOperator_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end forIter

        public class whileStatement_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start whileStatement
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:561:1: whileStatement : WHILE condition ( ( commentExpression )* statement ) ;
        public whileStatement_return whileStatement() // throws RecognitionException [1]
        {
            whileStatement_return retval = new whileStatement_return();
            retval.start = input.LT(1);
            int whileStatement_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken WHILE219 = null;
            condition_return condition220 = null;

            commentExpression_return commentExpression221 = null;

            statement_return statement222 = null;


            CommonTree WHILE219_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 67))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:562:4: ( WHILE condition ( ( commentExpression )* statement ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:562:4: WHILE condition ( ( commentExpression )* statement )
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    WHILE219 = (IToken)input.LT(1);
                    Match(input, WHILE, FOLLOW_WHILE_in_whileStatement2414); if (failed) return retval;
                    if (backtracking == 0)
                    {
                        WHILE219_tree = (CommonTree)adaptor.Create(WHILE219);
                        root_0 = (CommonTree)adaptor.BecomeRoot(WHILE219_tree, root_0);
                    }
                    PushFollow(FOLLOW_condition_in_whileStatement2417);
                    condition220 = condition();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, condition220.Tree);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:562:21: ( ( commentExpression )* statement )
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:562:22: ( commentExpression )* statement
                    {
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:562:22: ( commentExpression )*
                        do
                        {
                            int alt56 = 2;
                            int LA56_0 = input.LA(1);

                            if ((LA56_0 == SL_COMMENT))
                            {
                                switch (input.LA(2))
                                {
                                    case SL_COMMENT:
                                        {
                                            int LA56_50 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case ML_COMMENT:
                                        {
                                            int LA56_51 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case LCURLY:
                                        {
                                            int LA56_52 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case VAR:
                                    case CONST:
                                        {
                                            int LA56_53 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case INC:
                                        {
                                            int LA56_54 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case DEC:
                                        {
                                            int LA56_55 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case MINUS:
                                        {
                                            int LA56_56 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case PLUS:
                                        {
                                            int LA56_57 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case DELETE:
                                        {
                                            int LA56_58 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case 180:
                                        {
                                            int LA56_59 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case TYPEOF:
                                        {
                                            int LA56_60 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case LNOT:
                                        {
                                            int LA56_61 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case BNOT:
                                        {
                                            int LA56_62 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case UNDEFINED:
                                        {
                                            int LA56_63 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case LT:
                                        {
                                            int LA56_64 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case DIV:
                                        {
                                            int LA56_65 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case HEX_LITERAL:
                                    case DECIMAL_LITERAL:
                                    case OCTAL_LITERAL:
                                    case FLOAT_LITERAL:
                                        {
                                            int LA56_66 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case STRING_LITERAL:
                                        {
                                            int LA56_67 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case TRUE:
                                        {
                                            int LA56_68 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case FALSE:
                                        {
                                            int LA56_69 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case NULL:
                                        {
                                            int LA56_70 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case LBRACK:
                                        {
                                            int LA56_71 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case FUNCTION:
                                        {
                                            int LA56_72 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case NEW:
                                        {
                                            int LA56_73 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case LPAREN:
                                        {
                                            int LA56_74 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case E4X_ATTRI:
                                        {
                                            int LA56_75 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case IDENT:
                                        {
                                            int LA56_76 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case PUBLIC:
                                    case PRIVATE:
                                    case PROTECTED:
                                    case INTERNAL:
                                        {
                                            int LA56_77 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case USE:
                                        {
                                            int LA56_78 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case XML:
                                        {
                                            int LA56_79 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case DYNAMIC:
                                        {
                                            int LA56_80 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case NAMESPACE:
                                        {
                                            int LA56_81 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case IS:
                                        {
                                            int LA56_82 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case AS:
                                        {
                                            int LA56_83 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case GET:
                                        {
                                            int LA56_84 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case SET:
                                        {
                                            int LA56_85 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case IF:
                                        {
                                            int LA56_86 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case FOR:
                                        {
                                            int LA56_87 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case WHILE:
                                        {
                                            int LA56_88 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case DO:
                                        {
                                            int LA56_89 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case WITH:
                                        {
                                            int LA56_90 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case SWITCH:
                                        {
                                            int LA56_91 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case BREAK:
                                        {
                                            int LA56_92 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case CONTINUE:
                                        {
                                            int LA56_93 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case RETURN:
                                        {
                                            int LA56_94 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case 176:
                                        {
                                            int LA56_95 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case 177:
                                        {
                                            int LA56_96 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case DEFAULT:
                                        {
                                            int LA56_97 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case SEMI:
                                        {
                                            int LA56_98 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;

                                }

                            }
                            else if ((LA56_0 == ML_COMMENT))
                            {
                                switch (input.LA(2))
                                {
                                    case SL_COMMENT:
                                        {
                                            int LA56_103 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case ML_COMMENT:
                                        {
                                            int LA56_104 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case LCURLY:
                                        {
                                            int LA56_106 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case VAR:
                                    case CONST:
                                        {
                                            int LA56_107 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case INC:
                                        {
                                            int LA56_108 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case DEC:
                                        {
                                            int LA56_109 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case MINUS:
                                        {
                                            int LA56_110 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case PLUS:
                                        {
                                            int LA56_111 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case DELETE:
                                        {
                                            int LA56_112 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case 180:
                                        {
                                            int LA56_113 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case TYPEOF:
                                        {
                                            int LA56_114 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case LNOT:
                                        {
                                            int LA56_115 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case BNOT:
                                        {
                                            int LA56_116 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case UNDEFINED:
                                        {
                                            int LA56_117 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case LT:
                                        {
                                            int LA56_118 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case DIV:
                                        {
                                            int LA56_119 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case HEX_LITERAL:
                                    case DECIMAL_LITERAL:
                                    case OCTAL_LITERAL:
                                    case FLOAT_LITERAL:
                                        {
                                            int LA56_120 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case STRING_LITERAL:
                                        {
                                            int LA56_121 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case TRUE:
                                        {
                                            int LA56_122 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case FALSE:
                                        {
                                            int LA56_123 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case NULL:
                                        {
                                            int LA56_124 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case LBRACK:
                                        {
                                            int LA56_125 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case FUNCTION:
                                        {
                                            int LA56_126 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case NEW:
                                        {
                                            int LA56_127 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case LPAREN:
                                        {
                                            int LA56_128 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case E4X_ATTRI:
                                        {
                                            int LA56_129 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case IDENT:
                                        {
                                            int LA56_130 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case PUBLIC:
                                    case PRIVATE:
                                    case PROTECTED:
                                    case INTERNAL:
                                        {
                                            int LA56_131 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case USE:
                                        {
                                            int LA56_132 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case XML:
                                        {
                                            int LA56_133 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case DYNAMIC:
                                        {
                                            int LA56_134 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case NAMESPACE:
                                        {
                                            int LA56_135 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case IS:
                                        {
                                            int LA56_136 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case AS:
                                        {
                                            int LA56_137 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case GET:
                                        {
                                            int LA56_138 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case SET:
                                        {
                                            int LA56_139 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case IF:
                                        {
                                            int LA56_140 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case FOR:
                                        {
                                            int LA56_141 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case WHILE:
                                        {
                                            int LA56_142 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case DO:
                                        {
                                            int LA56_143 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case WITH:
                                        {
                                            int LA56_144 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case SWITCH:
                                        {
                                            int LA56_145 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case BREAK:
                                        {
                                            int LA56_146 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case CONTINUE:
                                        {
                                            int LA56_147 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case RETURN:
                                        {
                                            int LA56_148 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case 176:
                                        {
                                            int LA56_149 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case 177:
                                        {
                                            int LA56_150 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case DEFAULT:
                                        {
                                            int LA56_151 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;
                                    case SEMI:
                                        {
                                            int LA56_152 = input.LA(3);

                                            if ((synpred84()))
                                            {
                                                alt56 = 1;
                                            }


                                        }
                                        break;

                                }

                            }


                            switch (alt56)
                            {
                                case 1:
                                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: commentExpression
                                    {
                                        PushFollow(FOLLOW_commentExpression_in_whileStatement2420);
                                        commentExpression221 = commentExpression();
                                        followingStackPointer_--;
                                        if (failed) return retval;
                                        if (backtracking == 0) adaptor.AddChild(root_0, commentExpression221.Tree);

                                    }
                                    break;

                                default:
                                    goto loop56;
                            }
                        } while (true);

                    loop56:
                        ;	// Stops C# compiler whinging that label 'loop56' has no statements

                        PushFollow(FOLLOW_statement_in_whileStatement2423);
                        statement222 = statement();
                        followingStackPointer_--;
                        if (failed) return retval;
                        if (backtracking == 0) adaptor.AddChild(root_0, statement222.Tree);

                    }


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 67, whileStatement_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end whileStatement

        public class doWhileStatement_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start doWhileStatement
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:565:1: doWhileStatement : DO ( commentExpression )* statement WHILE ( condition ( commentExpression )* ) semi ;
        public doWhileStatement_return doWhileStatement() // throws RecognitionException [1]
        {
            doWhileStatement_return retval = new doWhileStatement_return();
            retval.start = input.LT(1);
            int doWhileStatement_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken DO223 = null;
            IToken WHILE226 = null;
            commentExpression_return commentExpression224 = null;

            statement_return statement225 = null;

            condition_return condition227 = null;

            commentExpression_return commentExpression228 = null;

            semi_return semi229 = null;


            CommonTree DO223_tree = null;
            CommonTree WHILE226_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 68))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:566:4: ( DO ( commentExpression )* statement WHILE ( condition ( commentExpression )* ) semi )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:566:4: DO ( commentExpression )* statement WHILE ( condition ( commentExpression )* ) semi
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    DO223 = (IToken)input.LT(1);
                    Match(input, DO, FOLLOW_DO_in_doWhileStatement2435); if (failed) return retval;
                    if (backtracking == 0)
                    {
                        DO223_tree = (CommonTree)adaptor.Create(DO223);
                        root_0 = (CommonTree)adaptor.BecomeRoot(DO223_tree, root_0);
                    }
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:566:8: ( commentExpression )*
                    do
                    {
                        int alt57 = 2;
                        int LA57_0 = input.LA(1);

                        if ((LA57_0 == SL_COMMENT))
                        {
                            switch (input.LA(2))
                            {
                                case SL_COMMENT:
                                    {
                                        int LA57_50 = input.LA(3);

                                        if ((synpred85()))
                                        {
                                            alt57 = 1;
                                        }


                                    }
                                    break;
                                case ML_COMMENT:
                                    {
                                        int LA57_51 = input.LA(3);

                                        if ((synpred85()))
                                        {
                                            alt57 = 1;
                                        }


                                    }
                                    break;
                                case WHILE:
                                    {
                                        int LA57_52 = input.LA(3);

                                        if ((synpred85()))
                                        {
                                            alt57 = 1;
                                        }


                                    }
                                    break;
                                case LCURLY:
                                case SEMI:
                                case STRING_LITERAL:
                                case FUNCTION:
                                case GET:
                                case SET:
                                case NAMESPACE:
                                case USE:
                                case VAR:
                                case CONST:
                                case LPAREN:
                                case IF:
                                case RETURN:
                                case CONTINUE:
                                case BREAK:
                                case SWITCH:
                                case DEFAULT:
                                case FOR:
                                case DO:
                                case WITH:
                                case XML:
                                case IDENT:
                                case PUBLIC:
                                case PRIVATE:
                                case PROTECTED:
                                case INTERNAL:
                                case LBRACK:
                                case DYNAMIC:
                                case LT:
                                case IS:
                                case AS:
                                case PLUS:
                                case MINUS:
                                case DIV:
                                case INC:
                                case DEC:
                                case DELETE:
                                case TYPEOF:
                                case LNOT:
                                case BNOT:
                                case E4X_ATTRI:
                                case UNDEFINED:
                                case TRUE:
                                case FALSE:
                                case NULL:
                                case HEX_LITERAL:
                                case DECIMAL_LITERAL:
                                case OCTAL_LITERAL:
                                case FLOAT_LITERAL:
                                case NEW:
                                case 176:
                                case 177:
                                case 180:
                                    {
                                        alt57 = 1;
                                    }
                                    break;

                            }

                        }
                        else if ((LA57_0 == ML_COMMENT))
                        {
                            switch (input.LA(2))
                            {
                                case SL_COMMENT:
                                    {
                                        int LA57_99 = input.LA(3);

                                        if ((synpred85()))
                                        {
                                            alt57 = 1;
                                        }


                                    }
                                    break;
                                case ML_COMMENT:
                                    {
                                        int LA57_100 = input.LA(3);

                                        if ((synpred85()))
                                        {
                                            alt57 = 1;
                                        }


                                    }
                                    break;
                                case LCURLY:
                                case SEMI:
                                case STRING_LITERAL:
                                case FUNCTION:
                                case GET:
                                case SET:
                                case NAMESPACE:
                                case USE:
                                case VAR:
                                case CONST:
                                case LPAREN:
                                case IF:
                                case RETURN:
                                case CONTINUE:
                                case BREAK:
                                case SWITCH:
                                case DEFAULT:
                                case FOR:
                                case DO:
                                case WITH:
                                case XML:
                                case IDENT:
                                case PUBLIC:
                                case PRIVATE:
                                case PROTECTED:
                                case INTERNAL:
                                case LBRACK:
                                case DYNAMIC:
                                case LT:
                                case IS:
                                case AS:
                                case PLUS:
                                case MINUS:
                                case DIV:
                                case INC:
                                case DEC:
                                case DELETE:
                                case TYPEOF:
                                case LNOT:
                                case BNOT:
                                case E4X_ATTRI:
                                case UNDEFINED:
                                case TRUE:
                                case FALSE:
                                case NULL:
                                case HEX_LITERAL:
                                case DECIMAL_LITERAL:
                                case OCTAL_LITERAL:
                                case FLOAT_LITERAL:
                                case NEW:
                                case 176:
                                case 177:
                                case 180:
                                    {
                                        alt57 = 1;
                                    }
                                    break;
                                case WHILE:
                                    {
                                        int LA57_137 = input.LA(3);

                                        if ((synpred85()))
                                        {
                                            alt57 = 1;
                                        }


                                    }
                                    break;

                            }

                        }


                        switch (alt57)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: commentExpression
                                {
                                    PushFollow(FOLLOW_commentExpression_in_doWhileStatement2438);
                                    commentExpression224 = commentExpression();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) adaptor.AddChild(root_0, commentExpression224.Tree);

                                }
                                break;

                            default:
                                goto loop57;
                        }
                    } while (true);

                loop57:
                    ;	// Stops C# compiler whinging that label 'loop57' has no statements

                    PushFollow(FOLLOW_statement_in_doWhileStatement2441);
                    statement225 = statement();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, statement225.Tree);
                    WHILE226 = (IToken)input.LT(1);
                    Match(input, WHILE, FOLLOW_WHILE_in_doWhileStatement2443); if (failed) return retval;
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:566:44: ( condition ( commentExpression )* )
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:566:45: condition ( commentExpression )*
                    {
                        PushFollow(FOLLOW_condition_in_doWhileStatement2447);
                        condition227 = condition();
                        followingStackPointer_--;
                        if (failed) return retval;
                        if (backtracking == 0) adaptor.AddChild(root_0, condition227.Tree);
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:566:55: ( commentExpression )*
                        do
                        {
                            int alt58 = 2;
                            int LA58_0 = input.LA(1);

                            if ((LA58_0 == SL_COMMENT))
                            {
                                int LA58_49 = input.LA(2);

                                if ((synpred86()))
                                {
                                    alt58 = 1;
                                }


                            }
                            else if ((LA58_0 == ML_COMMENT))
                            {
                                int LA58_50 = input.LA(2);

                                if ((synpred86()))
                                {
                                    alt58 = 1;
                                }


                            }


                            switch (alt58)
                            {
                                case 1:
                                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: commentExpression
                                    {
                                        PushFollow(FOLLOW_commentExpression_in_doWhileStatement2449);
                                        commentExpression228 = commentExpression();
                                        followingStackPointer_--;
                                        if (failed) return retval;
                                        if (backtracking == 0) adaptor.AddChild(root_0, commentExpression228.Tree);

                                    }
                                    break;

                                default:
                                    goto loop58;
                            }
                        } while (true);

                    loop58:
                        ;	// Stops C# compiler whinging that label 'loop58' has no statements


                    }

                    PushFollow(FOLLOW_semi_in_doWhileStatement2453);
                    semi229 = semi();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, semi229.Tree);

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 68, doWhileStatement_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end doWhileStatement

        public class withStatement_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start withStatement
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:569:1: withStatement : WITH condition ( ( commentExpression )* statement ) ;
        public withStatement_return withStatement() // throws RecognitionException [1]
        {
            withStatement_return retval = new withStatement_return();
            retval.start = input.LT(1);
            int withStatement_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken WITH230 = null;
            condition_return condition231 = null;

            commentExpression_return commentExpression232 = null;

            statement_return statement233 = null;


            CommonTree WITH230_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 69))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:570:4: ( WITH condition ( ( commentExpression )* statement ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:570:4: WITH condition ( ( commentExpression )* statement )
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    WITH230 = (IToken)input.LT(1);
                    Match(input, WITH, FOLLOW_WITH_in_withStatement2464); if (failed) return retval;
                    if (backtracking == 0)
                    {
                        WITH230_tree = (CommonTree)adaptor.Create(WITH230);
                        root_0 = (CommonTree)adaptor.BecomeRoot(WITH230_tree, root_0);
                    }
                    PushFollow(FOLLOW_condition_in_withStatement2467);
                    condition231 = condition();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, condition231.Tree);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:570:20: ( ( commentExpression )* statement )
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:570:21: ( commentExpression )* statement
                    {
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:570:21: ( commentExpression )*
                        do
                        {
                            int alt59 = 2;
                            int LA59_0 = input.LA(1);

                            if ((LA59_0 == SL_COMMENT))
                            {
                                switch (input.LA(2))
                                {
                                    case SL_COMMENT:
                                        {
                                            int LA59_50 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case ML_COMMENT:
                                        {
                                            int LA59_51 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case LCURLY:
                                        {
                                            int LA59_52 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case VAR:
                                    case CONST:
                                        {
                                            int LA59_53 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case INC:
                                        {
                                            int LA59_54 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case DEC:
                                        {
                                            int LA59_55 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case MINUS:
                                        {
                                            int LA59_56 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case PLUS:
                                        {
                                            int LA59_57 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case DELETE:
                                        {
                                            int LA59_58 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case 180:
                                        {
                                            int LA59_59 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case TYPEOF:
                                        {
                                            int LA59_60 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case LNOT:
                                        {
                                            int LA59_61 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case BNOT:
                                        {
                                            int LA59_62 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case UNDEFINED:
                                        {
                                            int LA59_63 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case LT:
                                        {
                                            int LA59_64 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case DIV:
                                        {
                                            int LA59_65 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case HEX_LITERAL:
                                    case DECIMAL_LITERAL:
                                    case OCTAL_LITERAL:
                                    case FLOAT_LITERAL:
                                        {
                                            int LA59_66 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case STRING_LITERAL:
                                        {
                                            int LA59_67 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case TRUE:
                                        {
                                            int LA59_68 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case FALSE:
                                        {
                                            int LA59_69 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case NULL:
                                        {
                                            int LA59_70 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case LBRACK:
                                        {
                                            int LA59_71 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case FUNCTION:
                                        {
                                            int LA59_72 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case NEW:
                                        {
                                            int LA59_73 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case LPAREN:
                                        {
                                            int LA59_74 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case E4X_ATTRI:
                                        {
                                            int LA59_75 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case IDENT:
                                        {
                                            int LA59_76 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case PUBLIC:
                                    case PRIVATE:
                                    case PROTECTED:
                                    case INTERNAL:
                                        {
                                            int LA59_77 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case USE:
                                        {
                                            int LA59_78 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case XML:
                                        {
                                            int LA59_79 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case DYNAMIC:
                                        {
                                            int LA59_80 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case NAMESPACE:
                                        {
                                            int LA59_81 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case IS:
                                        {
                                            int LA59_82 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case AS:
                                        {
                                            int LA59_83 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case GET:
                                        {
                                            int LA59_84 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case SET:
                                        {
                                            int LA59_85 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case IF:
                                        {
                                            int LA59_86 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case FOR:
                                        {
                                            int LA59_87 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case WHILE:
                                        {
                                            int LA59_88 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case DO:
                                        {
                                            int LA59_89 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case WITH:
                                        {
                                            int LA59_90 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case SWITCH:
                                        {
                                            int LA59_91 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case BREAK:
                                        {
                                            int LA59_92 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case CONTINUE:
                                        {
                                            int LA59_93 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case RETURN:
                                        {
                                            int LA59_94 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case 176:
                                        {
                                            int LA59_95 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case 177:
                                        {
                                            int LA59_96 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case DEFAULT:
                                        {
                                            int LA59_97 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case SEMI:
                                        {
                                            int LA59_98 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;

                                }

                            }
                            else if ((LA59_0 == ML_COMMENT))
                            {
                                switch (input.LA(2))
                                {
                                    case SL_COMMENT:
                                        {
                                            int LA59_103 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case ML_COMMENT:
                                        {
                                            int LA59_104 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case LCURLY:
                                        {
                                            int LA59_105 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case VAR:
                                    case CONST:
                                        {
                                            int LA59_106 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case INC:
                                        {
                                            int LA59_107 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case DEC:
                                        {
                                            int LA59_108 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case MINUS:
                                        {
                                            int LA59_109 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case PLUS:
                                        {
                                            int LA59_110 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case DELETE:
                                        {
                                            int LA59_111 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case 180:
                                        {
                                            int LA59_112 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case TYPEOF:
                                        {
                                            int LA59_113 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case LNOT:
                                        {
                                            int LA59_114 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case BNOT:
                                        {
                                            int LA59_115 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case UNDEFINED:
                                        {
                                            int LA59_116 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case LT:
                                        {
                                            int LA59_117 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case DIV:
                                        {
                                            int LA59_118 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case HEX_LITERAL:
                                    case DECIMAL_LITERAL:
                                    case OCTAL_LITERAL:
                                    case FLOAT_LITERAL:
                                        {
                                            int LA59_119 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case STRING_LITERAL:
                                        {
                                            int LA59_120 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case TRUE:
                                        {
                                            int LA59_121 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case FALSE:
                                        {
                                            int LA59_122 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case NULL:
                                        {
                                            int LA59_123 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case LBRACK:
                                        {
                                            int LA59_124 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case FUNCTION:
                                        {
                                            int LA59_125 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case NEW:
                                        {
                                            int LA59_126 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case LPAREN:
                                        {
                                            int LA59_127 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case E4X_ATTRI:
                                        {
                                            int LA59_128 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case IDENT:
                                        {
                                            int LA59_129 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case PUBLIC:
                                    case PRIVATE:
                                    case PROTECTED:
                                    case INTERNAL:
                                        {
                                            int LA59_130 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case USE:
                                        {
                                            int LA59_131 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case XML:
                                        {
                                            int LA59_132 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case DYNAMIC:
                                        {
                                            int LA59_133 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case NAMESPACE:
                                        {
                                            int LA59_134 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case IS:
                                        {
                                            int LA59_135 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case AS:
                                        {
                                            int LA59_136 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case GET:
                                        {
                                            int LA59_137 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case SET:
                                        {
                                            int LA59_138 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case IF:
                                        {
                                            int LA59_139 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case FOR:
                                        {
                                            int LA59_140 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case WHILE:
                                        {
                                            int LA59_141 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case DO:
                                        {
                                            int LA59_142 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case WITH:
                                        {
                                            int LA59_143 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case SWITCH:
                                        {
                                            int LA59_144 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case BREAK:
                                        {
                                            int LA59_145 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case CONTINUE:
                                        {
                                            int LA59_146 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case RETURN:
                                        {
                                            int LA59_147 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case 176:
                                        {
                                            int LA59_148 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case 177:
                                        {
                                            int LA59_149 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case DEFAULT:
                                        {
                                            int LA59_150 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;
                                    case SEMI:
                                        {
                                            int LA59_151 = input.LA(3);

                                            if ((synpred87()))
                                            {
                                                alt59 = 1;
                                            }


                                        }
                                        break;

                                }

                            }


                            switch (alt59)
                            {
                                case 1:
                                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: commentExpression
                                    {
                                        PushFollow(FOLLOW_commentExpression_in_withStatement2470);
                                        commentExpression232 = commentExpression();
                                        followingStackPointer_--;
                                        if (failed) return retval;
                                        if (backtracking == 0) adaptor.AddChild(root_0, commentExpression232.Tree);

                                    }
                                    break;

                                default:
                                    goto loop59;
                            }
                        } while (true);

                    loop59:
                        ;	// Stops C# compiler whinging that label 'loop59' has no statements

                        PushFollow(FOLLOW_statement_in_withStatement2473);
                        statement233 = statement();
                        followingStackPointer_--;
                        if (failed) return retval;
                        if (backtracking == 0) adaptor.AddChild(root_0, statement233.Tree);

                    }


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 69, withStatement_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end withStatement

        public class defaultXMLNamespaceStatement_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start defaultXMLNamespaceStatement
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:573:1: defaultXMLNamespaceStatement : DEFAULT XML NAMESPACE ASSIGN expression semi -> ^( DEFAULT_XML_NAMESPACE expression ) ;
        public defaultXMLNamespaceStatement_return defaultXMLNamespaceStatement() // throws RecognitionException [1]
        {
            defaultXMLNamespaceStatement_return retval = new defaultXMLNamespaceStatement_return();
            retval.start = input.LT(1);
            int defaultXMLNamespaceStatement_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken DEFAULT234 = null;
            IToken XML235 = null;
            IToken NAMESPACE236 = null;
            IToken ASSIGN237 = null;
            expression_return expression238 = null;

            semi_return semi239 = null;


            CommonTree DEFAULT234_tree = null;
            CommonTree XML235_tree = null;
            CommonTree NAMESPACE236_tree = null;
            CommonTree ASSIGN237_tree = null;
            RewriteRuleTokenStream stream_XML = new RewriteRuleTokenStream(adaptor, "token XML");
            RewriteRuleTokenStream stream_NAMESPACE = new RewriteRuleTokenStream(adaptor, "token NAMESPACE");
            RewriteRuleTokenStream stream_DEFAULT = new RewriteRuleTokenStream(adaptor, "token DEFAULT");
            RewriteRuleTokenStream stream_ASSIGN = new RewriteRuleTokenStream(adaptor, "token ASSIGN");
            RewriteRuleSubtreeStream stream_semi = new RewriteRuleSubtreeStream(adaptor, "rule semi");
            RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor, "rule expression");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 70))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:574:4: ( DEFAULT XML NAMESPACE ASSIGN expression semi -> ^( DEFAULT_XML_NAMESPACE expression ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:574:4: DEFAULT XML NAMESPACE ASSIGN expression semi
                {
                    DEFAULT234 = (IToken)input.LT(1);
                    Match(input, DEFAULT, FOLLOW_DEFAULT_in_defaultXMLNamespaceStatement2485); if (failed) return retval;
                    if (backtracking == 0) stream_DEFAULT.Add(DEFAULT234);

                    XML235 = (IToken)input.LT(1);
                    Match(input, XML, FOLLOW_XML_in_defaultXMLNamespaceStatement2487); if (failed) return retval;
                    if (backtracking == 0) stream_XML.Add(XML235);

                    NAMESPACE236 = (IToken)input.LT(1);
                    Match(input, NAMESPACE, FOLLOW_NAMESPACE_in_defaultXMLNamespaceStatement2489); if (failed) return retval;
                    if (backtracking == 0) stream_NAMESPACE.Add(NAMESPACE236);

                    ASSIGN237 = (IToken)input.LT(1);
                    Match(input, ASSIGN, FOLLOW_ASSIGN_in_defaultXMLNamespaceStatement2491); if (failed) return retval;
                    if (backtracking == 0) stream_ASSIGN.Add(ASSIGN237);

                    PushFollow(FOLLOW_expression_in_defaultXMLNamespaceStatement2493);
                    expression238 = expression();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_expression.Add(expression238.Tree);
                    PushFollow(FOLLOW_semi_in_defaultXMLNamespaceStatement2495);
                    semi239 = semi();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_semi.Add(semi239.Tree);

                    // AST REWRITE
                    // elements:          expression
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 575:3: -> ^( DEFAULT_XML_NAMESPACE expression )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:575:6: ^( DEFAULT_XML_NAMESPACE expression )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(DEFAULT_XML_NAMESPACE, "DEFAULT_XML_NAMESPACE"), root_1);

                                adaptor.AddChild(root_1, stream_expression.Next());

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 70, defaultXMLNamespaceStatement_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end defaultXMLNamespaceStatement

        public class typeExpression_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start typeExpression
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:578:1: typeExpression : c= COLON ( identifier | 'void' | STAR ) -> ^( TYPE_SPEC[$c] ( identifier )? ( 'void' )? ( STAR )? ) ;
        public typeExpression_return typeExpression() // throws RecognitionException [1]
        {
            typeExpression_return retval = new typeExpression_return();
            retval.start = input.LT(1);
            int typeExpression_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken c = null;
            IToken string_literal241 = null;
            IToken STAR242 = null;
            identifier_return identifier240 = null;


            CommonTree c_tree = null;
            CommonTree string_literal241_tree = null;
            CommonTree STAR242_tree = null;
            RewriteRuleTokenStream stream_STAR = new RewriteRuleTokenStream(adaptor, "token STAR");
            RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor, "token COLON");
            RewriteRuleTokenStream stream_180 = new RewriteRuleTokenStream(adaptor, "token 180");
            RewriteRuleSubtreeStream stream_identifier = new RewriteRuleSubtreeStream(adaptor, "rule identifier");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 71))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:579:4: (c= COLON ( identifier | 'void' | STAR ) -> ^( TYPE_SPEC[$c] ( identifier )? ( 'void' )? ( STAR )? ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:579:4: c= COLON ( identifier | 'void' | STAR )
                {
                    c = (IToken)input.LT(1);
                    Match(input, COLON, FOLLOW_COLON_in_typeExpression2518); if (failed) return retval;
                    if (backtracking == 0) stream_COLON.Add(c);

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:581:3: ( identifier | 'void' | STAR )
                    int alt60 = 3;
                    switch (input.LA(1))
                    {
                        case GET:
                        case SET:
                        case NAMESPACE:
                        case USE:
                        case XML:
                        case IDENT:
                        case PUBLIC:
                        case PRIVATE:
                        case PROTECTED:
                        case INTERNAL:
                        case DYNAMIC:
                        case IS:
                        case AS:
                            {
                                alt60 = 1;
                            }
                            break;
                        case 180:
                            {
                                alt60 = 2;
                            }
                            break;
                        case STAR:
                            {
                                alt60 = 3;
                            }
                            break;
                        default:
                            if (backtracking > 0) { failed = true; return retval; }
                            NoViableAltException nvae_d60s0 =
                                new NoViableAltException("581:3: ( identifier | 'void' | STAR )", 60, 0, input);

                            throw nvae_d60s0;
                    }

                    switch (alt60)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:581:4: identifier
                            {
                                PushFollow(FOLLOW_identifier_in_typeExpression2526);
                                identifier240 = identifier();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) stream_identifier.Add(identifier240.Tree);

                            }
                            break;
                        case 2:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:581:17: 'void'
                            {
                                string_literal241 = (IToken)input.LT(1);
                                Match(input, 180, FOLLOW_180_in_typeExpression2530); if (failed) return retval;
                                if (backtracking == 0) stream_180.Add(string_literal241);


                            }
                            break;
                        case 3:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:581:26: STAR
                            {
                                STAR242 = (IToken)input.LT(1);
                                Match(input, STAR, FOLLOW_STAR_in_typeExpression2534); if (failed) return retval;
                                if (backtracking == 0) stream_STAR.Add(STAR242);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements:          180, identifier, STAR
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 582:3: -> ^( TYPE_SPEC[$c] ( identifier )? ( 'void' )? ( STAR )? )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:582:6: ^( TYPE_SPEC[$c] ( identifier )? ( 'void' )? ( STAR )? )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(TYPE_SPEC, c), root_1);

                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:582:22: ( identifier )?
                                if (stream_identifier.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_identifier.Next());

                                }
                                stream_identifier.Reset();
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:582:34: ( 'void' )?
                                if (stream_180.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_180.Next());

                                }
                                stream_180.Reset();
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:582:42: ( STAR )?
                                if (stream_STAR.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_STAR.Next());

                                }
                                stream_STAR.Reset();

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 71, typeExpression_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end typeExpression

        public class identifier_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start identifier
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:585:1: identifier : qualifiedIdent ( options {greedy=true; } : DOT qualifiedIdent )* -> ^( IDENTIFIER ( qualifiedIdent )+ ) ;
        public identifier_return identifier() // throws RecognitionException [1]
        {
            identifier_return retval = new identifier_return();
            retval.start = input.LT(1);
            int identifier_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken DOT244 = null;
            qualifiedIdent_return qualifiedIdent243 = null;

            qualifiedIdent_return qualifiedIdent245 = null;


            CommonTree DOT244_tree = null;
            RewriteRuleTokenStream stream_DOT = new RewriteRuleTokenStream(adaptor, "token DOT");
            RewriteRuleSubtreeStream stream_qualifiedIdent = new RewriteRuleSubtreeStream(adaptor, "rule qualifiedIdent");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 72))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:586:4: ( qualifiedIdent ( options {greedy=true; } : DOT qualifiedIdent )* -> ^( IDENTIFIER ( qualifiedIdent )+ ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:586:4: qualifiedIdent ( options {greedy=true; } : DOT qualifiedIdent )*
                {
                    PushFollow(FOLLOW_qualifiedIdent_in_identifier2566);
                    qualifiedIdent243 = qualifiedIdent();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_qualifiedIdent.Add(qualifiedIdent243.Tree);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:587:3: ( options {greedy=true; } : DOT qualifiedIdent )*
                    do
                    {
                        int alt61 = 2;
                        int LA61_0 = input.LA(1);

                        if ((LA61_0 == DOT))
                        {
                            alt61 = 1;
                        }


                        switch (alt61)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:588:6: DOT qualifiedIdent
                                {
                                    DOT244 = (IToken)input.LT(1);
                                    Match(input, DOT, FOLLOW_DOT_in_identifier2584); if (failed) return retval;
                                    if (backtracking == 0) stream_DOT.Add(DOT244);

                                    PushFollow(FOLLOW_qualifiedIdent_in_identifier2586);
                                    qualifiedIdent245 = qualifiedIdent();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) stream_qualifiedIdent.Add(qualifiedIdent245.Tree);

                                }
                                break;

                            default:
                                goto loop61;
                        }
                    } while (true);

                loop61:
                    ;	// Stops C# compiler whinging that label 'loop61' has no statements


                    // AST REWRITE
                    // elements:          qualifiedIdent
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 590:3: -> ^( IDENTIFIER ( qualifiedIdent )+ )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:590:6: ^( IDENTIFIER ( qualifiedIdent )+ )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(IDENTIFIER, "IDENTIFIER"), root_1);

                                if (!(stream_qualifiedIdent.HasNext()))
                                {
                                    throw new RewriteEarlyExitException();
                                }
                                while (stream_qualifiedIdent.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_qualifiedIdent.Next());

                                }
                                stream_qualifiedIdent.Reset();

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 72, identifier_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end identifier

        public class qualifiedIdent_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start qualifiedIdent
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:593:1: qualifiedIdent : ( namespaceName DBL_COLON )? ident ;
        public qualifiedIdent_return qualifiedIdent() // throws RecognitionException [1]
        {
            qualifiedIdent_return retval = new qualifiedIdent_return();
            retval.start = input.LT(1);
            int qualifiedIdent_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken DBL_COLON247 = null;
            namespaceName_return namespaceName246 = null;

            ident_return ident248 = null;


            CommonTree DBL_COLON247_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 73))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:594:4: ( ( namespaceName DBL_COLON )? ident )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:594:4: ( namespaceName DBL_COLON )? ident
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:594:4: ( namespaceName DBL_COLON )?
                    int alt62 = 2;
                    int LA62_0 = input.LA(1);

                    if ((LA62_0 == IDENT))
                    {
                        int LA62_1 = input.LA(2);

                        if ((LA62_1 == DBL_COLON))
                        {
                            alt62 = 1;
                        }
                    }
                    else if (((LA62_0 >= PUBLIC && LA62_0 <= INTERNAL)))
                    {
                        alt62 = 1;
                    }
                    switch (alt62)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:594:5: namespaceName DBL_COLON
                            {
                                PushFollow(FOLLOW_namespaceName_in_qualifiedIdent2614);
                                namespaceName246 = namespaceName();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) adaptor.AddChild(root_0, namespaceName246.Tree);
                                DBL_COLON247 = (IToken)input.LT(1);
                                Match(input, DBL_COLON, FOLLOW_DBL_COLON_in_qualifiedIdent2616); if (failed) return retval;
                                if (backtracking == 0)
                                {
                                    DBL_COLON247_tree = (CommonTree)adaptor.Create(DBL_COLON247);
                                    adaptor.AddChild(root_0, DBL_COLON247_tree);
                                }

                            }
                            break;

                    }

                    PushFollow(FOLLOW_ident_in_qualifiedIdent2620);
                    ident248 = ident();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, ident248.Tree);

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 73, qualifiedIdent_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end qualifiedIdent

        public class namespaceName_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start namespaceName
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:597:1: namespaceName : ( IDENT | reservedNamespace );
        public namespaceName_return namespaceName() // throws RecognitionException [1]
        {
            namespaceName_return retval = new namespaceName_return();
            retval.start = input.LT(1);
            int namespaceName_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken IDENT249 = null;
            reservedNamespace_return reservedNamespace250 = null;


            CommonTree IDENT249_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 74))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:598:4: ( IDENT | reservedNamespace )
                int alt63 = 2;
                int LA63_0 = input.LA(1);

                if ((LA63_0 == IDENT))
                {
                    alt63 = 1;
                }
                else if (((LA63_0 >= PUBLIC && LA63_0 <= INTERNAL)))
                {
                    alt63 = 2;
                }
                else
                {
                    if (backtracking > 0) { failed = true; return retval; }
                    NoViableAltException nvae_d63s0 =
                        new NoViableAltException("597:1: namespaceName : ( IDENT | reservedNamespace );", 63, 0, input);

                    throw nvae_d63s0;
                }
                switch (alt63)
                {
                    case 1:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:598:4: IDENT
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            IDENT249 = (IToken)input.LT(1);
                            Match(input, IDENT, FOLLOW_IDENT_in_namespaceName2632); if (failed) return retval;
                            if (backtracking == 0)
                            {
                                IDENT249_tree = (CommonTree)adaptor.Create(IDENT249);
                                adaptor.AddChild(root_0, IDENT249_tree);
                            }

                        }
                        break;
                    case 2:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:598:12: reservedNamespace
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_reservedNamespace_in_namespaceName2636);
                            reservedNamespace250 = reservedNamespace();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, reservedNamespace250.Tree);

                        }
                        break;

                }
                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 74, namespaceName_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end namespaceName

        public class reservedNamespace_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start reservedNamespace
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:601:1: reservedNamespace : ( PUBLIC | PRIVATE | PROTECTED | INTERNAL );
        public reservedNamespace_return reservedNamespace() // throws RecognitionException [1]
        {
            reservedNamespace_return retval = new reservedNamespace_return();
            retval.start = input.LT(1);
            int reservedNamespace_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken set251 = null;

            CommonTree set251_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 75))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:602:4: ( PUBLIC | PRIVATE | PROTECTED | INTERNAL )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    set251 = (IToken)input.LT(1);
                    if ((input.LA(1) >= PUBLIC && input.LA(1) <= INTERNAL))
                    {
                        input.Consume();
                        if (backtracking == 0) adaptor.AddChild(root_0, adaptor.Create(set251));
                        errorRecovery = false; failed = false;
                    }
                    else
                    {
                        if (backtracking > 0) { failed = true; return retval; }
                        MismatchedSetException mse =
                            new MismatchedSetException(null, input);
                        RecoverFromMismatchedSet(input, mse, FOLLOW_set_in_reservedNamespace0); throw mse;
                    }


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 75, reservedNamespace_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end reservedNamespace

        public class identifierStar_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start identifierStar
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:608:1: identifierStar : ident ( options {greedy=true; } : DOT ident )* ( DOT STAR )? -> ^( IDENTIFIER ( ident )+ ( STAR )? ) ;
        public identifierStar_return identifierStar() // throws RecognitionException [1]
        {
            identifierStar_return retval = new identifierStar_return();
            retval.start = input.LT(1);
            int identifierStar_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken DOT253 = null;
            IToken DOT255 = null;
            IToken STAR256 = null;
            ident_return ident252 = null;

            ident_return ident254 = null;


            CommonTree DOT253_tree = null;
            CommonTree DOT255_tree = null;
            CommonTree STAR256_tree = null;
            RewriteRuleTokenStream stream_STAR = new RewriteRuleTokenStream(adaptor, "token STAR");
            RewriteRuleTokenStream stream_DOT = new RewriteRuleTokenStream(adaptor, "token DOT");
            RewriteRuleSubtreeStream stream_ident = new RewriteRuleSubtreeStream(adaptor, "rule ident");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 76))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:609:4: ( ident ( options {greedy=true; } : DOT ident )* ( DOT STAR )? -> ^( IDENTIFIER ( ident )+ ( STAR )? ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:609:4: ident ( options {greedy=true; } : DOT ident )* ( DOT STAR )?
                {
                    PushFollow(FOLLOW_ident_in_identifierStar2673);
                    ident252 = ident();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_ident.Add(ident252.Tree);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:610:3: ( options {greedy=true; } : DOT ident )*
                    do
                    {
                        int alt64 = 2;
                        int LA64_0 = input.LA(1);

                        if ((LA64_0 == DOT))
                        {
                            int LA64_1 = input.LA(2);

                            if (((LA64_1 >= GET && LA64_1 <= USE) || LA64_1 == XML || LA64_1 == IDENT || LA64_1 == DYNAMIC || (LA64_1 >= IS && LA64_1 <= AS)))
                            {
                                alt64 = 1;
                            }


                        }


                        switch (alt64)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:611:5: DOT ident
                                {
                                    DOT253 = (IToken)input.LT(1);
                                    Match(input, DOT, FOLLOW_DOT_in_identifierStar2690); if (failed) return retval;
                                    if (backtracking == 0) stream_DOT.Add(DOT253);

                                    PushFollow(FOLLOW_ident_in_identifierStar2692);
                                    ident254 = ident();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) stream_ident.Add(ident254.Tree);

                                }
                                break;

                            default:
                                goto loop64;
                        }
                    } while (true);

                loop64:
                    ;	// Stops C# compiler whinging that label 'loop64' has no statements

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:613:3: ( DOT STAR )?
                    int alt65 = 2;
                    int LA65_0 = input.LA(1);

                    if ((LA65_0 == DOT))
                    {
                        alt65 = 1;
                    }
                    switch (alt65)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:613:5: DOT STAR
                            {
                                DOT255 = (IToken)input.LT(1);
                                Match(input, DOT, FOLLOW_DOT_in_identifierStar2704); if (failed) return retval;
                                if (backtracking == 0) stream_DOT.Add(DOT255);

                                STAR256 = (IToken)input.LT(1);
                                Match(input, STAR, FOLLOW_STAR_in_identifierStar2706); if (failed) return retval;
                                if (backtracking == 0) stream_STAR.Add(STAR256);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements:          STAR, ident
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 615:3: -> ^( IDENTIFIER ( ident )+ ( STAR )? )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:615:6: ^( IDENTIFIER ( ident )+ ( STAR )? )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(IDENTIFIER, "IDENTIFIER"), root_1);

                                if (!(stream_ident.HasNext()))
                                {
                                    throw new RewriteEarlyExitException();
                                }
                                while (stream_ident.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_ident.Next());

                                }
                                stream_ident.Reset();
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:615:26: ( STAR )?
                                if (stream_STAR.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_STAR.Next());

                                }
                                stream_STAR.Reset();

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 76, identifierStar_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end identifierStar

        public class annotations_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start annotations
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:618:1: annotations : ( annotation | includeDirective )+ -> ^( ANNOTATIONS ( annotation )+ ) ;
        public annotations_return annotations() // throws RecognitionException [1]
        {
            annotations_return retval = new annotations_return();
            retval.start = input.LT(1);
            int annotations_StartIndex = input.Index();
            CommonTree root_0 = null;

            annotation_return annotation257 = null;

            includeDirective_return includeDirective258 = null;


            RewriteRuleSubtreeStream stream_includeDirective = new RewriteRuleSubtreeStream(adaptor, "rule includeDirective");
            RewriteRuleSubtreeStream stream_annotation = new RewriteRuleSubtreeStream(adaptor, "rule annotation");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 77))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:619:4: ( ( annotation | includeDirective )+ -> ^( ANNOTATIONS ( annotation )+ ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:619:4: ( annotation | includeDirective )+
                {
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:619:4: ( annotation | includeDirective )+
                    int cnt66 = 0;
                    do
                    {
                        int alt66 = 3;
                        int LA66_0 = input.LA(1);

                        if ((LA66_0 == LBRACK))
                        {
                            int LA66_12 = input.LA(2);

                            if ((synpred98()))
                            {
                                alt66 = 1;
                            }


                        }
                        else if ((LA66_0 == 175))
                        {
                            int LA66_13 = input.LA(2);

                            if ((synpred99()))
                            {
                                alt66 = 2;
                            }


                        }


                        switch (alt66)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:619:6: annotation
                                {
                                    PushFollow(FOLLOW_annotation_in_annotations2739);
                                    annotation257 = annotation();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) stream_annotation.Add(annotation257.Tree);

                                }
                                break;
                            case 2:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:620:5: includeDirective
                                {
                                    PushFollow(FOLLOW_includeDirective_in_annotations2745);
                                    includeDirective258 = includeDirective();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) stream_includeDirective.Add(includeDirective258.Tree);

                                }
                                break;

                            default:
                                if (cnt66 >= 1) goto loop66;
                                if (backtracking > 0) { failed = true; return retval; }
                                EarlyExitException eee =
                                    new EarlyExitException(66, input);
                                throw eee;
                        }
                        cnt66++;
                    } while (true);

                loop66:
                    ;	// Stops C# compiler whinging that label 'loop66' has no statements


                    // AST REWRITE
                    // elements:          annotation
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 622:3: -> ^( ANNOTATIONS ( annotation )+ )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:622:6: ^( ANNOTATIONS ( annotation )+ )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(ANNOTATIONS, "ANNOTATIONS"), root_1);

                                if (!(stream_annotation.HasNext()))
                                {
                                    throw new RewriteEarlyExitException();
                                }
                                while (stream_annotation.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_annotation.Next());

                                }
                                stream_annotation.Reset();

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 77, annotations_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end annotations

        public class annotation_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start annotation
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:625:1: annotation : LBRACK ident ( annotationParamList )? RBRACK -> ^( ANNOTATION ident ( annotationParamList )? ) ;
        public annotation_return annotation() // throws RecognitionException [1]
        {
            annotation_return retval = new annotation_return();
            retval.start = input.LT(1);
            int annotation_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken LBRACK259 = null;
            IToken RBRACK262 = null;
            ident_return ident260 = null;

            annotationParamList_return annotationParamList261 = null;


            CommonTree LBRACK259_tree = null;
            CommonTree RBRACK262_tree = null;
            RewriteRuleTokenStream stream_LBRACK = new RewriteRuleTokenStream(adaptor, "token LBRACK");
            RewriteRuleTokenStream stream_RBRACK = new RewriteRuleTokenStream(adaptor, "token RBRACK");
            RewriteRuleSubtreeStream stream_annotationParamList = new RewriteRuleSubtreeStream(adaptor, "rule annotationParamList");
            RewriteRuleSubtreeStream stream_ident = new RewriteRuleSubtreeStream(adaptor, "rule ident");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 78))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:626:4: ( LBRACK ident ( annotationParamList )? RBRACK -> ^( ANNOTATION ident ( annotationParamList )? ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:626:4: LBRACK ident ( annotationParamList )? RBRACK
                {
                    LBRACK259 = (IToken)input.LT(1);
                    Match(input, LBRACK, FOLLOW_LBRACK_in_annotation2772); if (failed) return retval;
                    if (backtracking == 0) stream_LBRACK.Add(LBRACK259);

                    PushFollow(FOLLOW_ident_in_annotation2776);
                    ident260 = ident();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_ident.Add(ident260.Tree);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:628:3: ( annotationParamList )?
                    int alt67 = 2;
                    int LA67_0 = input.LA(1);

                    if ((LA67_0 == LPAREN))
                    {
                        alt67 = 1;
                    }
                    switch (alt67)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: annotationParamList
                            {
                                PushFollow(FOLLOW_annotationParamList_in_annotation2780);
                                annotationParamList261 = annotationParamList();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) stream_annotationParamList.Add(annotationParamList261.Tree);

                            }
                            break;

                    }

                    RBRACK262 = (IToken)input.LT(1);
                    Match(input, RBRACK, FOLLOW_RBRACK_in_annotation2785); if (failed) return retval;
                    if (backtracking == 0) stream_RBRACK.Add(RBRACK262);


                    // AST REWRITE
                    // elements:          annotationParamList, ident
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 630:3: -> ^( ANNOTATION ident ( annotationParamList )? )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:630:6: ^( ANNOTATION ident ( annotationParamList )? )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(ANNOTATION, "ANNOTATION"), root_1);

                                adaptor.AddChild(root_1, stream_ident.Next());
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:630:25: ( annotationParamList )?
                                if (stream_annotationParamList.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_annotationParamList.Next());

                                }
                                stream_annotationParamList.Reset();

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 78, annotation_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end annotation

        public class annotationParamList_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start annotationParamList
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:633:1: annotationParamList : LPAREN ( annotationParam ( COMMA annotationParam )* )? RPAREN -> ^( ANNOTATION_PARAMS ( annotationParam )* ) ;
        public annotationParamList_return annotationParamList() // throws RecognitionException [1]
        {
            annotationParamList_return retval = new annotationParamList_return();
            retval.start = input.LT(1);
            int annotationParamList_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken LPAREN263 = null;
            IToken COMMA265 = null;
            IToken RPAREN267 = null;
            annotationParam_return annotationParam264 = null;

            annotationParam_return annotationParam266 = null;


            CommonTree LPAREN263_tree = null;
            CommonTree COMMA265_tree = null;
            CommonTree RPAREN267_tree = null;
            RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
            RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor, "token RPAREN");
            RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor, "token LPAREN");
            RewriteRuleSubtreeStream stream_annotationParam = new RewriteRuleSubtreeStream(adaptor, "rule annotationParam");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 79))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:635:3: ( LPAREN ( annotationParam ( COMMA annotationParam )* )? RPAREN -> ^( ANNOTATION_PARAMS ( annotationParam )* ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:635:3: LPAREN ( annotationParam ( COMMA annotationParam )* )? RPAREN
                {
                    LPAREN263 = (IToken)input.LT(1);
                    Match(input, LPAREN, FOLLOW_LPAREN_in_annotationParamList2811); if (failed) return retval;
                    if (backtracking == 0) stream_LPAREN.Add(LPAREN263);

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:636:3: ( annotationParam ( COMMA annotationParam )* )?
                    int alt69 = 2;
                    int LA69_0 = input.LA(1);

                    if ((LA69_0 == STRING_LITERAL || (LA69_0 >= GET && LA69_0 <= USE) || LA69_0 == XML || LA69_0 == IDENT || LA69_0 == DYNAMIC || LA69_0 == LT || (LA69_0 >= IS && LA69_0 <= AS) || LA69_0 == DIV || (LA69_0 >= TRUE && LA69_0 <= FLOAT_LITERAL)))
                    {
                        alt69 = 1;
                    }
                    switch (alt69)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:636:5: annotationParam ( COMMA annotationParam )*
                            {
                                PushFollow(FOLLOW_annotationParam_in_annotationParamList2817);
                                annotationParam264 = annotationParam();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) stream_annotationParam.Add(annotationParam264.Tree);
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:637:4: ( COMMA annotationParam )*
                                do
                                {
                                    int alt68 = 2;
                                    int LA68_0 = input.LA(1);

                                    if ((LA68_0 == COMMA))
                                    {
                                        alt68 = 1;
                                    }


                                    switch (alt68)
                                    {
                                        case 1:
                                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:637:5: COMMA annotationParam
                                            {
                                                COMMA265 = (IToken)input.LT(1);
                                                Match(input, COMMA, FOLLOW_COMMA_in_annotationParamList2823); if (failed) return retval;
                                                if (backtracking == 0) stream_COMMA.Add(COMMA265);

                                                PushFollow(FOLLOW_annotationParam_in_annotationParamList2825);
                                                annotationParam266 = annotationParam();
                                                followingStackPointer_--;
                                                if (failed) return retval;
                                                if (backtracking == 0) stream_annotationParam.Add(annotationParam266.Tree);

                                            }
                                            break;

                                        default:
                                            goto loop68;
                                    }
                                } while (true);

                            loop68:
                                ;	// Stops C# compiler whinging that label 'loop68' has no statements


                            }
                            break;

                    }

                    RPAREN267 = (IToken)input.LT(1);
                    Match(input, RPAREN, FOLLOW_RPAREN_in_annotationParamList2836); if (failed) return retval;
                    if (backtracking == 0) stream_RPAREN.Add(RPAREN267);


                    // AST REWRITE
                    // elements:          annotationParam
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 640:3: -> ^( ANNOTATION_PARAMS ( annotationParam )* )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:640:6: ^( ANNOTATION_PARAMS ( annotationParam )* )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(ANNOTATION_PARAMS, "ANNOTATION_PARAMS"), root_1);

                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:640:26: ( annotationParam )*
                                while (stream_annotationParam.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_annotationParam.Next());

                                }
                                stream_annotationParam.Reset();

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 79, annotationParamList_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end annotationParamList

        public class annotationParam_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start annotationParam
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:654:1: annotationParam : ( ident ASSIGN constant -> ^( ANNOTATION_ASSIGN ident constant ) | constant -> constant | ident -> ident );
        public annotationParam_return annotationParam() // throws RecognitionException [1]
        {
            annotationParam_return retval = new annotationParam_return();
            retval.start = input.LT(1);
            int annotationParam_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken ASSIGN269 = null;
            ident_return ident268 = null;

            constant_return constant270 = null;

            constant_return constant271 = null;

            ident_return ident272 = null;


            CommonTree ASSIGN269_tree = null;
            RewriteRuleTokenStream stream_ASSIGN = new RewriteRuleTokenStream(adaptor, "token ASSIGN");
            RewriteRuleSubtreeStream stream_constant = new RewriteRuleSubtreeStream(adaptor, "rule constant");
            RewriteRuleSubtreeStream stream_ident = new RewriteRuleSubtreeStream(adaptor, "rule ident");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 80))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:656:3: ( ident ASSIGN constant -> ^( ANNOTATION_ASSIGN ident constant ) | constant -> constant | ident -> ident )
                int alt70 = 3;
                switch (input.LA(1))
                {
                    case IDENT:
                        {
                            int LA70_1 = input.LA(2);

                            if ((LA70_1 == EOF || LA70_1 == COMMA || LA70_1 == RPAREN))
                            {
                                alt70 = 3;
                            }
                            else if ((LA70_1 == ASSIGN))
                            {
                                alt70 = 1;
                            }
                            else
                            {
                                if (backtracking > 0) { failed = true; return retval; }
                                NoViableAltException nvae_d70s1 =
                                    new NoViableAltException("654:1: annotationParam : ( ident ASSIGN constant -> ^( ANNOTATION_ASSIGN ident constant ) | constant -> constant | ident -> ident );", 70, 1, input);

                                throw nvae_d70s1;
                            }
                        }
                        break;
                    case USE:
                        {
                            int LA70_2 = input.LA(2);

                            if ((LA70_2 == ASSIGN))
                            {
                                alt70 = 1;
                            }
                            else if ((LA70_2 == EOF || LA70_2 == COMMA || LA70_2 == RPAREN))
                            {
                                alt70 = 3;
                            }
                            else
                            {
                                if (backtracking > 0) { failed = true; return retval; }
                                NoViableAltException nvae_d70s2 =
                                    new NoViableAltException("654:1: annotationParam : ( ident ASSIGN constant -> ^( ANNOTATION_ASSIGN ident constant ) | constant -> constant | ident -> ident );", 70, 2, input);

                                throw nvae_d70s2;
                            }
                        }
                        break;
                    case XML:
                        {
                            int LA70_3 = input.LA(2);

                            if ((LA70_3 == EOF || LA70_3 == COMMA || LA70_3 == RPAREN))
                            {
                                alt70 = 3;
                            }
                            else if ((LA70_3 == ASSIGN))
                            {
                                alt70 = 1;
                            }
                            else
                            {
                                if (backtracking > 0) { failed = true; return retval; }
                                NoViableAltException nvae_d70s3 =
                                    new NoViableAltException("654:1: annotationParam : ( ident ASSIGN constant -> ^( ANNOTATION_ASSIGN ident constant ) | constant -> constant | ident -> ident );", 70, 3, input);

                                throw nvae_d70s3;
                            }
                        }
                        break;
                    case DYNAMIC:
                        {
                            int LA70_4 = input.LA(2);

                            if ((LA70_4 == ASSIGN))
                            {
                                alt70 = 1;
                            }
                            else if ((LA70_4 == EOF || LA70_4 == COMMA || LA70_4 == RPAREN))
                            {
                                alt70 = 3;
                            }
                            else
                            {
                                if (backtracking > 0) { failed = true; return retval; }
                                NoViableAltException nvae_d70s4 =
                                    new NoViableAltException("654:1: annotationParam : ( ident ASSIGN constant -> ^( ANNOTATION_ASSIGN ident constant ) | constant -> constant | ident -> ident );", 70, 4, input);

                                throw nvae_d70s4;
                            }
                        }
                        break;
                    case NAMESPACE:
                        {
                            int LA70_5 = input.LA(2);

                            if ((LA70_5 == EOF || LA70_5 == COMMA || LA70_5 == RPAREN))
                            {
                                alt70 = 3;
                            }
                            else if ((LA70_5 == ASSIGN))
                            {
                                alt70 = 1;
                            }
                            else
                            {
                                if (backtracking > 0) { failed = true; return retval; }
                                NoViableAltException nvae_d70s5 =
                                    new NoViableAltException("654:1: annotationParam : ( ident ASSIGN constant -> ^( ANNOTATION_ASSIGN ident constant ) | constant -> constant | ident -> ident );", 70, 5, input);

                                throw nvae_d70s5;
                            }
                        }
                        break;
                    case IS:
                        {
                            int LA70_6 = input.LA(2);

                            if ((LA70_6 == EOF || LA70_6 == COMMA || LA70_6 == RPAREN))
                            {
                                alt70 = 3;
                            }
                            else if ((LA70_6 == ASSIGN))
                            {
                                alt70 = 1;
                            }
                            else
                            {
                                if (backtracking > 0) { failed = true; return retval; }
                                NoViableAltException nvae_d70s6 =
                                    new NoViableAltException("654:1: annotationParam : ( ident ASSIGN constant -> ^( ANNOTATION_ASSIGN ident constant ) | constant -> constant | ident -> ident );", 70, 6, input);

                                throw nvae_d70s6;
                            }
                        }
                        break;
                    case AS:
                        {
                            int LA70_7 = input.LA(2);

                            if ((LA70_7 == ASSIGN))
                            {
                                alt70 = 1;
                            }
                            else if ((LA70_7 == EOF || LA70_7 == COMMA || LA70_7 == RPAREN))
                            {
                                alt70 = 3;
                            }
                            else
                            {
                                if (backtracking > 0) { failed = true; return retval; }
                                NoViableAltException nvae_d70s7 =
                                    new NoViableAltException("654:1: annotationParam : ( ident ASSIGN constant -> ^( ANNOTATION_ASSIGN ident constant ) | constant -> constant | ident -> ident );", 70, 7, input);

                                throw nvae_d70s7;
                            }
                        }
                        break;
                    case GET:
                        {
                            int LA70_8 = input.LA(2);

                            if ((LA70_8 == EOF || LA70_8 == COMMA || LA70_8 == RPAREN))
                            {
                                alt70 = 3;
                            }
                            else if ((LA70_8 == ASSIGN))
                            {
                                alt70 = 1;
                            }
                            else
                            {
                                if (backtracking > 0) { failed = true; return retval; }
                                NoViableAltException nvae_d70s8 =
                                    new NoViableAltException("654:1: annotationParam : ( ident ASSIGN constant -> ^( ANNOTATION_ASSIGN ident constant ) | constant -> constant | ident -> ident );", 70, 8, input);

                                throw nvae_d70s8;
                            }
                        }
                        break;
                    case SET:
                        {
                            int LA70_9 = input.LA(2);

                            if ((LA70_9 == EOF || LA70_9 == COMMA || LA70_9 == RPAREN))
                            {
                                alt70 = 3;
                            }
                            else if ((LA70_9 == ASSIGN))
                            {
                                alt70 = 1;
                            }
                            else
                            {
                                if (backtracking > 0) { failed = true; return retval; }
                                NoViableAltException nvae_d70s9 =
                                    new NoViableAltException("654:1: annotationParam : ( ident ASSIGN constant -> ^( ANNOTATION_ASSIGN ident constant ) | constant -> constant | ident -> ident );", 70, 9, input);

                                throw nvae_d70s9;
                            }
                        }
                        break;
                    case STRING_LITERAL:
                    case LT:
                    case DIV:
                    case TRUE:
                    case FALSE:
                    case NULL:
                    case HEX_LITERAL:
                    case DECIMAL_LITERAL:
                    case OCTAL_LITERAL:
                    case FLOAT_LITERAL:
                        {
                            alt70 = 2;
                        }
                        break;
                    default:
                        if (backtracking > 0) { failed = true; return retval; }
                        NoViableAltException nvae_d70s0 =
                            new NoViableAltException("654:1: annotationParam : ( ident ASSIGN constant -> ^( ANNOTATION_ASSIGN ident constant ) | constant -> constant | ident -> ident );", 70, 0, input);

                        throw nvae_d70s0;
                }

                switch (alt70)
                {
                    case 1:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:656:3: ident ASSIGN constant
                        {
                            PushFollow(FOLLOW_ident_in_annotationParam2863);
                            ident268 = ident();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) stream_ident.Add(ident268.Tree);
                            ASSIGN269 = (IToken)input.LT(1);
                            Match(input, ASSIGN, FOLLOW_ASSIGN_in_annotationParam2865); if (failed) return retval;
                            if (backtracking == 0) stream_ASSIGN.Add(ASSIGN269);

                            PushFollow(FOLLOW_constant_in_annotationParam2867);
                            constant270 = constant();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) stream_constant.Add(constant270.Tree);

                            // AST REWRITE
                            // elements:          constant, ident
                            // token labels:      
                            // rule labels:       retval
                            // token list labels: 
                            // rule list labels:  
                            if (backtracking == 0)
                            {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                root_0 = (CommonTree)adaptor.GetNilNode();
                                // 656:25: -> ^( ANNOTATION_ASSIGN ident constant )
                                {
                                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:656:28: ^( ANNOTATION_ASSIGN ident constant )
                                    {
                                        CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                        root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(ANNOTATION_ASSIGN, "ANNOTATION_ASSIGN"), root_1);

                                        adaptor.AddChild(root_1, stream_ident.Next());
                                        adaptor.AddChild(root_1, stream_constant.Next());

                                        adaptor.AddChild(root_0, root_1);
                                    }

                                }

                            }

                        }
                        break;
                    case 2:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:657:4: constant
                        {
                            PushFollow(FOLLOW_constant_in_annotationParam2882);
                            constant271 = constant();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) stream_constant.Add(constant271.Tree);

                            // AST REWRITE
                            // elements:          constant
                            // token labels:      
                            // rule labels:       retval
                            // token list labels: 
                            // rule list labels:  
                            if (backtracking == 0)
                            {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                root_0 = (CommonTree)adaptor.GetNilNode();
                                // 657:13: -> constant
                                {
                                    adaptor.AddChild(root_0, stream_constant.Next());

                                }

                            }

                        }
                        break;
                    case 3:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:658:4: ident
                        {
                            PushFollow(FOLLOW_ident_in_annotationParam2891);
                            ident272 = ident();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) stream_ident.Add(ident272.Tree);

                            // AST REWRITE
                            // elements:          ident
                            // token labels:      
                            // rule labels:       retval
                            // token list labels: 
                            // rule list labels:  
                            if (backtracking == 0)
                            {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                root_0 = (CommonTree)adaptor.GetNilNode();
                                // 658:10: -> ident
                                {
                                    adaptor.AddChild(root_0, stream_ident.Next());

                                }

                            }

                        }
                        break;

                }
                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 80, annotationParam_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end annotationParam

        public class modifiers_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start modifiers
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:661:1: modifiers : ( modifier )* -> ^( MODIFIERS ( modifier )* ) ;
        public modifiers_return modifiers() // throws RecognitionException [1]
        {
            modifiers_return retval = new modifiers_return();
            retval.start = input.LT(1);
            int modifiers_StartIndex = input.Index();
            CommonTree root_0 = null;

            modifier_return modifier273 = null;


            RewriteRuleSubtreeStream stream_modifier = new RewriteRuleSubtreeStream(adaptor, "rule modifier");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 81))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:662:4: ( ( modifier )* -> ^( MODIFIERS ( modifier )* ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:662:4: ( modifier )*
                {
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:662:4: ( modifier )*
                    do
                    {
                        int alt71 = 2;
                        int LA71_0 = input.LA(1);

                        if (((LA71_0 >= IDENT && LA71_0 <= INTERNAL) || (LA71_0 >= STATIC && LA71_0 <= DYNAMIC) || (LA71_0 >= 181 && LA71_0 <= 185)))
                        {
                            alt71 = 1;
                        }


                        switch (alt71)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: modifier
                                {
                                    PushFollow(FOLLOW_modifier_in_modifiers2906);
                                    modifier273 = modifier();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) stream_modifier.Add(modifier273.Tree);

                                }
                                break;

                            default:
                                goto loop71;
                        }
                    } while (true);

                loop71:
                    ;	// Stops C# compiler whinging that label 'loop71' has no statements


                    // AST REWRITE
                    // elements:          modifier
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 663:3: -> ^( MODIFIERS ( modifier )* )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:663:6: ^( MODIFIERS ( modifier )* )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(MODIFIERS, "MODIFIERS"), root_1);

                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:663:18: ( modifier )*
                                while (stream_modifier.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_modifier.Next());

                                }
                                stream_modifier.Reset();

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 81, modifiers_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end modifiers

        public class modifier_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start modifier
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:666:1: modifier : ( namespaceName | STATIC | 'final' | 'enumerable' | 'explicit' | 'override' | DYNAMIC | 'intrinsic' );
        public modifier_return modifier() // throws RecognitionException [1]
        {
            modifier_return retval = new modifier_return();
            retval.start = input.LT(1);
            int modifier_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken STATIC275 = null;
            IToken string_literal276 = null;
            IToken string_literal277 = null;
            IToken string_literal278 = null;
            IToken string_literal279 = null;
            IToken DYNAMIC280 = null;
            IToken string_literal281 = null;
            namespaceName_return namespaceName274 = null;


            CommonTree STATIC275_tree = null;
            CommonTree string_literal276_tree = null;
            CommonTree string_literal277_tree = null;
            CommonTree string_literal278_tree = null;
            CommonTree string_literal279_tree = null;
            CommonTree DYNAMIC280_tree = null;
            CommonTree string_literal281_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 82))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:667:4: ( namespaceName | STATIC | 'final' | 'enumerable' | 'explicit' | 'override' | DYNAMIC | 'intrinsic' )
                int alt72 = 8;
                switch (input.LA(1))
                {
                    case IDENT:
                    case PUBLIC:
                    case PRIVATE:
                    case PROTECTED:
                    case INTERNAL:
                        {
                            alt72 = 1;
                        }
                        break;
                    case STATIC:
                        {
                            alt72 = 2;
                        }
                        break;
                    case 181:
                        {
                            alt72 = 3;
                        }
                        break;
                    case 182:
                        {
                            alt72 = 4;
                        }
                        break;
                    case 183:
                        {
                            alt72 = 5;
                        }
                        break;
                    case 184:
                        {
                            alt72 = 6;
                        }
                        break;
                    case DYNAMIC:
                        {
                            alt72 = 7;
                        }
                        break;
                    case 185:
                        {
                            alt72 = 8;
                        }
                        break;
                    default:
                        if (backtracking > 0) { failed = true; return retval; }
                        NoViableAltException nvae_d72s0 =
                            new NoViableAltException("666:1: modifier : ( namespaceName | STATIC | 'final' | 'enumerable' | 'explicit' | 'override' | DYNAMIC | 'intrinsic' );", 72, 0, input);

                        throw nvae_d72s0;
                }

                switch (alt72)
                {
                    case 1:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:667:4: namespaceName
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_namespaceName_in_modifier2929);
                            namespaceName274 = namespaceName();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, namespaceName274.Tree);

                        }
                        break;
                    case 2:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:668:4: STATIC
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            STATIC275 = (IToken)input.LT(1);
                            Match(input, STATIC, FOLLOW_STATIC_in_modifier2934); if (failed) return retval;
                            if (backtracking == 0)
                            {
                                STATIC275_tree = (CommonTree)adaptor.Create(STATIC275);
                                adaptor.AddChild(root_0, STATIC275_tree);
                            }

                        }
                        break;
                    case 3:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:669:4: 'final'
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            string_literal276 = (IToken)input.LT(1);
                            Match(input, 181, FOLLOW_181_in_modifier2939); if (failed) return retval;
                            if (backtracking == 0)
                            {
                                string_literal276_tree = (CommonTree)adaptor.Create(string_literal276);
                                adaptor.AddChild(root_0, string_literal276_tree);
                            }

                        }
                        break;
                    case 4:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:670:4: 'enumerable'
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            string_literal277 = (IToken)input.LT(1);
                            Match(input, 182, FOLLOW_182_in_modifier2944); if (failed) return retval;
                            if (backtracking == 0)
                            {
                                string_literal277_tree = (CommonTree)adaptor.Create(string_literal277);
                                adaptor.AddChild(root_0, string_literal277_tree);
                            }

                        }
                        break;
                    case 5:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:671:4: 'explicit'
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            string_literal278 = (IToken)input.LT(1);
                            Match(input, 183, FOLLOW_183_in_modifier2949); if (failed) return retval;
                            if (backtracking == 0)
                            {
                                string_literal278_tree = (CommonTree)adaptor.Create(string_literal278);
                                adaptor.AddChild(root_0, string_literal278_tree);
                            }

                        }
                        break;
                    case 6:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:672:4: 'override'
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            string_literal279 = (IToken)input.LT(1);
                            Match(input, 184, FOLLOW_184_in_modifier2954); if (failed) return retval;
                            if (backtracking == 0)
                            {
                                string_literal279_tree = (CommonTree)adaptor.Create(string_literal279);
                                adaptor.AddChild(root_0, string_literal279_tree);
                            }

                        }
                        break;
                    case 7:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:673:4: DYNAMIC
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            DYNAMIC280 = (IToken)input.LT(1);
                            Match(input, DYNAMIC, FOLLOW_DYNAMIC_in_modifier2959); if (failed) return retval;
                            if (backtracking == 0)
                            {
                                DYNAMIC280_tree = (CommonTree)adaptor.Create(DYNAMIC280);
                                adaptor.AddChild(root_0, DYNAMIC280_tree);
                            }

                        }
                        break;
                    case 8:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:674:4: 'intrinsic'
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            string_literal281 = (IToken)input.LT(1);
                            Match(input, 185, FOLLOW_185_in_modifier2964); if (failed) return retval;
                            if (backtracking == 0)
                            {
                                string_literal281_tree = (CommonTree)adaptor.Create(string_literal281);
                                adaptor.AddChild(root_0, string_literal281_tree);
                            }

                        }
                        break;

                }
                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 82, modifier_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end modifier

        public class arguments_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start arguments
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:677:1: arguments : ( LPAREN expressionList RPAREN -> ^( ARGUMENTS expressionList ) | LPAREN RPAREN -> ARGUMENTS );
        public arguments_return arguments() // throws RecognitionException [1]
        {
            InOperator_stack.Push(new InOperator_scope());

            arguments_return retval = new arguments_return();
            retval.start = input.LT(1);
            int arguments_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken LPAREN282 = null;
            IToken RPAREN284 = null;
            IToken LPAREN285 = null;
            IToken RPAREN286 = null;
            expressionList_return expressionList283 = null;


            CommonTree LPAREN282_tree = null;
            CommonTree RPAREN284_tree = null;
            CommonTree LPAREN285_tree = null;
            CommonTree RPAREN286_tree = null;
            RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor, "token RPAREN");
            RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor, "token LPAREN");
            RewriteRuleSubtreeStream stream_expressionList = new RewriteRuleSubtreeStream(adaptor, "rule expressionList");

            ((InOperator_scope)InOperator_stack.Peek()).allowed = true;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 83))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:682:4: ( LPAREN expressionList RPAREN -> ^( ARGUMENTS expressionList ) | LPAREN RPAREN -> ARGUMENTS )
                int alt73 = 2;
                int LA73_0 = input.LA(1);

                if ((LA73_0 == LPAREN))
                {
                    int LA73_1 = input.LA(2);

                    if ((LA73_1 == RPAREN))
                    {
                        alt73 = 2;
                    }
                    else if ((LA73_1 == LCURLY || (LA73_1 >= STRING_LITERAL && LA73_1 <= USE) || LA73_1 == LPAREN || LA73_1 == XML || (LA73_1 >= IDENT && LA73_1 <= LBRACK) || LA73_1 == DYNAMIC || LA73_1 == LT || (LA73_1 >= IS && LA73_1 <= AS) || (LA73_1 >= PLUS && LA73_1 <= DIV) || (LA73_1 >= INC && LA73_1 <= BNOT) || (LA73_1 >= E4X_ATTRI && LA73_1 <= NEW) || LA73_1 == 180))
                    {
                        alt73 = 1;
                    }
                    else
                    {
                        if (backtracking > 0) { failed = true; return retval; }
                        NoViableAltException nvae_d73s1 =
                            new NoViableAltException("677:1: arguments : ( LPAREN expressionList RPAREN -> ^( ARGUMENTS expressionList ) | LPAREN RPAREN -> ARGUMENTS );", 73, 1, input);

                        throw nvae_d73s1;
                    }
                }
                else
                {
                    if (backtracking > 0) { failed = true; return retval; }
                    NoViableAltException nvae_d73s0 =
                        new NoViableAltException("677:1: arguments : ( LPAREN expressionList RPAREN -> ^( ARGUMENTS expressionList ) | LPAREN RPAREN -> ARGUMENTS );", 73, 0, input);

                    throw nvae_d73s0;
                }
                switch (alt73)
                {
                    case 1:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:682:4: LPAREN expressionList RPAREN
                        {
                            LPAREN282 = (IToken)input.LT(1);
                            Match(input, LPAREN, FOLLOW_LPAREN_in_arguments2985); if (failed) return retval;
                            if (backtracking == 0) stream_LPAREN.Add(LPAREN282);

                            PushFollow(FOLLOW_expressionList_in_arguments2987);
                            expressionList283 = expressionList();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) stream_expressionList.Add(expressionList283.Tree);
                            RPAREN284 = (IToken)input.LT(1);
                            Match(input, RPAREN, FOLLOW_RPAREN_in_arguments2989); if (failed) return retval;
                            if (backtracking == 0) stream_RPAREN.Add(RPAREN284);


                            // AST REWRITE
                            // elements:          expressionList
                            // token labels:      
                            // rule labels:       retval
                            // token list labels: 
                            // rule list labels:  
                            if (backtracking == 0)
                            {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                root_0 = (CommonTree)adaptor.GetNilNode();
                                // 683:3: -> ^( ARGUMENTS expressionList )
                                {
                                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:683:6: ^( ARGUMENTS expressionList )
                                    {
                                        CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                        root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(ARGUMENTS, "ARGUMENTS"), root_1);

                                        adaptor.AddChild(root_1, stream_expressionList.Next());

                                        adaptor.AddChild(root_0, root_1);
                                    }

                                }

                            }

                        }
                        break;
                    case 2:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:684:4: LPAREN RPAREN
                        {
                            LPAREN285 = (IToken)input.LT(1);
                            Match(input, LPAREN, FOLLOW_LPAREN_in_arguments3004); if (failed) return retval;
                            if (backtracking == 0) stream_LPAREN.Add(LPAREN285);

                            RPAREN286 = (IToken)input.LT(1);
                            Match(input, RPAREN, FOLLOW_RPAREN_in_arguments3006); if (failed) return retval;
                            if (backtracking == 0) stream_RPAREN.Add(RPAREN286);


                            // AST REWRITE
                            // elements:          
                            // token labels:      
                            // rule labels:       retval
                            // token list labels: 
                            // rule list labels:  
                            if (backtracking == 0)
                            {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                root_0 = (CommonTree)adaptor.GetNilNode();
                                // 685:3: -> ARGUMENTS
                                {
                                    adaptor.AddChild(root_0, adaptor.Create(ARGUMENTS, "ARGUMENTS"));

                                }

                            }

                        }
                        break;

                }
                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 83, arguments_StartIndex);
                }
                InOperator_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end arguments

        public class element_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start element
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:689:1: element : assignmentExpression -> ^( ELEMENT assignmentExpression ) ;
        public element_return element() // throws RecognitionException [1]
        {
            InOperator_stack.Push(new InOperator_scope());

            element_return retval = new element_return();
            retval.start = input.LT(1);
            int element_StartIndex = input.Index();
            CommonTree root_0 = null;

            assignmentExpression_return assignmentExpression287 = null;


            RewriteRuleSubtreeStream stream_assignmentExpression = new RewriteRuleSubtreeStream(adaptor, "rule assignmentExpression");

            ((InOperator_scope)InOperator_stack.Peek()).allowed = true;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 84))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:694:4: ( assignmentExpression -> ^( ELEMENT assignmentExpression ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:694:4: assignmentExpression
                {
                    PushFollow(FOLLOW_assignmentExpression_in_element3036);
                    assignmentExpression287 = assignmentExpression();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_assignmentExpression.Add(assignmentExpression287.Tree);

                    // AST REWRITE
                    // elements:          assignmentExpression
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 695:3: -> ^( ELEMENT assignmentExpression )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:695:6: ^( ELEMENT assignmentExpression )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(ELEMENT, "ELEMENT"), root_1);

                                adaptor.AddChild(root_1, stream_assignmentExpression.Next());

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 84, element_StartIndex);
                }
                InOperator_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end element

        public class arrayLiteral_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start arrayLiteral
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:699:1: arrayLiteral : LBRACK ( elementList )? RBRACK -> ^( ARRAY_LITERAL ( elementList )? ) ;
        public arrayLiteral_return arrayLiteral() // throws RecognitionException [1]
        {
            arrayLiteral_return retval = new arrayLiteral_return();
            retval.start = input.LT(1);
            int arrayLiteral_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken LBRACK288 = null;
            IToken RBRACK290 = null;
            elementList_return elementList289 = null;


            CommonTree LBRACK288_tree = null;
            CommonTree RBRACK290_tree = null;
            RewriteRuleTokenStream stream_LBRACK = new RewriteRuleTokenStream(adaptor, "token LBRACK");
            RewriteRuleTokenStream stream_RBRACK = new RewriteRuleTokenStream(adaptor, "token RBRACK");
            RewriteRuleSubtreeStream stream_elementList = new RewriteRuleSubtreeStream(adaptor, "rule elementList");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 85))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:700:4: ( LBRACK ( elementList )? RBRACK -> ^( ARRAY_LITERAL ( elementList )? ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:700:4: LBRACK ( elementList )? RBRACK
                {
                    LBRACK288 = (IToken)input.LT(1);
                    Match(input, LBRACK, FOLLOW_LBRACK_in_arrayLiteral3058); if (failed) return retval;
                    if (backtracking == 0) stream_LBRACK.Add(LBRACK288);

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:700:11: ( elementList )?
                    int alt74 = 2;
                    int LA74_0 = input.LA(1);

                    if ((LA74_0 == LCURLY || (LA74_0 >= STRING_LITERAL && LA74_0 <= USE) || LA74_0 == LPAREN || LA74_0 == XML || (LA74_0 >= IDENT && LA74_0 <= LBRACK) || LA74_0 == DYNAMIC || LA74_0 == LT || (LA74_0 >= IS && LA74_0 <= AS) || (LA74_0 >= PLUS && LA74_0 <= DIV) || (LA74_0 >= INC && LA74_0 <= BNOT) || (LA74_0 >= E4X_ATTRI && LA74_0 <= NEW) || LA74_0 == 180))
                    {
                        alt74 = 1;
                    }
                    switch (alt74)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: elementList
                            {
                                PushFollow(FOLLOW_elementList_in_arrayLiteral3060);
                                elementList289 = elementList();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) stream_elementList.Add(elementList289.Tree);

                            }
                            break;

                    }

                    RBRACK290 = (IToken)input.LT(1);
                    Match(input, RBRACK, FOLLOW_RBRACK_in_arrayLiteral3063); if (failed) return retval;
                    if (backtracking == 0) stream_RBRACK.Add(RBRACK290);


                    // AST REWRITE
                    // elements:          elementList
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 701:3: -> ^( ARRAY_LITERAL ( elementList )? )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:701:6: ^( ARRAY_LITERAL ( elementList )? )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(ARRAY_LITERAL, "ARRAY_LITERAL"), root_1);

                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:701:22: ( elementList )?
                                if (stream_elementList.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_elementList.Next());

                                }
                                stream_elementList.Reset();

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 85, arrayLiteral_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end arrayLiteral

        public class elementList_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start elementList
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:704:1: elementList : nonemptyElementList ( COMMA ( nonemptyElementList )? )* ;
        public elementList_return elementList() // throws RecognitionException [1]
        {
            elementList_return retval = new elementList_return();
            retval.start = input.LT(1);
            int elementList_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken COMMA292 = null;
            nonemptyElementList_return nonemptyElementList291 = null;

            nonemptyElementList_return nonemptyElementList293 = null;


            CommonTree COMMA292_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 86))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:705:4: ( nonemptyElementList ( COMMA ( nonemptyElementList )? )* )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:705:4: nonemptyElementList ( COMMA ( nonemptyElementList )? )*
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    PushFollow(FOLLOW_nonemptyElementList_in_elementList3085);
                    nonemptyElementList291 = nonemptyElementList();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, nonemptyElementList291.Tree);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:705:24: ( COMMA ( nonemptyElementList )? )*
                    do
                    {
                        int alt76 = 2;
                        int LA76_0 = input.LA(1);

                        if ((LA76_0 == COMMA))
                        {
                            alt76 = 1;
                        }


                        switch (alt76)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:705:25: COMMA ( nonemptyElementList )?
                                {
                                    COMMA292 = (IToken)input.LT(1);
                                    Match(input, COMMA, FOLLOW_COMMA_in_elementList3088); if (failed) return retval;
                                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:705:32: ( nonemptyElementList )?
                                    int alt75 = 2;
                                    int LA75_0 = input.LA(1);

                                    if ((LA75_0 == LCURLY || (LA75_0 >= STRING_LITERAL && LA75_0 <= USE) || LA75_0 == LPAREN || LA75_0 == XML || (LA75_0 >= IDENT && LA75_0 <= LBRACK) || LA75_0 == DYNAMIC || LA75_0 == LT || (LA75_0 >= IS && LA75_0 <= AS) || (LA75_0 >= PLUS && LA75_0 <= DIV) || (LA75_0 >= INC && LA75_0 <= BNOT) || (LA75_0 >= E4X_ATTRI && LA75_0 <= NEW) || LA75_0 == 180))
                                    {
                                        alt75 = 1;
                                    }
                                    switch (alt75)
                                    {
                                        case 1:
                                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: nonemptyElementList
                                            {
                                                PushFollow(FOLLOW_nonemptyElementList_in_elementList3091);
                                                nonemptyElementList293 = nonemptyElementList();
                                                followingStackPointer_--;
                                                if (failed) return retval;
                                                if (backtracking == 0) adaptor.AddChild(root_0, nonemptyElementList293.Tree);

                                            }
                                            break;

                                    }


                                }
                                break;

                            default:
                                goto loop76;
                        }
                    } while (true);

                loop76:
                    ;	// Stops C# compiler whinging that label 'loop76' has no statements


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 86, elementList_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end elementList

        public class nonemptyElementList_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start nonemptyElementList
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:708:1: nonemptyElementList : assignmentExpression ( COMMA assignmentExpression )* ;
        public nonemptyElementList_return nonemptyElementList() // throws RecognitionException [1]
        {
            InOperator_stack.Push(new InOperator_scope());

            nonemptyElementList_return retval = new nonemptyElementList_return();
            retval.start = input.LT(1);
            int nonemptyElementList_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken COMMA295 = null;
            assignmentExpression_return assignmentExpression294 = null;

            assignmentExpression_return assignmentExpression296 = null;


            CommonTree COMMA295_tree = null;


            ((InOperator_scope)InOperator_stack.Peek()).allowed = true;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 87))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:713:4: ( assignmentExpression ( COMMA assignmentExpression )* )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:713:4: assignmentExpression ( COMMA assignmentExpression )*
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    PushFollow(FOLLOW_assignmentExpression_in_nonemptyElementList3116);
                    assignmentExpression294 = assignmentExpression();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, assignmentExpression294.Tree);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:713:25: ( COMMA assignmentExpression )*
                    do
                    {
                        int alt77 = 2;
                        int LA77_0 = input.LA(1);

                        if ((LA77_0 == COMMA))
                        {
                            switch (input.LA(2))
                            {
                                case INC:
                                    {
                                        int LA77_4 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case DEC:
                                    {
                                        int LA77_5 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case MINUS:
                                    {
                                        int LA77_6 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case PLUS:
                                    {
                                        int LA77_7 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case DELETE:
                                    {
                                        int LA77_8 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case 180:
                                    {
                                        int LA77_9 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case TYPEOF:
                                    {
                                        int LA77_10 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case LNOT:
                                    {
                                        int LA77_11 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case BNOT:
                                    {
                                        int LA77_12 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case UNDEFINED:
                                    {
                                        int LA77_13 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case LT:
                                    {
                                        int LA77_14 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case DIV:
                                    {
                                        int LA77_15 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case HEX_LITERAL:
                                case DECIMAL_LITERAL:
                                case OCTAL_LITERAL:
                                case FLOAT_LITERAL:
                                    {
                                        int LA77_16 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case STRING_LITERAL:
                                    {
                                        int LA77_17 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case TRUE:
                                    {
                                        int LA77_18 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case FALSE:
                                    {
                                        int LA77_19 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case NULL:
                                    {
                                        int LA77_20 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case LBRACK:
                                    {
                                        int LA77_21 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case LCURLY:
                                    {
                                        int LA77_22 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case FUNCTION:
                                    {
                                        int LA77_23 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case NEW:
                                    {
                                        int LA77_24 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case LPAREN:
                                    {
                                        int LA77_25 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case E4X_ATTRI:
                                    {
                                        int LA77_26 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case IDENT:
                                    {
                                        int LA77_27 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case PUBLIC:
                                case PRIVATE:
                                case PROTECTED:
                                case INTERNAL:
                                    {
                                        int LA77_28 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case USE:
                                    {
                                        int LA77_29 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case XML:
                                    {
                                        int LA77_30 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case DYNAMIC:
                                    {
                                        int LA77_31 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case NAMESPACE:
                                    {
                                        int LA77_32 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case IS:
                                    {
                                        int LA77_33 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case AS:
                                    {
                                        int LA77_34 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case GET:
                                    {
                                        int LA77_35 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;
                                case SET:
                                    {
                                        int LA77_36 = input.LA(3);

                                        if ((synpred117()))
                                        {
                                            alt77 = 1;
                                        }


                                    }
                                    break;

                            }

                        }


                        switch (alt77)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:713:26: COMMA assignmentExpression
                                {
                                    COMMA295 = (IToken)input.LT(1);
                                    Match(input, COMMA, FOLLOW_COMMA_in_nonemptyElementList3119); if (failed) return retval;
                                    if (backtracking == 0)
                                    {
                                        COMMA295_tree = (CommonTree)adaptor.Create(COMMA295);
                                        adaptor.AddChild(root_0, COMMA295_tree);
                                    }
                                    PushFollow(FOLLOW_assignmentExpression_in_nonemptyElementList3121);
                                    assignmentExpression296 = assignmentExpression();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) adaptor.AddChild(root_0, assignmentExpression296.Tree);

                                }
                                break;

                            default:
                                goto loop77;
                        }
                    } while (true);

                loop77:
                    ;	// Stops C# compiler whinging that label 'loop77' has no statements


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 87, nonemptyElementList_StartIndex);
                }
                InOperator_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end nonemptyElementList

        public class objectLiteral_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start objectLiteral
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:717:1: objectLiteral : LCURLY ( fieldList )? RCURLY -> ^( OBJECT_LITERAL ( fieldList )? ) ;
        public objectLiteral_return objectLiteral() // throws RecognitionException [1]
        {
            objectLiteral_return retval = new objectLiteral_return();
            retval.start = input.LT(1);
            int objectLiteral_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken LCURLY297 = null;
            IToken RCURLY299 = null;
            fieldList_return fieldList298 = null;


            CommonTree LCURLY297_tree = null;
            CommonTree RCURLY299_tree = null;
            RewriteRuleTokenStream stream_LCURLY = new RewriteRuleTokenStream(adaptor, "token LCURLY");
            RewriteRuleTokenStream stream_RCURLY = new RewriteRuleTokenStream(adaptor, "token RCURLY");
            RewriteRuleSubtreeStream stream_fieldList = new RewriteRuleSubtreeStream(adaptor, "rule fieldList");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 88))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:718:4: ( LCURLY ( fieldList )? RCURLY -> ^( OBJECT_LITERAL ( fieldList )? ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:718:4: LCURLY ( fieldList )? RCURLY
                {
                    LCURLY297 = (IToken)input.LT(1);
                    Match(input, LCURLY, FOLLOW_LCURLY_in_objectLiteral3136); if (failed) return retval;
                    if (backtracking == 0) stream_LCURLY.Add(LCURLY297);

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:718:11: ( fieldList )?
                    int alt78 = 2;
                    int LA78_0 = input.LA(1);

                    if (((LA78_0 >= GET && LA78_0 <= USE) || LA78_0 == XML || LA78_0 == IDENT || LA78_0 == DYNAMIC || (LA78_0 >= IS && LA78_0 <= AS) || (LA78_0 >= HEX_LITERAL && LA78_0 <= FLOAT_LITERAL)))
                    {
                        alt78 = 1;
                    }
                    switch (alt78)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: fieldList
                            {
                                PushFollow(FOLLOW_fieldList_in_objectLiteral3138);
                                fieldList298 = fieldList();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) stream_fieldList.Add(fieldList298.Tree);

                            }
                            break;

                    }

                    RCURLY299 = (IToken)input.LT(1);
                    Match(input, RCURLY, FOLLOW_RCURLY_in_objectLiteral3141); if (failed) return retval;
                    if (backtracking == 0) stream_RCURLY.Add(RCURLY299);


                    // AST REWRITE
                    // elements:          fieldList
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 719:3: -> ^( OBJECT_LITERAL ( fieldList )? )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:719:6: ^( OBJECT_LITERAL ( fieldList )? )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(OBJECT_LITERAL, "OBJECT_LITERAL"), root_1);

                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:719:23: ( fieldList )?
                                if (stream_fieldList.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_fieldList.Next());

                                }
                                stream_fieldList.Reset();

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 88, objectLiteral_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end objectLiteral

        public class fieldList_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start fieldList
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:722:1: fieldList : literalField ( COMMA ( literalField )? )* ;
        public fieldList_return fieldList() // throws RecognitionException [1]
        {
            fieldList_return retval = new fieldList_return();
            retval.start = input.LT(1);
            int fieldList_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken COMMA301 = null;
            literalField_return literalField300 = null;

            literalField_return literalField302 = null;


            CommonTree COMMA301_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 89))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:723:4: ( literalField ( COMMA ( literalField )? )* )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:723:4: literalField ( COMMA ( literalField )? )*
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    PushFollow(FOLLOW_literalField_in_fieldList3164);
                    literalField300 = literalField();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, literalField300.Tree);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:723:17: ( COMMA ( literalField )? )*
                    do
                    {
                        int alt80 = 2;
                        int LA80_0 = input.LA(1);

                        if ((LA80_0 == COMMA))
                        {
                            alt80 = 1;
                        }


                        switch (alt80)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:723:18: COMMA ( literalField )?
                                {
                                    COMMA301 = (IToken)input.LT(1);
                                    Match(input, COMMA, FOLLOW_COMMA_in_fieldList3167); if (failed) return retval;
                                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:723:25: ( literalField )?
                                    int alt79 = 2;
                                    int LA79_0 = input.LA(1);

                                    if (((LA79_0 >= GET && LA79_0 <= USE) || LA79_0 == XML || LA79_0 == IDENT || LA79_0 == DYNAMIC || (LA79_0 >= IS && LA79_0 <= AS) || (LA79_0 >= HEX_LITERAL && LA79_0 <= FLOAT_LITERAL)))
                                    {
                                        alt79 = 1;
                                    }
                                    switch (alt79)
                                    {
                                        case 1:
                                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: literalField
                                            {
                                                PushFollow(FOLLOW_literalField_in_fieldList3170);
                                                literalField302 = literalField();
                                                followingStackPointer_--;
                                                if (failed) return retval;
                                                if (backtracking == 0) adaptor.AddChild(root_0, literalField302.Tree);

                                            }
                                            break;

                                    }


                                }
                                break;

                            default:
                                goto loop80;
                        }
                    } while (true);

                loop80:
                    ;	// Stops C# compiler whinging that label 'loop80' has no statements


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 89, fieldList_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end fieldList

        public class literalField_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start literalField
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:726:1: literalField : fieldName COLON element -> ^( OBJECT_FIELD fieldName element ) ;
        public literalField_return literalField() // throws RecognitionException [1]
        {
            literalField_return retval = new literalField_return();
            retval.start = input.LT(1);
            int literalField_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken COLON304 = null;
            fieldName_return fieldName303 = null;

            element_return element305 = null;


            CommonTree COLON304_tree = null;
            RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor, "token COLON");
            RewriteRuleSubtreeStream stream_element = new RewriteRuleSubtreeStream(adaptor, "rule element");
            RewriteRuleSubtreeStream stream_fieldName = new RewriteRuleSubtreeStream(adaptor, "rule fieldName");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 90))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:727:5: ( fieldName COLON element -> ^( OBJECT_FIELD fieldName element ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:727:5: fieldName COLON element
                {
                    PushFollow(FOLLOW_fieldName_in_literalField3187);
                    fieldName303 = fieldName();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_fieldName.Add(fieldName303.Tree);
                    COLON304 = (IToken)input.LT(1);
                    Match(input, COLON, FOLLOW_COLON_in_literalField3189); if (failed) return retval;
                    if (backtracking == 0) stream_COLON.Add(COLON304);

                    PushFollow(FOLLOW_element_in_literalField3191);
                    element305 = element();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_element.Add(element305.Tree);

                    // AST REWRITE
                    // elements:          element, fieldName
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 728:3: -> ^( OBJECT_FIELD fieldName element )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:728:6: ^( OBJECT_FIELD fieldName element )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(OBJECT_FIELD, "OBJECT_FIELD"), root_1);

                                adaptor.AddChild(root_1, stream_fieldName.Next());
                                adaptor.AddChild(root_1, stream_element.Next());

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 90, literalField_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end literalField

        public class fieldName_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start fieldName
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:731:1: fieldName : ( ident | number );
        public fieldName_return fieldName() // throws RecognitionException [1]
        {
            fieldName_return retval = new fieldName_return();
            retval.start = input.LT(1);
            int fieldName_StartIndex = input.Index();
            CommonTree root_0 = null;

            ident_return ident306 = null;

            number_return number307 = null;



            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 91))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:732:4: ( ident | number )
                int alt81 = 2;
                int LA81_0 = input.LA(1);

                if (((LA81_0 >= GET && LA81_0 <= USE) || LA81_0 == XML || LA81_0 == IDENT || LA81_0 == DYNAMIC || (LA81_0 >= IS && LA81_0 <= AS)))
                {
                    alt81 = 1;
                }
                else if (((LA81_0 >= HEX_LITERAL && LA81_0 <= FLOAT_LITERAL)))
                {
                    alt81 = 2;
                }
                else
                {
                    if (backtracking > 0) { failed = true; return retval; }
                    NoViableAltException nvae_d81s0 =
                        new NoViableAltException("731:1: fieldName : ( ident | number );", 81, 0, input);

                    throw nvae_d81s0;
                }
                switch (alt81)
                {
                    case 1:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:732:4: ident
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_ident_in_fieldName3215);
                            ident306 = ident();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, ident306.Tree);

                        }
                        break;
                    case 2:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:733:4: number
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_number_in_fieldName3220);
                            number307 = number();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, number307.Tree);

                        }
                        break;

                }
                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 91, fieldName_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end fieldName

        public class expression_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start expression
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:737:1: expression : assignmentExpression ;
        public expression_return expression() // throws RecognitionException [1]
        {
            InOperator_stack.Push(new InOperator_scope());

            expression_return retval = new expression_return();
            retval.start = input.LT(1);
            int expression_StartIndex = input.Index();
            CommonTree root_0 = null;

            assignmentExpression_return assignmentExpression308 = null;




            ((InOperator_scope)InOperator_stack.Peek()).allowed = true;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 92))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:742:4: ( assignmentExpression )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:742:4: assignmentExpression
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    PushFollow(FOLLOW_assignmentExpression_in_expression3242);
                    assignmentExpression308 = assignmentExpression();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, assignmentExpression308.Tree);

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 92, expression_StartIndex);
                }
                InOperator_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end expression

        public class expressionList_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start expressionList
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:746:1: expressionList : assignmentExpression ( COMMA assignmentExpression )* -> ^( ELIST assignmentExpression ( COMMA assignmentExpression )* ) ;
        public expressionList_return expressionList() // throws RecognitionException [1]
        {
            expressionList_return retval = new expressionList_return();
            retval.start = input.LT(1);
            int expressionList_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken COMMA310 = null;
            assignmentExpression_return assignmentExpression309 = null;

            assignmentExpression_return assignmentExpression311 = null;


            CommonTree COMMA310_tree = null;
            RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
            RewriteRuleSubtreeStream stream_assignmentExpression = new RewriteRuleSubtreeStream(adaptor, "rule assignmentExpression");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 93))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:747:4: ( assignmentExpression ( COMMA assignmentExpression )* -> ^( ELIST assignmentExpression ( COMMA assignmentExpression )* ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:747:4: assignmentExpression ( COMMA assignmentExpression )*
                {
                    PushFollow(FOLLOW_assignmentExpression_in_expressionList3254);
                    assignmentExpression309 = assignmentExpression();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_assignmentExpression.Add(assignmentExpression309.Tree);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:747:25: ( COMMA assignmentExpression )*
                    do
                    {
                        int alt82 = 2;
                        int LA82_0 = input.LA(1);

                        if ((LA82_0 == COMMA))
                        {
                            alt82 = 1;
                        }


                        switch (alt82)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:747:26: COMMA assignmentExpression
                                {
                                    COMMA310 = (IToken)input.LT(1);
                                    Match(input, COMMA, FOLLOW_COMMA_in_expressionList3257); if (failed) return retval;
                                    if (backtracking == 0) stream_COMMA.Add(COMMA310);

                                    PushFollow(FOLLOW_assignmentExpression_in_expressionList3259);
                                    assignmentExpression311 = assignmentExpression();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) stream_assignmentExpression.Add(assignmentExpression311.Tree);

                                }
                                break;

                            default:
                                goto loop82;
                        }
                    } while (true);

                loop82:
                    ;	// Stops C# compiler whinging that label 'loop82' has no statements


                    // AST REWRITE
                    // elements:          COMMA, assignmentExpression, assignmentExpression
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 747:55: -> ^( ELIST assignmentExpression ( COMMA assignmentExpression )* )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:747:58: ^( ELIST assignmentExpression ( COMMA assignmentExpression )* )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(ELIST, "ELIST"), root_1);

                                adaptor.AddChild(root_1, stream_assignmentExpression.Next());
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:747:87: ( COMMA assignmentExpression )*
                                while (stream_COMMA.HasNext() || stream_assignmentExpression.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_COMMA.Next());
                                    adaptor.AddChild(root_1, stream_assignmentExpression.Next());

                                }
                                stream_COMMA.Reset();
                                stream_assignmentExpression.Reset();

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 93, expressionList_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end expressionList

        public class assignmentExpression_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start assignmentExpression
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:751:1: assignmentExpression : conditionalExpression ( ( assignmentOperator )=> assignmentOperator assignmentExpression )* ;
        public assignmentExpression_return assignmentExpression() // throws RecognitionException [1]
        {
            assignmentExpression_return retval = new assignmentExpression_return();
            retval.start = input.LT(1);
            int assignmentExpression_StartIndex = input.Index();
            CommonTree root_0 = null;

            conditionalExpression_return conditionalExpression312 = null;

            assignmentOperator_return assignmentOperator313 = null;

            assignmentExpression_return assignmentExpression314 = null;



            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 94))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:752:4: ( conditionalExpression ( ( assignmentOperator )=> assignmentOperator assignmentExpression )* )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:752:4: conditionalExpression ( ( assignmentOperator )=> assignmentOperator assignmentExpression )*
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    PushFollow(FOLLOW_conditionalExpression_in_assignmentExpression3288);
                    conditionalExpression312 = conditionalExpression();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, conditionalExpression312.Tree);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:753:2: ( ( assignmentOperator )=> assignmentOperator assignmentExpression )*
                    do
                    {
                        int alt83 = 2;
                        int LA83_0 = input.LA(1);

                        if ((LA83_0 == ASSIGN || (LA83_0 >= STAR_ASSIGN && LA83_0 <= LOR_ASSIGN)))
                        {
                            int LA83_70 = input.LA(2);

                            if ((synpred123()))
                            {
                                alt83 = 1;
                            }


                        }


                        switch (alt83)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:753:4: ( assignmentOperator )=> assignmentOperator assignmentExpression
                                {
                                    PushFollow(FOLLOW_assignmentOperator_in_assignmentExpression3298);
                                    assignmentOperator313 = assignmentOperator();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) adaptor.AddChild(root_0, assignmentOperator313.Tree);
                                    PushFollow(FOLLOW_assignmentExpression_in_assignmentExpression3302);
                                    assignmentExpression314 = assignmentExpression();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) adaptor.AddChild(root_0, assignmentExpression314.Tree);

                                }
                                break;

                            default:
                                goto loop83;
                        }
                    } while (true);

                loop83:
                    ;	// Stops C# compiler whinging that label 'loop83' has no statements


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 94, assignmentExpression_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end assignmentExpression

        public class assignmentOperator_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start assignmentOperator
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:758:1: assignmentOperator : ( ASSIGN | STAR_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | SL_ASSIGN | SR_ASSIGN | BSR_ASSIGN | BAND_ASSIGN | BXOR_ASSIGN | BOR_ASSIGN | LAND_ASSIGN | LOR_ASSIGN );
        public assignmentOperator_return assignmentOperator() // throws RecognitionException [1]
        {
            assignmentOperator_return retval = new assignmentOperator_return();
            retval.start = input.LT(1);
            int assignmentOperator_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken set315 = null;

            CommonTree set315_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 95))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:759:4: ( ASSIGN | STAR_ASSIGN | DIV_ASSIGN | MOD_ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | SL_ASSIGN | SR_ASSIGN | BSR_ASSIGN | BAND_ASSIGN | BXOR_ASSIGN | BOR_ASSIGN | LAND_ASSIGN | LOR_ASSIGN )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    set315 = (IToken)input.LT(1);
                    if (input.LA(1) == ASSIGN || (input.LA(1) >= STAR_ASSIGN && input.LA(1) <= LOR_ASSIGN))
                    {
                        input.Consume();
                        if (backtracking == 0) adaptor.AddChild(root_0, adaptor.Create(set315));
                        errorRecovery = false; failed = false;
                    }
                    else
                    {
                        if (backtracking > 0) { failed = true; return retval; }
                        MismatchedSetException mse =
                            new MismatchedSetException(null, input);
                        RecoverFromMismatchedSet(input, mse, FOLLOW_set_in_assignmentOperator0); throw mse;
                    }


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 95, assignmentOperator_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end assignmentOperator

        public class conditionalExpression_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start conditionalExpression
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:776:1: conditionalExpression : ( logicalOrExpression -> logicalOrExpression ) ( QUESTION conditionalSubExpression -> ^( QUESTION $conditionalExpression conditionalSubExpression ) )? ;
        public conditionalExpression_return conditionalExpression() // throws RecognitionException [1]
        {
            conditionalExpression_return retval = new conditionalExpression_return();
            retval.start = input.LT(1);
            int conditionalExpression_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken QUESTION317 = null;
            logicalOrExpression_return logicalOrExpression316 = null;

            conditionalSubExpression_return conditionalSubExpression318 = null;


            CommonTree QUESTION317_tree = null;
            RewriteRuleTokenStream stream_QUESTION = new RewriteRuleTokenStream(adaptor, "token QUESTION");
            RewriteRuleSubtreeStream stream_logicalOrExpression = new RewriteRuleSubtreeStream(adaptor, "rule logicalOrExpression");
            RewriteRuleSubtreeStream stream_conditionalSubExpression = new RewriteRuleSubtreeStream(adaptor, "rule conditionalSubExpression");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 96))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:777:4: ( ( logicalOrExpression -> logicalOrExpression ) ( QUESTION conditionalSubExpression -> ^( QUESTION $conditionalExpression conditionalSubExpression ) )? )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:777:4: ( logicalOrExpression -> logicalOrExpression ) ( QUESTION conditionalSubExpression -> ^( QUESTION $conditionalExpression conditionalSubExpression ) )?
                {
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:777:4: ( logicalOrExpression -> logicalOrExpression )
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:777:5: logicalOrExpression
                    {
                        PushFollow(FOLLOW_logicalOrExpression_in_conditionalExpression3396);
                        logicalOrExpression316 = logicalOrExpression();
                        followingStackPointer_--;
                        if (failed) return retval;
                        if (backtracking == 0) stream_logicalOrExpression.Add(logicalOrExpression316.Tree);

                        // AST REWRITE
                        // elements:          logicalOrExpression
                        // token labels:      
                        // rule labels:       retval
                        // token list labels: 
                        // rule list labels:  
                        if (backtracking == 0)
                        {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                            root_0 = (CommonTree)adaptor.GetNilNode();
                            // 777:25: -> logicalOrExpression
                            {
                                adaptor.AddChild(root_0, stream_logicalOrExpression.Next());

                            }

                        }

                    }

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:778:3: ( QUESTION conditionalSubExpression -> ^( QUESTION $conditionalExpression conditionalSubExpression ) )?
                    int alt84 = 2;
                    int LA84_0 = input.LA(1);

                    if ((LA84_0 == QUESTION))
                    {
                        alt84 = 1;
                    }
                    switch (alt84)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:779:4: QUESTION conditionalSubExpression
                            {
                                QUESTION317 = (IToken)input.LT(1);
                                Match(input, QUESTION, FOLLOW_QUESTION_in_conditionalExpression3410); if (failed) return retval;
                                if (backtracking == 0) stream_QUESTION.Add(QUESTION317);

                                PushFollow(FOLLOW_conditionalSubExpression_in_conditionalExpression3415);
                                conditionalSubExpression318 = conditionalSubExpression();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) stream_conditionalSubExpression.Add(conditionalSubExpression318.Tree);

                                // AST REWRITE
                                // elements:          conditionalExpression, conditionalSubExpression, QUESTION
                                // token labels:      
                                // rule labels:       retval
                                // token list labels: 
                                // rule list labels:  
                                if (backtracking == 0)
                                {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                    root_0 = (CommonTree)adaptor.GetNilNode();
                                    // 781:4: -> ^( QUESTION $conditionalExpression conditionalSubExpression )
                                    {
                                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:781:7: ^( QUESTION $conditionalExpression conditionalSubExpression )
                                        {
                                            CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                            root_1 = (CommonTree)adaptor.BecomeRoot(stream_QUESTION.Next(), root_1);

                                            adaptor.AddChild(root_1, stream_retval.Next());
                                            adaptor.AddChild(root_1, stream_conditionalSubExpression.Next());

                                            adaptor.AddChild(root_0, root_1);
                                        }

                                    }

                                }

                            }
                            break;

                    }


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 96, conditionalExpression_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end conditionalExpression

        public class conditionalSubExpression_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start conditionalSubExpression
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:784:1: conditionalSubExpression : assignmentExpression COLON assignmentExpression ;
        public conditionalSubExpression_return conditionalSubExpression() // throws RecognitionException [1]
        {
            conditionalSubExpression_return retval = new conditionalSubExpression_return();
            retval.start = input.LT(1);
            int conditionalSubExpression_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken COLON320 = null;
            assignmentExpression_return assignmentExpression319 = null;

            assignmentExpression_return assignmentExpression321 = null;


            CommonTree COLON320_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 97))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:785:4: ( assignmentExpression COLON assignmentExpression )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:785:4: assignmentExpression COLON assignmentExpression
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    PushFollow(FOLLOW_assignmentExpression_in_conditionalSubExpression3444);
                    assignmentExpression319 = assignmentExpression();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, assignmentExpression319.Tree);
                    COLON320 = (IToken)input.LT(1);
                    Match(input, COLON, FOLLOW_COLON_in_conditionalSubExpression3446); if (failed) return retval;
                    if (backtracking == 0)
                    {
                        COLON320_tree = (CommonTree)adaptor.Create(COLON320);
                        root_0 = (CommonTree)adaptor.BecomeRoot(COLON320_tree, root_0);
                    }
                    PushFollow(FOLLOW_assignmentExpression_in_conditionalSubExpression3449);
                    assignmentExpression321 = assignmentExpression();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, assignmentExpression321.Tree);

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 97, conditionalSubExpression_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end conditionalSubExpression

        public class logicalOrExpression_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start logicalOrExpression
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:791:1: logicalOrExpression : logicalAndExpression ( logicalOrOperator logicalAndExpression )* ;
        public logicalOrExpression_return logicalOrExpression() // throws RecognitionException [1]
        {
            logicalOrExpression_return retval = new logicalOrExpression_return();
            retval.start = input.LT(1);
            int logicalOrExpression_StartIndex = input.Index();
            CommonTree root_0 = null;

            logicalAndExpression_return logicalAndExpression322 = null;

            logicalOrOperator_return logicalOrOperator323 = null;

            logicalAndExpression_return logicalAndExpression324 = null;



            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 98))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:792:4: ( logicalAndExpression ( logicalOrOperator logicalAndExpression )* )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:792:4: logicalAndExpression ( logicalOrOperator logicalAndExpression )*
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    PushFollow(FOLLOW_logicalAndExpression_in_logicalOrExpression3463);
                    logicalAndExpression322 = logicalAndExpression();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, logicalAndExpression322.Tree);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:793:3: ( logicalOrOperator logicalAndExpression )*
                    do
                    {
                        int alt85 = 2;
                        int LA85_0 = input.LA(1);

                        if ((LA85_0 == LOR || LA85_0 == 186))
                        {
                            alt85 = 1;
                        }


                        switch (alt85)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:793:4: logicalOrOperator logicalAndExpression
                                {
                                    PushFollow(FOLLOW_logicalOrOperator_in_logicalOrExpression3468);
                                    logicalOrOperator323 = logicalOrOperator();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(logicalOrOperator323.Tree, root_0);
                                    PushFollow(FOLLOW_logicalAndExpression_in_logicalOrExpression3471);
                                    logicalAndExpression324 = logicalAndExpression();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) adaptor.AddChild(root_0, logicalAndExpression324.Tree);

                                }
                                break;

                            default:
                                goto loop85;
                        }
                    } while (true);

                loop85:
                    ;	// Stops C# compiler whinging that label 'loop85' has no statements


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 98, logicalOrExpression_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end logicalOrExpression

        public class logicalOrOperator_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start logicalOrOperator
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:796:1: logicalOrOperator : ( LOR | 'or' );
        public logicalOrOperator_return logicalOrOperator() // throws RecognitionException [1]
        {
            logicalOrOperator_return retval = new logicalOrOperator_return();
            retval.start = input.LT(1);
            int logicalOrOperator_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken set325 = null;

            CommonTree set325_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 99))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:797:4: ( LOR | 'or' )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    set325 = (IToken)input.LT(1);
                    if (input.LA(1) == LOR || input.LA(1) == 186)
                    {
                        input.Consume();
                        if (backtracking == 0) adaptor.AddChild(root_0, adaptor.Create(set325));
                        errorRecovery = false; failed = false;
                    }
                    else
                    {
                        if (backtracking > 0) { failed = true; return retval; }
                        MismatchedSetException mse =
                            new MismatchedSetException(null, input);
                        RecoverFromMismatchedSet(input, mse, FOLLOW_set_in_logicalOrOperator0); throw mse;
                    }


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 99, logicalOrOperator_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end logicalOrOperator

        public class logicalAndExpression_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start logicalAndExpression
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:801:1: logicalAndExpression : bitwiseOrExpression ( logicalAndOperator bitwiseOrExpression )* ;
        public logicalAndExpression_return logicalAndExpression() // throws RecognitionException [1]
        {
            logicalAndExpression_return retval = new logicalAndExpression_return();
            retval.start = input.LT(1);
            int logicalAndExpression_StartIndex = input.Index();
            CommonTree root_0 = null;

            bitwiseOrExpression_return bitwiseOrExpression326 = null;

            logicalAndOperator_return logicalAndOperator327 = null;

            bitwiseOrExpression_return bitwiseOrExpression328 = null;



            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 100))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:802:4: ( bitwiseOrExpression ( logicalAndOperator bitwiseOrExpression )* )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:802:4: bitwiseOrExpression ( logicalAndOperator bitwiseOrExpression )*
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    PushFollow(FOLLOW_bitwiseOrExpression_in_logicalAndExpression3500);
                    bitwiseOrExpression326 = bitwiseOrExpression();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, bitwiseOrExpression326.Tree);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:803:3: ( logicalAndOperator bitwiseOrExpression )*
                    do
                    {
                        int alt86 = 2;
                        int LA86_0 = input.LA(1);

                        if ((LA86_0 == LAND || LA86_0 == 187))
                        {
                            alt86 = 1;
                        }


                        switch (alt86)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:803:4: logicalAndOperator bitwiseOrExpression
                                {
                                    PushFollow(FOLLOW_logicalAndOperator_in_logicalAndExpression3505);
                                    logicalAndOperator327 = logicalAndOperator();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(logicalAndOperator327.Tree, root_0);
                                    PushFollow(FOLLOW_bitwiseOrExpression_in_logicalAndExpression3508);
                                    bitwiseOrExpression328 = bitwiseOrExpression();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) adaptor.AddChild(root_0, bitwiseOrExpression328.Tree);

                                }
                                break;

                            default:
                                goto loop86;
                        }
                    } while (true);

                loop86:
                    ;	// Stops C# compiler whinging that label 'loop86' has no statements


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 100, logicalAndExpression_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end logicalAndExpression

        public class logicalAndOperator_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start logicalAndOperator
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:806:1: logicalAndOperator : ( LAND | 'and' );
        public logicalAndOperator_return logicalAndOperator() // throws RecognitionException [1]
        {
            logicalAndOperator_return retval = new logicalAndOperator_return();
            retval.start = input.LT(1);
            int logicalAndOperator_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken set329 = null;

            CommonTree set329_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 101))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:807:4: ( LAND | 'and' )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    set329 = (IToken)input.LT(1);
                    if (input.LA(1) == LAND || input.LA(1) == 187)
                    {
                        input.Consume();
                        if (backtracking == 0) adaptor.AddChild(root_0, adaptor.Create(set329));
                        errorRecovery = false; failed = false;
                    }
                    else
                    {
                        if (backtracking > 0) { failed = true; return retval; }
                        MismatchedSetException mse =
                            new MismatchedSetException(null, input);
                        RecoverFromMismatchedSet(input, mse, FOLLOW_set_in_logicalAndOperator0); throw mse;
                    }


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 101, logicalAndOperator_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end logicalAndOperator

        public class bitwiseOrExpression_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start bitwiseOrExpression
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:811:1: bitwiseOrExpression : bitwiseXorExpression ( BOR bitwiseXorExpression )* ;
        public bitwiseOrExpression_return bitwiseOrExpression() // throws RecognitionException [1]
        {
            bitwiseOrExpression_return retval = new bitwiseOrExpression_return();
            retval.start = input.LT(1);
            int bitwiseOrExpression_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken BOR331 = null;
            bitwiseXorExpression_return bitwiseXorExpression330 = null;

            bitwiseXorExpression_return bitwiseXorExpression332 = null;


            CommonTree BOR331_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 102))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:812:4: ( bitwiseXorExpression ( BOR bitwiseXorExpression )* )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:812:4: bitwiseXorExpression ( BOR bitwiseXorExpression )*
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    PushFollow(FOLLOW_bitwiseXorExpression_in_bitwiseOrExpression3537);
                    bitwiseXorExpression330 = bitwiseXorExpression();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, bitwiseXorExpression330.Tree);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:813:3: ( BOR bitwiseXorExpression )*
                    do
                    {
                        int alt87 = 2;
                        int LA87_0 = input.LA(1);

                        if ((LA87_0 == BOR))
                        {
                            alt87 = 1;
                        }


                        switch (alt87)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:813:4: BOR bitwiseXorExpression
                                {
                                    BOR331 = (IToken)input.LT(1);
                                    Match(input, BOR, FOLLOW_BOR_in_bitwiseOrExpression3542); if (failed) return retval;
                                    if (backtracking == 0)
                                    {
                                        BOR331_tree = (CommonTree)adaptor.Create(BOR331);
                                        root_0 = (CommonTree)adaptor.BecomeRoot(BOR331_tree, root_0);
                                    }
                                    PushFollow(FOLLOW_bitwiseXorExpression_in_bitwiseOrExpression3545);
                                    bitwiseXorExpression332 = bitwiseXorExpression();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) adaptor.AddChild(root_0, bitwiseXorExpression332.Tree);

                                }
                                break;

                            default:
                                goto loop87;
                        }
                    } while (true);

                loop87:
                    ;	// Stops C# compiler whinging that label 'loop87' has no statements


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 102, bitwiseOrExpression_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end bitwiseOrExpression

        public class bitwiseXorExpression_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start bitwiseXorExpression
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:817:1: bitwiseXorExpression : bitwiseAndExpression ( BXOR bitwiseAndExpression )* ;
        public bitwiseXorExpression_return bitwiseXorExpression() // throws RecognitionException [1]
        {
            bitwiseXorExpression_return retval = new bitwiseXorExpression_return();
            retval.start = input.LT(1);
            int bitwiseXorExpression_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken BXOR334 = null;
            bitwiseAndExpression_return bitwiseAndExpression333 = null;

            bitwiseAndExpression_return bitwiseAndExpression335 = null;


            CommonTree BXOR334_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 103))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:818:4: ( bitwiseAndExpression ( BXOR bitwiseAndExpression )* )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:818:4: bitwiseAndExpression ( BXOR bitwiseAndExpression )*
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    PushFollow(FOLLOW_bitwiseAndExpression_in_bitwiseXorExpression3559);
                    bitwiseAndExpression333 = bitwiseAndExpression();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, bitwiseAndExpression333.Tree);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:819:3: ( BXOR bitwiseAndExpression )*
                    do
                    {
                        int alt88 = 2;
                        int LA88_0 = input.LA(1);

                        if ((LA88_0 == BXOR))
                        {
                            alt88 = 1;
                        }


                        switch (alt88)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:819:4: BXOR bitwiseAndExpression
                                {
                                    BXOR334 = (IToken)input.LT(1);
                                    Match(input, BXOR, FOLLOW_BXOR_in_bitwiseXorExpression3564); if (failed) return retval;
                                    if (backtracking == 0)
                                    {
                                        BXOR334_tree = (CommonTree)adaptor.Create(BXOR334);
                                        root_0 = (CommonTree)adaptor.BecomeRoot(BXOR334_tree, root_0);
                                    }
                                    PushFollow(FOLLOW_bitwiseAndExpression_in_bitwiseXorExpression3567);
                                    bitwiseAndExpression335 = bitwiseAndExpression();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) adaptor.AddChild(root_0, bitwiseAndExpression335.Tree);

                                }
                                break;

                            default:
                                goto loop88;
                        }
                    } while (true);

                loop88:
                    ;	// Stops C# compiler whinging that label 'loop88' has no statements


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 103, bitwiseXorExpression_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end bitwiseXorExpression

        public class bitwiseAndExpression_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start bitwiseAndExpression
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:823:1: bitwiseAndExpression : equalityExpression ( BAND equalityExpression )* ;
        public bitwiseAndExpression_return bitwiseAndExpression() // throws RecognitionException [1]
        {
            bitwiseAndExpression_return retval = new bitwiseAndExpression_return();
            retval.start = input.LT(1);
            int bitwiseAndExpression_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken BAND337 = null;
            equalityExpression_return equalityExpression336 = null;

            equalityExpression_return equalityExpression338 = null;


            CommonTree BAND337_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 104))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:824:4: ( equalityExpression ( BAND equalityExpression )* )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:824:4: equalityExpression ( BAND equalityExpression )*
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    PushFollow(FOLLOW_equalityExpression_in_bitwiseAndExpression3581);
                    equalityExpression336 = equalityExpression();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, equalityExpression336.Tree);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:825:3: ( BAND equalityExpression )*
                    do
                    {
                        int alt89 = 2;
                        int LA89_0 = input.LA(1);

                        if ((LA89_0 == BAND))
                        {
                            alt89 = 1;
                        }


                        switch (alt89)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:825:4: BAND equalityExpression
                                {
                                    BAND337 = (IToken)input.LT(1);
                                    Match(input, BAND, FOLLOW_BAND_in_bitwiseAndExpression3586); if (failed) return retval;
                                    if (backtracking == 0)
                                    {
                                        BAND337_tree = (CommonTree)adaptor.Create(BAND337);
                                        root_0 = (CommonTree)adaptor.BecomeRoot(BAND337_tree, root_0);
                                    }
                                    PushFollow(FOLLOW_equalityExpression_in_bitwiseAndExpression3589);
                                    equalityExpression338 = equalityExpression();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) adaptor.AddChild(root_0, equalityExpression338.Tree);

                                }
                                break;

                            default:
                                goto loop89;
                        }
                    } while (true);

                loop89:
                    ;	// Stops C# compiler whinging that label 'loop89' has no statements


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 104, bitwiseAndExpression_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end bitwiseAndExpression

        public class equalityExpression_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start equalityExpression
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:829:1: equalityExpression : relationalExpression ( equalityOperator relationalExpression )* ;
        public equalityExpression_return equalityExpression() // throws RecognitionException [1]
        {
            equalityExpression_return retval = new equalityExpression_return();
            retval.start = input.LT(1);
            int equalityExpression_StartIndex = input.Index();
            CommonTree root_0 = null;

            relationalExpression_return relationalExpression339 = null;

            equalityOperator_return equalityOperator340 = null;

            relationalExpression_return relationalExpression341 = null;



            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 105))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:830:4: ( relationalExpression ( equalityOperator relationalExpression )* )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:830:4: relationalExpression ( equalityOperator relationalExpression )*
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    PushFollow(FOLLOW_relationalExpression_in_equalityExpression3603);
                    relationalExpression339 = relationalExpression();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, relationalExpression339.Tree);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:831:2: ( equalityOperator relationalExpression )*
                    do
                    {
                        int alt90 = 2;
                        int LA90_0 = input.LA(1);

                        if (((LA90_0 >= STRICT_EQUAL && LA90_0 <= EQUAL)))
                        {
                            alt90 = 1;
                        }


                        switch (alt90)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:831:4: equalityOperator relationalExpression
                                {
                                    PushFollow(FOLLOW_equalityOperator_in_equalityExpression3608);
                                    equalityOperator340 = equalityOperator();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(equalityOperator340.Tree, root_0);
                                    PushFollow(FOLLOW_relationalExpression_in_equalityExpression3613);
                                    relationalExpression341 = relationalExpression();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) adaptor.AddChild(root_0, relationalExpression341.Tree);

                                }
                                break;

                            default:
                                goto loop90;
                        }
                    } while (true);

                loop90:
                    ;	// Stops C# compiler whinging that label 'loop90' has no statements


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 105, equalityExpression_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end equalityExpression

        public class equalityOperator_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start equalityOperator
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:836:1: equalityOperator : ( STRICT_EQUAL | STRICT_NOT_EQUAL | NOT_EQUAL | EQUAL );
        public equalityOperator_return equalityOperator() // throws RecognitionException [1]
        {
            equalityOperator_return retval = new equalityOperator_return();
            retval.start = input.LT(1);
            int equalityOperator_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken set342 = null;

            CommonTree set342_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 106))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:837:4: ( STRICT_EQUAL | STRICT_NOT_EQUAL | NOT_EQUAL | EQUAL )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    set342 = (IToken)input.LT(1);
                    if ((input.LA(1) >= STRICT_EQUAL && input.LA(1) <= EQUAL))
                    {
                        input.Consume();
                        if (backtracking == 0) adaptor.AddChild(root_0, adaptor.Create(set342));
                        errorRecovery = false; failed = false;
                    }
                    else
                    {
                        if (backtracking > 0) { failed = true; return retval; }
                        MismatchedSetException mse =
                            new MismatchedSetException(null, input);
                        RecoverFromMismatchedSet(input, mse, FOLLOW_set_in_equalityOperator0); throw mse;
                    }


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 106, equalityOperator_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end equalityOperator

        public class relationalExpression_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start relationalExpression
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:841:1: relationalExpression : shiftExpression ( ( relationalOperator )=> relationalOperator shiftExpression )* ;
        public relationalExpression_return relationalExpression() // throws RecognitionException [1]
        {
            relationalExpression_return retval = new relationalExpression_return();
            retval.start = input.LT(1);
            int relationalExpression_StartIndex = input.Index();
            CommonTree root_0 = null;

            shiftExpression_return shiftExpression343 = null;

            relationalOperator_return relationalOperator344 = null;

            shiftExpression_return shiftExpression345 = null;



            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 107))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:842:4: ( shiftExpression ( ( relationalOperator )=> relationalOperator shiftExpression )* )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:842:4: shiftExpression ( ( relationalOperator )=> relationalOperator shiftExpression )*
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    PushFollow(FOLLOW_shiftExpression_in_relationalExpression3653);
                    shiftExpression343 = shiftExpression();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, shiftExpression343.Tree);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:843:3: ( ( relationalOperator )=> relationalOperator shiftExpression )*
                    do
                    {
                        int alt91 = 2;
                        int LA91_0 = input.LA(1);

                        if ((LA91_0 == LT))
                        {
                            switch (input.LA(2))
                            {
                                case LBRACK:
                                    {
                                        int LA91_83 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case LPAREN:
                                    {
                                        int LA91_85 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case INC:
                                    {
                                        int LA91_86 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case DEC:
                                    {
                                        int LA91_87 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case DIV:
                                    {
                                        int LA91_88 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case MINUS:
                                    {
                                        int LA91_89 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case LT:
                                    {
                                        int LA91_92 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case IS:
                                    {
                                        int LA91_96 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case AS:
                                    {
                                        int LA91_97 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case LCURLY:
                                    {
                                        int LA91_113 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case PLUS:
                                    {
                                        int LA91_115 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case DELETE:
                                    {
                                        int LA91_116 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case 180:
                                    {
                                        int LA91_117 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case TYPEOF:
                                    {
                                        int LA91_118 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case LNOT:
                                    {
                                        int LA91_119 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case BNOT:
                                    {
                                        int LA91_120 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case UNDEFINED:
                                    {
                                        int LA91_121 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case HEX_LITERAL:
                                case DECIMAL_LITERAL:
                                case OCTAL_LITERAL:
                                case FLOAT_LITERAL:
                                    {
                                        int LA91_123 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case STRING_LITERAL:
                                    {
                                        int LA91_124 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case TRUE:
                                    {
                                        int LA91_125 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case FALSE:
                                    {
                                        int LA91_126 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case NULL:
                                    {
                                        int LA91_127 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case FUNCTION:
                                    {
                                        int LA91_128 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case NEW:
                                    {
                                        int LA91_129 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case E4X_ATTRI:
                                    {
                                        int LA91_130 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case IDENT:
                                    {
                                        int LA91_131 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case PUBLIC:
                                case PRIVATE:
                                case PROTECTED:
                                case INTERNAL:
                                    {
                                        int LA91_132 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case USE:
                                    {
                                        int LA91_133 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case XML:
                                    {
                                        int LA91_134 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case DYNAMIC:
                                    {
                                        int LA91_135 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case NAMESPACE:
                                    {
                                        int LA91_136 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case GET:
                                    {
                                        int LA91_137 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case SET:
                                    {
                                        int LA91_138 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;

                            }

                        }
                        else if ((LA91_0 == IS))
                        {
                            switch (input.LA(2))
                            {
                                case INC:
                                    {
                                        int LA91_152 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case DEC:
                                    {
                                        int LA91_153 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case MINUS:
                                    {
                                        int LA91_154 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case PLUS:
                                    {
                                        int LA91_155 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case DELETE:
                                    {
                                        int LA91_156 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case 180:
                                    {
                                        int LA91_157 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case TYPEOF:
                                    {
                                        int LA91_158 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case LNOT:
                                    {
                                        int LA91_159 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case BNOT:
                                    {
                                        int LA91_160 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case UNDEFINED:
                                    {
                                        int LA91_161 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case LT:
                                    {
                                        int LA91_162 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case DIV:
                                    {
                                        int LA91_163 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case HEX_LITERAL:
                                case DECIMAL_LITERAL:
                                case OCTAL_LITERAL:
                                case FLOAT_LITERAL:
                                    {
                                        int LA91_164 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case STRING_LITERAL:
                                    {
                                        int LA91_165 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case TRUE:
                                    {
                                        int LA91_166 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case FALSE:
                                    {
                                        int LA91_167 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case NULL:
                                    {
                                        int LA91_168 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case LBRACK:
                                    {
                                        int LA91_169 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case LCURLY:
                                    {
                                        int LA91_170 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case FUNCTION:
                                    {
                                        int LA91_171 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case NEW:
                                    {
                                        int LA91_172 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case LPAREN:
                                    {
                                        int LA91_173 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case E4X_ATTRI:
                                    {
                                        int LA91_174 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case IDENT:
                                    {
                                        int LA91_175 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case PUBLIC:
                                case PRIVATE:
                                case PROTECTED:
                                case INTERNAL:
                                    {
                                        int LA91_176 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case USE:
                                    {
                                        int LA91_177 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case XML:
                                    {
                                        int LA91_178 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case DYNAMIC:
                                    {
                                        int LA91_179 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case NAMESPACE:
                                    {
                                        int LA91_180 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case IS:
                                    {
                                        int LA91_181 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case AS:
                                    {
                                        int LA91_182 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case GET:
                                    {
                                        int LA91_183 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case SET:
                                    {
                                        int LA91_184 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;

                            }

                        }
                        else if ((LA91_0 == AS))
                        {
                            switch (input.LA(2))
                            {
                                case LBRACK:
                                    {
                                        int LA91_223 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case LPAREN:
                                    {
                                        int LA91_225 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case INC:
                                    {
                                        int LA91_226 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case DEC:
                                    {
                                        int LA91_227 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case DIV:
                                    {
                                        int LA91_228 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case MINUS:
                                    {
                                        int LA91_229 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case LT:
                                    {
                                        int LA91_232 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case IS:
                                    {
                                        int LA91_236 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case AS:
                                    {
                                        int LA91_237 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case LCURLY:
                                    {
                                        int LA91_253 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case PLUS:
                                    {
                                        int LA91_255 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case DELETE:
                                    {
                                        int LA91_256 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case 180:
                                    {
                                        int LA91_257 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case TYPEOF:
                                    {
                                        int LA91_258 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case LNOT:
                                    {
                                        int LA91_259 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case BNOT:
                                    {
                                        int LA91_260 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case UNDEFINED:
                                    {
                                        int LA91_261 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case HEX_LITERAL:
                                case DECIMAL_LITERAL:
                                case OCTAL_LITERAL:
                                case FLOAT_LITERAL:
                                    {
                                        int LA91_263 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case STRING_LITERAL:
                                    {
                                        int LA91_264 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case TRUE:
                                    {
                                        int LA91_265 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case FALSE:
                                    {
                                        int LA91_266 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case NULL:
                                    {
                                        int LA91_267 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case FUNCTION:
                                    {
                                        int LA91_268 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case NEW:
                                    {
                                        int LA91_269 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case E4X_ATTRI:
                                    {
                                        int LA91_270 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case IDENT:
                                    {
                                        int LA91_271 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case PUBLIC:
                                case PRIVATE:
                                case PROTECTED:
                                case INTERNAL:
                                    {
                                        int LA91_272 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case USE:
                                    {
                                        int LA91_273 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case XML:
                                    {
                                        int LA91_274 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case DYNAMIC:
                                    {
                                        int LA91_275 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case NAMESPACE:
                                    {
                                        int LA91_276 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case GET:
                                    {
                                        int LA91_277 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case SET:
                                    {
                                        int LA91_278 = input.LA(3);

                                        if ((synpred149()))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;

                            }

                        }
                        else if ((LA91_0 == IN))
                        {
                            switch (input.LA(2))
                            {
                                case INC:
                                    {
                                        int LA91_292 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case DEC:
                                    {
                                        int LA91_293 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case MINUS:
                                    {
                                        int LA91_294 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case PLUS:
                                    {
                                        int LA91_295 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case DELETE:
                                    {
                                        int LA91_296 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case 180:
                                    {
                                        int LA91_297 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case TYPEOF:
                                    {
                                        int LA91_298 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case LNOT:
                                    {
                                        int LA91_299 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case BNOT:
                                    {
                                        int LA91_300 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case UNDEFINED:
                                    {
                                        int LA91_301 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case LT:
                                    {
                                        int LA91_302 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case DIV:
                                    {
                                        int LA91_303 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case HEX_LITERAL:
                                case DECIMAL_LITERAL:
                                case OCTAL_LITERAL:
                                case FLOAT_LITERAL:
                                    {
                                        int LA91_304 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case STRING_LITERAL:
                                    {
                                        int LA91_305 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case TRUE:
                                    {
                                        int LA91_306 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case FALSE:
                                    {
                                        int LA91_307 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case NULL:
                                    {
                                        int LA91_308 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case LBRACK:
                                    {
                                        int LA91_309 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case LCURLY:
                                    {
                                        int LA91_310 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case FUNCTION:
                                    {
                                        int LA91_311 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case NEW:
                                    {
                                        int LA91_312 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case LPAREN:
                                    {
                                        int LA91_313 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case E4X_ATTRI:
                                    {
                                        int LA91_314 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case IDENT:
                                    {
                                        int LA91_315 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case PUBLIC:
                                case PRIVATE:
                                case PROTECTED:
                                case INTERNAL:
                                    {
                                        int LA91_316 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case USE:
                                    {
                                        int LA91_317 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case XML:
                                    {
                                        int LA91_318 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case DYNAMIC:
                                    {
                                        int LA91_319 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case NAMESPACE:
                                    {
                                        int LA91_320 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case IS:
                                    {
                                        int LA91_321 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case AS:
                                    {
                                        int LA91_322 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case GET:
                                    {
                                        int LA91_323 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;
                                case SET:
                                    {
                                        int LA91_324 = input.LA(3);

                                        if (((synpred149() && ((InOperator_scope)InOperator_stack.Peek()).allowed)))
                                        {
                                            alt91 = 1;
                                        }


                                    }
                                    break;

                            }

                        }
                        else if ((LA91_0 == GT) && (synpred149()))
                        {
                            alt91 = 1;
                        }
                        else if ((LA91_0 == LE) && (synpred149()))
                        {
                            alt91 = 1;
                        }
                        else if ((LA91_0 == GE) && (synpred149()))
                        {
                            alt91 = 1;
                        }
                        else if ((LA91_0 == INSTANCEOF) && (synpred149()))
                        {
                            alt91 = 1;
                        }


                        switch (alt91)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:843:4: ( relationalOperator )=> relationalOperator shiftExpression
                                {
                                    PushFollow(FOLLOW_relationalOperator_in_relationalExpression3663);
                                    relationalOperator344 = relationalOperator();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(relationalOperator344.Tree, root_0);
                                    PushFollow(FOLLOW_shiftExpression_in_relationalExpression3666);
                                    shiftExpression345 = shiftExpression();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) adaptor.AddChild(root_0, shiftExpression345.Tree);

                                }
                                break;

                            default:
                                goto loop91;
                        }
                    } while (true);

                loop91:
                    ;	// Stops C# compiler whinging that label 'loop91' has no statements


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 107, relationalExpression_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end relationalExpression

        public class relationalOperator_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start relationalOperator
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:846:1: relationalOperator : ({...}? IN | LT | GT | LE | GE | IS | AS | INSTANCEOF );
        public relationalOperator_return relationalOperator() // throws RecognitionException [1]
        {
            relationalOperator_return retval = new relationalOperator_return();
            retval.start = input.LT(1);
            int relationalOperator_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken IN346 = null;
            IToken LT347 = null;
            IToken GT348 = null;
            IToken LE349 = null;
            IToken GE350 = null;
            IToken IS351 = null;
            IToken AS352 = null;
            IToken INSTANCEOF353 = null;

            CommonTree IN346_tree = null;
            CommonTree LT347_tree = null;
            CommonTree GT348_tree = null;
            CommonTree LE349_tree = null;
            CommonTree GE350_tree = null;
            CommonTree IS351_tree = null;
            CommonTree AS352_tree = null;
            CommonTree INSTANCEOF353_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 108))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:847:4: ({...}? IN | LT | GT | LE | GE | IS | AS | INSTANCEOF )
                int alt92 = 8;
                switch (input.LA(1))
                {
                    case IN:
                        {
                            alt92 = 1;
                        }
                        break;
                    case LT:
                        {
                            alt92 = 2;
                        }
                        break;
                    case GT:
                        {
                            alt92 = 3;
                        }
                        break;
                    case LE:
                        {
                            alt92 = 4;
                        }
                        break;
                    case GE:
                        {
                            alt92 = 5;
                        }
                        break;
                    case IS:
                        {
                            alt92 = 6;
                        }
                        break;
                    case AS:
                        {
                            alt92 = 7;
                        }
                        break;
                    case INSTANCEOF:
                        {
                            alt92 = 8;
                        }
                        break;
                    default:
                        if (backtracking > 0) { failed = true; return retval; }
                        NoViableAltException nvae_d92s0 =
                            new NoViableAltException("846:1: relationalOperator : ({...}? IN | LT | GT | LE | GE | IS | AS | INSTANCEOF );", 92, 0, input);

                        throw nvae_d92s0;
                }

                switch (alt92)
                {
                    case 1:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:847:4: {...}? IN
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            if (!(((InOperator_scope)InOperator_stack.Peek()).allowed))
                            {
                                if (backtracking > 0) { failed = true; return retval; }
                                throw new FailedPredicateException(input, "relationalOperator", "$InOperator::allowed");
                            }
                            IN346 = (IToken)input.LT(1);
                            Match(input, IN, FOLLOW_IN_in_relationalOperator3681); if (failed) return retval;
                            if (backtracking == 0)
                            {
                                IN346_tree = (CommonTree)adaptor.Create(IN346);
                                adaptor.AddChild(root_0, IN346_tree);
                            }

                        }
                        break;
                    case 2:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:848:4: LT
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            LT347 = (IToken)input.LT(1);
                            Match(input, LT, FOLLOW_LT_in_relationalOperator3686); if (failed) return retval;
                            if (backtracking == 0)
                            {
                                LT347_tree = (CommonTree)adaptor.Create(LT347);
                                adaptor.AddChild(root_0, LT347_tree);
                            }

                        }
                        break;
                    case 3:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:848:9: GT
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            GT348 = (IToken)input.LT(1);
                            Match(input, GT, FOLLOW_GT_in_relationalOperator3690); if (failed) return retval;
                            if (backtracking == 0)
                            {
                                GT348_tree = (CommonTree)adaptor.Create(GT348);
                                adaptor.AddChild(root_0, GT348_tree);
                            }

                        }
                        break;
                    case 4:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:848:14: LE
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            LE349 = (IToken)input.LT(1);
                            Match(input, LE, FOLLOW_LE_in_relationalOperator3694); if (failed) return retval;
                            if (backtracking == 0)
                            {
                                LE349_tree = (CommonTree)adaptor.Create(LE349);
                                adaptor.AddChild(root_0, LE349_tree);
                            }

                        }
                        break;
                    case 5:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:848:19: GE
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            GE350 = (IToken)input.LT(1);
                            Match(input, GE, FOLLOW_GE_in_relationalOperator3698); if (failed) return retval;
                            if (backtracking == 0)
                            {
                                GE350_tree = (CommonTree)adaptor.Create(GE350);
                                adaptor.AddChild(root_0, GE350_tree);
                            }

                        }
                        break;
                    case 6:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:848:24: IS
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            IS351 = (IToken)input.LT(1);
                            Match(input, IS, FOLLOW_IS_in_relationalOperator3702); if (failed) return retval;
                            if (backtracking == 0)
                            {
                                IS351_tree = (CommonTree)adaptor.Create(IS351);
                                adaptor.AddChild(root_0, IS351_tree);
                            }

                        }
                        break;
                    case 7:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:848:29: AS
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            AS352 = (IToken)input.LT(1);
                            Match(input, AS, FOLLOW_AS_in_relationalOperator3706); if (failed) return retval;
                            if (backtracking == 0)
                            {
                                AS352_tree = (CommonTree)adaptor.Create(AS352);
                                adaptor.AddChild(root_0, AS352_tree);
                            }

                        }
                        break;
                    case 8:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:848:34: INSTANCEOF
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            INSTANCEOF353 = (IToken)input.LT(1);
                            Match(input, INSTANCEOF, FOLLOW_INSTANCEOF_in_relationalOperator3710); if (failed) return retval;
                            if (backtracking == 0)
                            {
                                INSTANCEOF353_tree = (CommonTree)adaptor.Create(INSTANCEOF353);
                                adaptor.AddChild(root_0, INSTANCEOF353_tree);
                            }

                        }
                        break;

                }
                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 108, relationalOperator_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end relationalOperator

        public class shiftExpression_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start shiftExpression
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:852:1: shiftExpression : additiveExpression ( shiftOperator additiveExpression )* ;
        public shiftExpression_return shiftExpression() // throws RecognitionException [1]
        {
            shiftExpression_return retval = new shiftExpression_return();
            retval.start = input.LT(1);
            int shiftExpression_StartIndex = input.Index();
            CommonTree root_0 = null;

            additiveExpression_return additiveExpression354 = null;

            shiftOperator_return shiftOperator355 = null;

            additiveExpression_return additiveExpression356 = null;



            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 109))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:853:4: ( additiveExpression ( shiftOperator additiveExpression )* )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:853:4: additiveExpression ( shiftOperator additiveExpression )*
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    PushFollow(FOLLOW_additiveExpression_in_shiftExpression3722);
                    additiveExpression354 = additiveExpression();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, additiveExpression354.Tree);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:854:3: ( shiftOperator additiveExpression )*
                    do
                    {
                        int alt93 = 2;
                        int LA93_0 = input.LA(1);

                        if (((LA93_0 >= SL && LA93_0 <= BSR)))
                        {
                            alt93 = 1;
                        }


                        switch (alt93)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:854:4: shiftOperator additiveExpression
                                {
                                    PushFollow(FOLLOW_shiftOperator_in_shiftExpression3727);
                                    shiftOperator355 = shiftOperator();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(shiftOperator355.Tree, root_0);
                                    PushFollow(FOLLOW_additiveExpression_in_shiftExpression3730);
                                    additiveExpression356 = additiveExpression();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) adaptor.AddChild(root_0, additiveExpression356.Tree);

                                }
                                break;

                            default:
                                goto loop93;
                        }
                    } while (true);

                loop93:
                    ;	// Stops C# compiler whinging that label 'loop93' has no statements


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 109, shiftExpression_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end shiftExpression

        public class shiftOperator_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start shiftOperator
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:857:1: shiftOperator : ( SL | SR | BSR );
        public shiftOperator_return shiftOperator() // throws RecognitionException [1]
        {
            shiftOperator_return retval = new shiftOperator_return();
            retval.start = input.LT(1);
            int shiftOperator_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken set357 = null;

            CommonTree set357_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 110))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:858:4: ( SL | SR | BSR )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    set357 = (IToken)input.LT(1);
                    if ((input.LA(1) >= SL && input.LA(1) <= BSR))
                    {
                        input.Consume();
                        if (backtracking == 0) adaptor.AddChild(root_0, adaptor.Create(set357));
                        errorRecovery = false; failed = false;
                    }
                    else
                    {
                        if (backtracking > 0) { failed = true; return retval; }
                        MismatchedSetException mse =
                            new MismatchedSetException(null, input);
                        RecoverFromMismatchedSet(input, mse, FOLLOW_set_in_shiftOperator0); throw mse;
                    }


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 110, shiftOperator_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end shiftOperator

        public class additiveExpression_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start additiveExpression
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:862:1: additiveExpression : multiplicativeExpression ( additiveOperator multiplicativeExpression )* ;
        public additiveExpression_return additiveExpression() // throws RecognitionException [1]
        {
            additiveExpression_return retval = new additiveExpression_return();
            retval.start = input.LT(1);
            int additiveExpression_StartIndex = input.Index();
            CommonTree root_0 = null;

            multiplicativeExpression_return multiplicativeExpression358 = null;

            additiveOperator_return additiveOperator359 = null;

            multiplicativeExpression_return multiplicativeExpression360 = null;



            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 111))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:863:4: ( multiplicativeExpression ( additiveOperator multiplicativeExpression )* )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:863:4: multiplicativeExpression ( additiveOperator multiplicativeExpression )*
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    PushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression3763);
                    multiplicativeExpression358 = multiplicativeExpression();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, multiplicativeExpression358.Tree);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:864:3: ( additiveOperator multiplicativeExpression )*
                    do
                    {
                        int alt94 = 2;
                        int LA94_0 = input.LA(1);

                        if ((LA94_0 == MINUS))
                        {
                            switch (input.LA(2))
                            {
                                case INC:
                                    {
                                        int LA94_83 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case DEC:
                                    {
                                        int LA94_84 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case MINUS:
                                    {
                                        int LA94_85 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case PLUS:
                                    {
                                        int LA94_86 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case DELETE:
                                    {
                                        int LA94_87 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case 180:
                                    {
                                        int LA94_88 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case TYPEOF:
                                    {
                                        int LA94_89 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case LNOT:
                                    {
                                        int LA94_90 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case BNOT:
                                    {
                                        int LA94_91 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case UNDEFINED:
                                    {
                                        int LA94_92 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case LT:
                                    {
                                        int LA94_93 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case DIV:
                                    {
                                        int LA94_94 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case HEX_LITERAL:
                                case DECIMAL_LITERAL:
                                case OCTAL_LITERAL:
                                case FLOAT_LITERAL:
                                    {
                                        int LA94_95 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case STRING_LITERAL:
                                    {
                                        int LA94_96 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case TRUE:
                                    {
                                        int LA94_97 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case FALSE:
                                    {
                                        int LA94_98 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case NULL:
                                    {
                                        int LA94_99 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case LBRACK:
                                    {
                                        int LA94_100 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case LCURLY:
                                    {
                                        int LA94_101 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case FUNCTION:
                                    {
                                        int LA94_102 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case NEW:
                                    {
                                        int LA94_103 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case LPAREN:
                                    {
                                        int LA94_104 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case E4X_ATTRI:
                                    {
                                        int LA94_105 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case IDENT:
                                    {
                                        int LA94_106 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case PUBLIC:
                                case PRIVATE:
                                case PROTECTED:
                                case INTERNAL:
                                    {
                                        int LA94_107 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case USE:
                                    {
                                        int LA94_108 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case XML:
                                    {
                                        int LA94_109 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case DYNAMIC:
                                    {
                                        int LA94_110 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case NAMESPACE:
                                    {
                                        int LA94_111 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case IS:
                                    {
                                        int LA94_112 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case AS:
                                    {
                                        int LA94_113 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case GET:
                                    {
                                        int LA94_114 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case SET:
                                    {
                                        int LA94_115 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;

                            }

                        }
                        else if ((LA94_0 == PLUS))
                        {
                            switch (input.LA(2))
                            {
                                case INC:
                                    {
                                        int LA94_116 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case DEC:
                                    {
                                        int LA94_117 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case MINUS:
                                    {
                                        int LA94_118 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case PLUS:
                                    {
                                        int LA94_119 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case DELETE:
                                    {
                                        int LA94_120 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case 180:
                                    {
                                        int LA94_121 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case TYPEOF:
                                    {
                                        int LA94_122 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case LNOT:
                                    {
                                        int LA94_123 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case BNOT:
                                    {
                                        int LA94_124 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case UNDEFINED:
                                    {
                                        int LA94_125 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case LT:
                                    {
                                        int LA94_126 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case DIV:
                                    {
                                        int LA94_127 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case HEX_LITERAL:
                                case DECIMAL_LITERAL:
                                case OCTAL_LITERAL:
                                case FLOAT_LITERAL:
                                    {
                                        int LA94_128 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case STRING_LITERAL:
                                    {
                                        int LA94_129 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case TRUE:
                                    {
                                        int LA94_130 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case FALSE:
                                    {
                                        int LA94_131 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case NULL:
                                    {
                                        int LA94_132 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case LBRACK:
                                    {
                                        int LA94_133 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case LCURLY:
                                    {
                                        int LA94_134 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case FUNCTION:
                                    {
                                        int LA94_135 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case NEW:
                                    {
                                        int LA94_136 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case LPAREN:
                                    {
                                        int LA94_137 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case E4X_ATTRI:
                                    {
                                        int LA94_138 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case IDENT:
                                    {
                                        int LA94_139 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case PUBLIC:
                                case PRIVATE:
                                case PROTECTED:
                                case INTERNAL:
                                    {
                                        int LA94_140 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case USE:
                                    {
                                        int LA94_141 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case XML:
                                    {
                                        int LA94_142 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case DYNAMIC:
                                    {
                                        int LA94_143 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case NAMESPACE:
                                    {
                                        int LA94_144 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case IS:
                                    {
                                        int LA94_145 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case AS:
                                    {
                                        int LA94_146 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case GET:
                                    {
                                        int LA94_147 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;
                                case SET:
                                    {
                                        int LA94_148 = input.LA(3);

                                        if ((synpred160()))
                                        {
                                            alt94 = 1;
                                        }


                                    }
                                    break;

                            }

                        }


                        switch (alt94)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:864:4: additiveOperator multiplicativeExpression
                                {
                                    PushFollow(FOLLOW_additiveOperator_in_additiveExpression3768);
                                    additiveOperator359 = additiveOperator();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(additiveOperator359.Tree, root_0);
                                    PushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression3771);
                                    multiplicativeExpression360 = multiplicativeExpression();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) adaptor.AddChild(root_0, multiplicativeExpression360.Tree);

                                }
                                break;

                            default:
                                goto loop94;
                        }
                    } while (true);

                loop94:
                    ;	// Stops C# compiler whinging that label 'loop94' has no statements


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 111, additiveExpression_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end additiveExpression

        public class additiveOperator_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start additiveOperator
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:867:1: additiveOperator : ( PLUS | MINUS );
        public additiveOperator_return additiveOperator() // throws RecognitionException [1]
        {
            additiveOperator_return retval = new additiveOperator_return();
            retval.start = input.LT(1);
            int additiveOperator_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken set361 = null;

            CommonTree set361_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 112))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:868:4: ( PLUS | MINUS )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    set361 = (IToken)input.LT(1);
                    if ((input.LA(1) >= PLUS && input.LA(1) <= MINUS))
                    {
                        input.Consume();
                        if (backtracking == 0) adaptor.AddChild(root_0, adaptor.Create(set361));
                        errorRecovery = false; failed = false;
                    }
                    else
                    {
                        if (backtracking > 0) { failed = true; return retval; }
                        MismatchedSetException mse =
                            new MismatchedSetException(null, input);
                        RecoverFromMismatchedSet(input, mse, FOLLOW_set_in_additiveOperator0); throw mse;
                    }


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 112, additiveOperator_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end additiveOperator

        public class multiplicativeExpression_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start multiplicativeExpression
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:872:1: multiplicativeExpression : unaryExpression ( multiplicativeOperator unaryExpression )* ;
        public multiplicativeExpression_return multiplicativeExpression() // throws RecognitionException [1]
        {
            multiplicativeExpression_return retval = new multiplicativeExpression_return();
            retval.start = input.LT(1);
            int multiplicativeExpression_StartIndex = input.Index();
            CommonTree root_0 = null;

            unaryExpression_return unaryExpression362 = null;

            multiplicativeOperator_return multiplicativeOperator363 = null;

            unaryExpression_return unaryExpression364 = null;



            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 113))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:873:4: ( unaryExpression ( multiplicativeOperator unaryExpression )* )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:873:4: unaryExpression ( multiplicativeOperator unaryExpression )*
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    PushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression3801);
                    unaryExpression362 = unaryExpression();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, unaryExpression362.Tree);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:874:3: ( multiplicativeOperator unaryExpression )*
                    do
                    {
                        int alt95 = 2;
                        int LA95_0 = input.LA(1);

                        if ((LA95_0 == DIV))
                        {
                            switch (input.LA(2))
                            {
                                case INC:
                                    {
                                        int LA95_84 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case DEC:
                                    {
                                        int LA95_85 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case MINUS:
                                    {
                                        int LA95_86 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case PLUS:
                                    {
                                        int LA95_87 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case DELETE:
                                    {
                                        int LA95_88 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case 180:
                                    {
                                        int LA95_89 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case TYPEOF:
                                    {
                                        int LA95_90 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case LNOT:
                                    {
                                        int LA95_91 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case BNOT:
                                    {
                                        int LA95_92 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case UNDEFINED:
                                    {
                                        int LA95_93 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case LT:
                                    {
                                        int LA95_94 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case DIV:
                                    {
                                        int LA95_95 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case HEX_LITERAL:
                                case DECIMAL_LITERAL:
                                case OCTAL_LITERAL:
                                case FLOAT_LITERAL:
                                    {
                                        int LA95_96 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case STRING_LITERAL:
                                    {
                                        int LA95_97 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case TRUE:
                                    {
                                        int LA95_98 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case FALSE:
                                    {
                                        int LA95_99 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case NULL:
                                    {
                                        int LA95_100 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case LBRACK:
                                    {
                                        int LA95_101 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case LCURLY:
                                    {
                                        int LA95_102 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case FUNCTION:
                                    {
                                        int LA95_103 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case NEW:
                                    {
                                        int LA95_104 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case LPAREN:
                                    {
                                        int LA95_105 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case E4X_ATTRI:
                                    {
                                        int LA95_106 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case IDENT:
                                    {
                                        int LA95_107 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case PUBLIC:
                                case PRIVATE:
                                case PROTECTED:
                                case INTERNAL:
                                    {
                                        int LA95_108 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case USE:
                                    {
                                        int LA95_109 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case XML:
                                    {
                                        int LA95_110 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case DYNAMIC:
                                    {
                                        int LA95_111 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case NAMESPACE:
                                    {
                                        int LA95_112 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case IS:
                                    {
                                        int LA95_113 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case AS:
                                    {
                                        int LA95_114 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case GET:
                                    {
                                        int LA95_115 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;
                                case SET:
                                    {
                                        int LA95_116 = input.LA(3);

                                        if ((synpred162()))
                                        {
                                            alt95 = 1;
                                        }


                                    }
                                    break;

                            }

                        }
                        else if ((LA95_0 == STAR || LA95_0 == MOD))
                        {
                            alt95 = 1;
                        }


                        switch (alt95)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:874:5: multiplicativeOperator unaryExpression
                                {
                                    PushFollow(FOLLOW_multiplicativeOperator_in_multiplicativeExpression3807);
                                    multiplicativeOperator363 = multiplicativeOperator();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(multiplicativeOperator363.Tree, root_0);
                                    PushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression3813);
                                    unaryExpression364 = unaryExpression();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) adaptor.AddChild(root_0, unaryExpression364.Tree);

                                }
                                break;

                            default:
                                goto loop95;
                        }
                    } while (true);

                loop95:
                    ;	// Stops C# compiler whinging that label 'loop95' has no statements


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 113, multiplicativeExpression_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end multiplicativeExpression

        public class multiplicativeOperator_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start multiplicativeOperator
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:879:1: multiplicativeOperator : ( STAR | DIV | MOD );
        public multiplicativeOperator_return multiplicativeOperator() // throws RecognitionException [1]
        {
            multiplicativeOperator_return retval = new multiplicativeOperator_return();
            retval.start = input.LT(1);
            int multiplicativeOperator_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken set365 = null;

            CommonTree set365_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 114))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:880:4: ( STAR | DIV | MOD )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    set365 = (IToken)input.LT(1);
                    if (input.LA(1) == STAR || (input.LA(1) >= DIV && input.LA(1) <= MOD))
                    {
                        input.Consume();
                        if (backtracking == 0) adaptor.AddChild(root_0, adaptor.Create(set365));
                        errorRecovery = false; failed = false;
                    }
                    else
                    {
                        if (backtracking > 0) { failed = true; return retval; }
                        MismatchedSetException mse =
                            new MismatchedSetException(null, input);
                        RecoverFromMismatchedSet(input, mse, FOLLOW_set_in_multiplicativeOperator0); throw mse;
                    }


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 114, multiplicativeOperator_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end multiplicativeOperator

        public class unaryExpression_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start unaryExpression
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:884:1: unaryExpression : (iin= INC unaryExpression -> ^( PRE_INC[$iin] unaryExpression ) | dde= DEC unaryExpression -> ^( PRE_DEC[$dde] unaryExpression ) | MINUS unaryExpression -> ^( UNARY_MINUS unaryExpression ) | PLUS unaryExpression -> ^( UNARY_PLUS unaryExpression ) | unaryExpressionNotPlusMinus );
        public unaryExpression_return unaryExpression() // throws RecognitionException [1]
        {
            unaryExpression_return retval = new unaryExpression_return();
            retval.start = input.LT(1);
            int unaryExpression_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken iin = null;
            IToken dde = null;
            IToken MINUS368 = null;
            IToken PLUS370 = null;
            unaryExpression_return unaryExpression366 = null;

            unaryExpression_return unaryExpression367 = null;

            unaryExpression_return unaryExpression369 = null;

            unaryExpression_return unaryExpression371 = null;

            unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus372 = null;


            CommonTree iin_tree = null;
            CommonTree dde_tree = null;
            CommonTree MINUS368_tree = null;
            CommonTree PLUS370_tree = null;
            RewriteRuleTokenStream stream_PLUS = new RewriteRuleTokenStream(adaptor, "token PLUS");
            RewriteRuleTokenStream stream_INC = new RewriteRuleTokenStream(adaptor, "token INC");
            RewriteRuleTokenStream stream_MINUS = new RewriteRuleTokenStream(adaptor, "token MINUS");
            RewriteRuleTokenStream stream_DEC = new RewriteRuleTokenStream(adaptor, "token DEC");
            RewriteRuleSubtreeStream stream_unaryExpression = new RewriteRuleSubtreeStream(adaptor, "rule unaryExpression");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 115))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:885:4: (iin= INC unaryExpression -> ^( PRE_INC[$iin] unaryExpression ) | dde= DEC unaryExpression -> ^( PRE_DEC[$dde] unaryExpression ) | MINUS unaryExpression -> ^( UNARY_MINUS unaryExpression ) | PLUS unaryExpression -> ^( UNARY_PLUS unaryExpression ) | unaryExpressionNotPlusMinus )
                int alt96 = 5;
                switch (input.LA(1))
                {
                    case INC:
                        {
                            alt96 = 1;
                        }
                        break;
                    case DEC:
                        {
                            alt96 = 2;
                        }
                        break;
                    case MINUS:
                        {
                            alt96 = 3;
                        }
                        break;
                    case PLUS:
                        {
                            alt96 = 4;
                        }
                        break;
                    case LCURLY:
                    case STRING_LITERAL:
                    case FUNCTION:
                    case GET:
                    case SET:
                    case NAMESPACE:
                    case USE:
                    case LPAREN:
                    case XML:
                    case IDENT:
                    case PUBLIC:
                    case PRIVATE:
                    case PROTECTED:
                    case INTERNAL:
                    case LBRACK:
                    case DYNAMIC:
                    case LT:
                    case IS:
                    case AS:
                    case DIV:
                    case DELETE:
                    case TYPEOF:
                    case LNOT:
                    case BNOT:
                    case E4X_ATTRI:
                    case UNDEFINED:
                    case TRUE:
                    case FALSE:
                    case NULL:
                    case HEX_LITERAL:
                    case DECIMAL_LITERAL:
                    case OCTAL_LITERAL:
                    case FLOAT_LITERAL:
                    case NEW:
                    case 180:
                        {
                            alt96 = 5;
                        }
                        break;
                    default:
                        if (backtracking > 0) { failed = true; return retval; }
                        NoViableAltException nvae_d96s0 =
                            new NoViableAltException("884:1: unaryExpression : (iin= INC unaryExpression -> ^( PRE_INC[$iin] unaryExpression ) | dde= DEC unaryExpression -> ^( PRE_DEC[$dde] unaryExpression ) | MINUS unaryExpression -> ^( UNARY_MINUS unaryExpression ) | PLUS unaryExpression -> ^( UNARY_PLUS unaryExpression ) | unaryExpressionNotPlusMinus );", 96, 0, input);

                        throw nvae_d96s0;
                }

                switch (alt96)
                {
                    case 1:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:885:4: iin= INC unaryExpression
                        {
                            iin = (IToken)input.LT(1);
                            Match(input, INC, FOLLOW_INC_in_unaryExpression3851); if (failed) return retval;
                            if (backtracking == 0) stream_INC.Add(iin);

                            PushFollow(FOLLOW_unaryExpression_in_unaryExpression3853);
                            unaryExpression366 = unaryExpression();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) stream_unaryExpression.Add(unaryExpression366.Tree);

                            // AST REWRITE
                            // elements:          unaryExpression
                            // token labels:      
                            // rule labels:       retval
                            // token list labels: 
                            // rule list labels:  
                            if (backtracking == 0)
                            {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                root_0 = (CommonTree)adaptor.GetNilNode();
                                // 885:28: -> ^( PRE_INC[$iin] unaryExpression )
                                {
                                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:885:31: ^( PRE_INC[$iin] unaryExpression )
                                    {
                                        CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                        root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(PRE_INC, iin), root_1);

                                        adaptor.AddChild(root_1, stream_unaryExpression.Next());

                                        adaptor.AddChild(root_0, root_1);
                                    }

                                }

                            }

                        }
                        break;
                    case 2:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:886:4: dde= DEC unaryExpression
                        {
                            dde = (IToken)input.LT(1);
                            Match(input, DEC, FOLLOW_DEC_in_unaryExpression3869); if (failed) return retval;
                            if (backtracking == 0) stream_DEC.Add(dde);

                            PushFollow(FOLLOW_unaryExpression_in_unaryExpression3871);
                            unaryExpression367 = unaryExpression();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) stream_unaryExpression.Add(unaryExpression367.Tree);

                            // AST REWRITE
                            // elements:          unaryExpression
                            // token labels:      
                            // rule labels:       retval
                            // token list labels: 
                            // rule list labels:  
                            if (backtracking == 0)
                            {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                root_0 = (CommonTree)adaptor.GetNilNode();
                                // 886:28: -> ^( PRE_DEC[$dde] unaryExpression )
                                {
                                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:886:31: ^( PRE_DEC[$dde] unaryExpression )
                                    {
                                        CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                        root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(PRE_DEC, dde), root_1);

                                        adaptor.AddChild(root_1, stream_unaryExpression.Next());

                                        adaptor.AddChild(root_0, root_1);
                                    }

                                }

                            }

                        }
                        break;
                    case 3:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:887:4: MINUS unaryExpression
                        {
                            MINUS368 = (IToken)input.LT(1);
                            Match(input, MINUS, FOLLOW_MINUS_in_unaryExpression3885); if (failed) return retval;
                            if (backtracking == 0) stream_MINUS.Add(MINUS368);

                            PushFollow(FOLLOW_unaryExpression_in_unaryExpression3887);
                            unaryExpression369 = unaryExpression();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) stream_unaryExpression.Add(unaryExpression369.Tree);

                            // AST REWRITE
                            // elements:          unaryExpression
                            // token labels:      
                            // rule labels:       retval
                            // token list labels: 
                            // rule list labels:  
                            if (backtracking == 0)
                            {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                root_0 = (CommonTree)adaptor.GetNilNode();
                                // 887:26: -> ^( UNARY_MINUS unaryExpression )
                                {
                                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:887:29: ^( UNARY_MINUS unaryExpression )
                                    {
                                        CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                        root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(UNARY_MINUS, "UNARY_MINUS"), root_1);

                                        adaptor.AddChild(root_1, stream_unaryExpression.Next());

                                        adaptor.AddChild(root_0, root_1);
                                    }

                                }

                            }

                        }
                        break;
                    case 4:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:888:4: PLUS unaryExpression
                        {
                            PLUS370 = (IToken)input.LT(1);
                            Match(input, PLUS, FOLLOW_PLUS_in_unaryExpression3900); if (failed) return retval;
                            if (backtracking == 0) stream_PLUS.Add(PLUS370);

                            PushFollow(FOLLOW_unaryExpression_in_unaryExpression3902);
                            unaryExpression371 = unaryExpression();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) stream_unaryExpression.Add(unaryExpression371.Tree);

                            // AST REWRITE
                            // elements:          unaryExpression
                            // token labels:      
                            // rule labels:       retval
                            // token list labels: 
                            // rule list labels:  
                            if (backtracking == 0)
                            {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                root_0 = (CommonTree)adaptor.GetNilNode();
                                // 888:25: -> ^( UNARY_PLUS unaryExpression )
                                {
                                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:888:28: ^( UNARY_PLUS unaryExpression )
                                    {
                                        CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                        root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(UNARY_PLUS, "UNARY_PLUS"), root_1);

                                        adaptor.AddChild(root_1, stream_unaryExpression.Next());

                                        adaptor.AddChild(root_0, root_1);
                                    }

                                }

                            }

                        }
                        break;
                    case 5:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:889:4: unaryExpressionNotPlusMinus
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression3915);
                            unaryExpressionNotPlusMinus372 = unaryExpressionNotPlusMinus();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, unaryExpressionNotPlusMinus372.Tree);

                        }
                        break;

                }
                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 115, unaryExpression_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end unaryExpression

        public class unaryExpressionNotPlusMinus_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start unaryExpressionNotPlusMinus
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:892:1: unaryExpressionNotPlusMinus : ( DELETE postfixExpression -> ^( DELETE postfixExpression ) | 'void' unaryExpression -> ^( 'void' unaryExpression ) | TYPEOF unaryExpression -> ^( TYPEOF unaryExpression ) | LNOT unaryExpression -> ^( LNOT unaryExpression ) | BNOT unaryExpression -> ^( BNOT unaryExpression ) | postfixExpression );
        public unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() // throws RecognitionException [1]
        {
            unaryExpressionNotPlusMinus_return retval = new unaryExpressionNotPlusMinus_return();
            retval.start = input.LT(1);
            int unaryExpressionNotPlusMinus_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken DELETE373 = null;
            IToken string_literal375 = null;
            IToken TYPEOF377 = null;
            IToken LNOT379 = null;
            IToken BNOT381 = null;
            postfixExpression_return postfixExpression374 = null;

            unaryExpression_return unaryExpression376 = null;

            unaryExpression_return unaryExpression378 = null;

            unaryExpression_return unaryExpression380 = null;

            unaryExpression_return unaryExpression382 = null;

            postfixExpression_return postfixExpression383 = null;


            CommonTree DELETE373_tree = null;
            CommonTree string_literal375_tree = null;
            CommonTree TYPEOF377_tree = null;
            CommonTree LNOT379_tree = null;
            CommonTree BNOT381_tree = null;
            RewriteRuleTokenStream stream_BNOT = new RewriteRuleTokenStream(adaptor, "token BNOT");
            RewriteRuleTokenStream stream_LNOT = new RewriteRuleTokenStream(adaptor, "token LNOT");
            RewriteRuleTokenStream stream_TYPEOF = new RewriteRuleTokenStream(adaptor, "token TYPEOF");
            RewriteRuleTokenStream stream_DELETE = new RewriteRuleTokenStream(adaptor, "token DELETE");
            RewriteRuleTokenStream stream_180 = new RewriteRuleTokenStream(adaptor, "token 180");
            RewriteRuleSubtreeStream stream_unaryExpression = new RewriteRuleSubtreeStream(adaptor, "rule unaryExpression");
            RewriteRuleSubtreeStream stream_postfixExpression = new RewriteRuleSubtreeStream(adaptor, "rule postfixExpression");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 116))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:893:4: ( DELETE postfixExpression -> ^( DELETE postfixExpression ) | 'void' unaryExpression -> ^( 'void' unaryExpression ) | TYPEOF unaryExpression -> ^( TYPEOF unaryExpression ) | LNOT unaryExpression -> ^( LNOT unaryExpression ) | BNOT unaryExpression -> ^( BNOT unaryExpression ) | postfixExpression )
                int alt97 = 6;
                switch (input.LA(1))
                {
                    case DELETE:
                        {
                            alt97 = 1;
                        }
                        break;
                    case 180:
                        {
                            alt97 = 2;
                        }
                        break;
                    case TYPEOF:
                        {
                            alt97 = 3;
                        }
                        break;
                    case LNOT:
                        {
                            alt97 = 4;
                        }
                        break;
                    case BNOT:
                        {
                            alt97 = 5;
                        }
                        break;
                    case LCURLY:
                    case STRING_LITERAL:
                    case FUNCTION:
                    case GET:
                    case SET:
                    case NAMESPACE:
                    case USE:
                    case LPAREN:
                    case XML:
                    case IDENT:
                    case PUBLIC:
                    case PRIVATE:
                    case PROTECTED:
                    case INTERNAL:
                    case LBRACK:
                    case DYNAMIC:
                    case LT:
                    case IS:
                    case AS:
                    case DIV:
                    case E4X_ATTRI:
                    case UNDEFINED:
                    case TRUE:
                    case FALSE:
                    case NULL:
                    case HEX_LITERAL:
                    case DECIMAL_LITERAL:
                    case OCTAL_LITERAL:
                    case FLOAT_LITERAL:
                    case NEW:
                        {
                            alt97 = 6;
                        }
                        break;
                    default:
                        if (backtracking > 0) { failed = true; return retval; }
                        NoViableAltException nvae_d97s0 =
                            new NoViableAltException("892:1: unaryExpressionNotPlusMinus : ( DELETE postfixExpression -> ^( DELETE postfixExpression ) | 'void' unaryExpression -> ^( 'void' unaryExpression ) | TYPEOF unaryExpression -> ^( TYPEOF unaryExpression ) | LNOT unaryExpression -> ^( LNOT unaryExpression ) | BNOT unaryExpression -> ^( BNOT unaryExpression ) | postfixExpression );", 97, 0, input);

                        throw nvae_d97s0;
                }

                switch (alt97)
                {
                    case 1:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:893:4: DELETE postfixExpression
                        {
                            DELETE373 = (IToken)input.LT(1);
                            Match(input, DELETE, FOLLOW_DELETE_in_unaryExpressionNotPlusMinus3926); if (failed) return retval;
                            if (backtracking == 0) stream_DELETE.Add(DELETE373);

                            PushFollow(FOLLOW_postfixExpression_in_unaryExpressionNotPlusMinus3928);
                            postfixExpression374 = postfixExpression();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) stream_postfixExpression.Add(postfixExpression374.Tree);

                            // AST REWRITE
                            // elements:          DELETE, postfixExpression
                            // token labels:      
                            // rule labels:       retval
                            // token list labels: 
                            // rule list labels:  
                            if (backtracking == 0)
                            {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                root_0 = (CommonTree)adaptor.GetNilNode();
                                // 893:29: -> ^( DELETE postfixExpression )
                                {
                                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:893:32: ^( DELETE postfixExpression )
                                    {
                                        CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                        root_1 = (CommonTree)adaptor.BecomeRoot(stream_DELETE.Next(), root_1);

                                        adaptor.AddChild(root_1, stream_postfixExpression.Next());

                                        adaptor.AddChild(root_0, root_1);
                                    }

                                }

                            }

                        }
                        break;
                    case 2:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:894:4: 'void' unaryExpression
                        {
                            string_literal375 = (IToken)input.LT(1);
                            Match(input, 180, FOLLOW_180_in_unaryExpressionNotPlusMinus3941); if (failed) return retval;
                            if (backtracking == 0) stream_180.Add(string_literal375);

                            PushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus3943);
                            unaryExpression376 = unaryExpression();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) stream_unaryExpression.Add(unaryExpression376.Tree);

                            // AST REWRITE
                            // elements:          180, unaryExpression
                            // token labels:      
                            // rule labels:       retval
                            // token list labels: 
                            // rule list labels:  
                            if (backtracking == 0)
                            {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                root_0 = (CommonTree)adaptor.GetNilNode();
                                // 894:27: -> ^( 'void' unaryExpression )
                                {
                                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:894:30: ^( 'void' unaryExpression )
                                    {
                                        CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                        root_1 = (CommonTree)adaptor.BecomeRoot(stream_180.Next(), root_1);

                                        adaptor.AddChild(root_1, stream_unaryExpression.Next());

                                        adaptor.AddChild(root_0, root_1);
                                    }

                                }

                            }

                        }
                        break;
                    case 3:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:895:4: TYPEOF unaryExpression
                        {
                            TYPEOF377 = (IToken)input.LT(1);
                            Match(input, TYPEOF, FOLLOW_TYPEOF_in_unaryExpressionNotPlusMinus3956); if (failed) return retval;
                            if (backtracking == 0) stream_TYPEOF.Add(TYPEOF377);

                            PushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus3958);
                            unaryExpression378 = unaryExpression();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) stream_unaryExpression.Add(unaryExpression378.Tree);

                            // AST REWRITE
                            // elements:          TYPEOF, unaryExpression
                            // token labels:      
                            // rule labels:       retval
                            // token list labels: 
                            // rule list labels:  
                            if (backtracking == 0)
                            {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                root_0 = (CommonTree)adaptor.GetNilNode();
                                // 895:27: -> ^( TYPEOF unaryExpression )
                                {
                                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:895:30: ^( TYPEOF unaryExpression )
                                    {
                                        CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                        root_1 = (CommonTree)adaptor.BecomeRoot(stream_TYPEOF.Next(), root_1);

                                        adaptor.AddChild(root_1, stream_unaryExpression.Next());

                                        adaptor.AddChild(root_0, root_1);
                                    }

                                }

                            }

                        }
                        break;
                    case 4:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:896:4: LNOT unaryExpression
                        {
                            LNOT379 = (IToken)input.LT(1);
                            Match(input, LNOT, FOLLOW_LNOT_in_unaryExpressionNotPlusMinus3971); if (failed) return retval;
                            if (backtracking == 0) stream_LNOT.Add(LNOT379);

                            PushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus3973);
                            unaryExpression380 = unaryExpression();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) stream_unaryExpression.Add(unaryExpression380.Tree);

                            // AST REWRITE
                            // elements:          unaryExpression, LNOT
                            // token labels:      
                            // rule labels:       retval
                            // token list labels: 
                            // rule list labels:  
                            if (backtracking == 0)
                            {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                root_0 = (CommonTree)adaptor.GetNilNode();
                                // 896:25: -> ^( LNOT unaryExpression )
                                {
                                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:896:28: ^( LNOT unaryExpression )
                                    {
                                        CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                        root_1 = (CommonTree)adaptor.BecomeRoot(stream_LNOT.Next(), root_1);

                                        adaptor.AddChild(root_1, stream_unaryExpression.Next());

                                        adaptor.AddChild(root_0, root_1);
                                    }

                                }

                            }

                        }
                        break;
                    case 5:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:897:4: BNOT unaryExpression
                        {
                            BNOT381 = (IToken)input.LT(1);
                            Match(input, BNOT, FOLLOW_BNOT_in_unaryExpressionNotPlusMinus3986); if (failed) return retval;
                            if (backtracking == 0) stream_BNOT.Add(BNOT381);

                            PushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus3988);
                            unaryExpression382 = unaryExpression();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) stream_unaryExpression.Add(unaryExpression382.Tree);

                            // AST REWRITE
                            // elements:          BNOT, unaryExpression
                            // token labels:      
                            // rule labels:       retval
                            // token list labels: 
                            // rule list labels:  
                            if (backtracking == 0)
                            {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                root_0 = (CommonTree)adaptor.GetNilNode();
                                // 897:25: -> ^( BNOT unaryExpression )
                                {
                                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:897:28: ^( BNOT unaryExpression )
                                    {
                                        CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                        root_1 = (CommonTree)adaptor.BecomeRoot(stream_BNOT.Next(), root_1);

                                        adaptor.AddChild(root_1, stream_unaryExpression.Next());

                                        adaptor.AddChild(root_0, root_1);
                                    }

                                }

                            }

                        }
                        break;
                    case 6:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:898:4: postfixExpression
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_postfixExpression_in_unaryExpressionNotPlusMinus4001);
                            postfixExpression383 = postfixExpression();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, postfixExpression383.Tree);

                        }
                        break;

                }
                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 116, unaryExpressionNotPlusMinus_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end unaryExpressionNotPlusMinus

        public class postfixExpression_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start postfixExpression
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:902:1: postfixExpression : ( primaryExpression -> primaryExpression ) (poi= propOrIdent[root_0, retval.start] -> $poi | DOT e4xExpression | LBRACK expression RBRACK -> ^( ARRAY_ACC $postfixExpression expression ) | E4X_DESC e4xExpression | arguments -> ^( METHOD_CALL $postfixExpression arguments ) )* (iin= INC -> ^( POST_INC[$iin] $postfixExpression) | dde= DEC -> ^( POST_DEC[$dde] $postfixExpression) )? ;
        public postfixExpression_return postfixExpression() // throws RecognitionException [1]
        {
            postfixExpression_return retval = new postfixExpression_return();
            retval.start = input.LT(1);
            int postfixExpression_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken iin = null;
            IToken dde = null;
            IToken DOT385 = null;
            IToken LBRACK387 = null;
            IToken RBRACK389 = null;
            IToken E4X_DESC390 = null;
            propOrIdent_return poi = null;

            primaryExpression_return primaryExpression384 = null;

            e4xExpression_return e4xExpression386 = null;

            expression_return expression388 = null;

            e4xExpression_return e4xExpression391 = null;

            arguments_return arguments392 = null;


            CommonTree iin_tree = null;
            CommonTree dde_tree = null;
            CommonTree DOT385_tree = null;
            CommonTree LBRACK387_tree = null;
            CommonTree RBRACK389_tree = null;
            CommonTree E4X_DESC390_tree = null;
            RewriteRuleTokenStream stream_LBRACK = new RewriteRuleTokenStream(adaptor, "token LBRACK");
            RewriteRuleTokenStream stream_E4X_DESC = new RewriteRuleTokenStream(adaptor, "token E4X_DESC");
            RewriteRuleTokenStream stream_INC = new RewriteRuleTokenStream(adaptor, "token INC");
            RewriteRuleTokenStream stream_RBRACK = new RewriteRuleTokenStream(adaptor, "token RBRACK");
            RewriteRuleTokenStream stream_DEC = new RewriteRuleTokenStream(adaptor, "token DEC");
            RewriteRuleTokenStream stream_DOT = new RewriteRuleTokenStream(adaptor, "token DOT");
            RewriteRuleSubtreeStream stream_arguments = new RewriteRuleSubtreeStream(adaptor, "rule arguments");
            RewriteRuleSubtreeStream stream_e4xExpression = new RewriteRuleSubtreeStream(adaptor, "rule e4xExpression");
            RewriteRuleSubtreeStream stream_primaryExpression = new RewriteRuleSubtreeStream(adaptor, "rule primaryExpression");
            RewriteRuleSubtreeStream stream_propOrIdent = new RewriteRuleSubtreeStream(adaptor, "rule propOrIdent");
            RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor, "rule expression");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 117))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:903:4: ( ( primaryExpression -> primaryExpression ) (poi= propOrIdent[root_0, retval.start] -> $poi | DOT e4xExpression | LBRACK expression RBRACK -> ^( ARRAY_ACC $postfixExpression expression ) | E4X_DESC e4xExpression | arguments -> ^( METHOD_CALL $postfixExpression arguments ) )* (iin= INC -> ^( POST_INC[$iin] $postfixExpression) | dde= DEC -> ^( POST_DEC[$dde] $postfixExpression) )? )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:903:4: ( primaryExpression -> primaryExpression ) (poi= propOrIdent[root_0, retval.start] -> $poi | DOT e4xExpression | LBRACK expression RBRACK -> ^( ARRAY_ACC $postfixExpression expression ) | E4X_DESC e4xExpression | arguments -> ^( METHOD_CALL $postfixExpression arguments ) )* (iin= INC -> ^( POST_INC[$iin] $postfixExpression) | dde= DEC -> ^( POST_DEC[$dde] $postfixExpression) )?
                {
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:903:4: ( primaryExpression -> primaryExpression )
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:903:5: primaryExpression
                    {
                        PushFollow(FOLLOW_primaryExpression_in_postfixExpression4014);
                        primaryExpression384 = primaryExpression();
                        followingStackPointer_--;
                        if (failed) return retval;
                        if (backtracking == 0) stream_primaryExpression.Add(primaryExpression384.Tree);

                        // AST REWRITE
                        // elements:          primaryExpression
                        // token labels:      
                        // rule labels:       retval
                        // token list labels: 
                        // rule list labels:  
                        if (backtracking == 0)
                        {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                            root_0 = (CommonTree)adaptor.GetNilNode();
                            // 903:23: -> primaryExpression
                            {
                                adaptor.AddChild(root_0, stream_primaryExpression.Next());

                            }

                        }

                    }

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:904:3: (poi= propOrIdent[root_0, retval.start] -> $poi | DOT e4xExpression | LBRACK expression RBRACK -> ^( ARRAY_ACC $postfixExpression expression ) | E4X_DESC e4xExpression | arguments -> ^( METHOD_CALL $postfixExpression arguments ) )*
                    do
                    {
                        int alt98 = 6;
                        switch (input.LA(1))
                        {
                            case LBRACK:
                                {
                                    switch (input.LA(2))
                                    {
                                        case INC:
                                            {
                                                int LA98_86 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case DEC:
                                            {
                                                int LA98_87 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case MINUS:
                                            {
                                                int LA98_88 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case PLUS:
                                            {
                                                int LA98_89 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case DELETE:
                                            {
                                                int LA98_90 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case 180:
                                            {
                                                int LA98_91 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case TYPEOF:
                                            {
                                                int LA98_92 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case LNOT:
                                            {
                                                int LA98_93 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case BNOT:
                                            {
                                                int LA98_94 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case UNDEFINED:
                                            {
                                                int LA98_95 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case LT:
                                            {
                                                int LA98_96 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case DIV:
                                            {
                                                int LA98_97 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case HEX_LITERAL:
                                        case DECIMAL_LITERAL:
                                        case OCTAL_LITERAL:
                                        case FLOAT_LITERAL:
                                            {
                                                int LA98_98 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case STRING_LITERAL:
                                            {
                                                int LA98_99 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case TRUE:
                                            {
                                                int LA98_100 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case FALSE:
                                            {
                                                int LA98_101 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case NULL:
                                            {
                                                int LA98_102 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case LBRACK:
                                            {
                                                int LA98_103 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case LCURLY:
                                            {
                                                int LA98_104 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case FUNCTION:
                                            {
                                                int LA98_105 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case NEW:
                                            {
                                                int LA98_106 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case LPAREN:
                                            {
                                                int LA98_107 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case E4X_ATTRI:
                                            {
                                                int LA98_108 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case IDENT:
                                            {
                                                int LA98_109 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case PUBLIC:
                                        case PRIVATE:
                                        case PROTECTED:
                                        case INTERNAL:
                                            {
                                                int LA98_110 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case USE:
                                            {
                                                int LA98_111 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case XML:
                                            {
                                                int LA98_112 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case DYNAMIC:
                                            {
                                                int LA98_113 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case NAMESPACE:
                                            {
                                                int LA98_114 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case IS:
                                            {
                                                int LA98_115 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case AS:
                                            {
                                                int LA98_116 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case GET:
                                            {
                                                int LA98_117 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;
                                        case SET:
                                            {
                                                int LA98_118 = input.LA(3);

                                                if ((synpred176()))
                                                {
                                                    alt98 = 3;
                                                }


                                            }
                                            break;

                                    }

                                }
                                break;
                            case LPAREN:
                                {
                                    switch (input.LA(2))
                                    {
                                        case RPAREN:
                                            {
                                                alt98 = 5;
                                            }
                                            break;
                                        case INC:
                                            {
                                                int LA98_121 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case DEC:
                                            {
                                                int LA98_122 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case MINUS:
                                            {
                                                int LA98_123 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case PLUS:
                                            {
                                                int LA98_124 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case DELETE:
                                            {
                                                int LA98_125 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case 180:
                                            {
                                                int LA98_126 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case TYPEOF:
                                            {
                                                int LA98_127 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case LNOT:
                                            {
                                                int LA98_128 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case BNOT:
                                            {
                                                int LA98_129 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case UNDEFINED:
                                            {
                                                int LA98_130 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case LT:
                                            {
                                                int LA98_131 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case DIV:
                                            {
                                                int LA98_132 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case HEX_LITERAL:
                                        case DECIMAL_LITERAL:
                                        case OCTAL_LITERAL:
                                        case FLOAT_LITERAL:
                                            {
                                                int LA98_133 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case STRING_LITERAL:
                                            {
                                                int LA98_134 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case TRUE:
                                            {
                                                int LA98_135 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case FALSE:
                                            {
                                                int LA98_136 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case NULL:
                                            {
                                                int LA98_137 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case LBRACK:
                                            {
                                                int LA98_138 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case LCURLY:
                                            {
                                                int LA98_139 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case FUNCTION:
                                            {
                                                int LA98_140 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case NEW:
                                            {
                                                int LA98_141 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case LPAREN:
                                            {
                                                int LA98_142 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case E4X_ATTRI:
                                            {
                                                int LA98_143 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case IDENT:
                                            {
                                                int LA98_144 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case PUBLIC:
                                        case PRIVATE:
                                        case PROTECTED:
                                        case INTERNAL:
                                            {
                                                int LA98_145 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case USE:
                                            {
                                                int LA98_146 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case XML:
                                            {
                                                int LA98_147 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case DYNAMIC:
                                            {
                                                int LA98_148 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case NAMESPACE:
                                            {
                                                int LA98_149 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case IS:
                                            {
                                                int LA98_150 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case AS:
                                            {
                                                int LA98_151 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case GET:
                                            {
                                                int LA98_152 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;
                                        case SET:
                                            {
                                                int LA98_153 = input.LA(3);

                                                if ((synpred178()))
                                                {
                                                    alt98 = 5;
                                                }


                                            }
                                            break;

                                    }

                                }
                                break;
                            case DOT:
                                {
                                    int LA98_84 = input.LA(2);

                                    if ((LA98_84 == LPAREN || LA98_84 == STAR || LA98_84 == E4X_ATTRI))
                                    {
                                        alt98 = 2;
                                    }
                                    else if (((LA98_84 >= GET && LA98_84 <= USE) || LA98_84 == XML || (LA98_84 >= IDENT && LA98_84 <= INTERNAL) || LA98_84 == DYNAMIC || (LA98_84 >= IS && LA98_84 <= AS)))
                                    {
                                        alt98 = 1;
                                    }


                                }
                                break;
                            case E4X_DESC:
                                {
                                    alt98 = 4;
                                }
                                break;

                        }

                        switch (alt98)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:904:5: poi= propOrIdent[root_0, retval.start]
                                {
                                    PushFollow(FOLLOW_propOrIdent_in_postfixExpression4027);
                                    poi = propOrIdent(root_0, retval.start);
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) stream_propOrIdent.Add(poi.Tree);

                                    // AST REWRITE
                                    // elements:          poi
                                    // token labels:      
                                    // rule labels:       retval, poi
                                    // token list labels: 
                                    // rule list labels:  
                                    if (backtracking == 0)
                                    {
                                        retval.tree = root_0;
                                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));
                                        RewriteRuleSubtreeStream stream_poi = new RewriteRuleSubtreeStream(adaptor, "token poi", (poi != null ? poi.Tree : null));

                                        root_0 = (CommonTree)adaptor.GetNilNode();
                                        // 904:43: -> $poi
                                        {
                                            adaptor.AddChild(root_0, stream_poi.Next());

                                        }

                                    }

                                }
                                break;
                            case 2:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:905:5: DOT e4xExpression
                                {
                                    DOT385 = (IToken)input.LT(1);
                                    Match(input, DOT, FOLLOW_DOT_in_postfixExpression4039); if (failed) return retval;
                                    if (backtracking == 0) stream_DOT.Add(DOT385);

                                    PushFollow(FOLLOW_e4xExpression_in_postfixExpression4041);
                                    e4xExpression386 = e4xExpression();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) stream_e4xExpression.Add(e4xExpression386.Tree);

                                }
                                break;
                            case 3:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:906:5: LBRACK expression RBRACK
                                {
                                    LBRACK387 = (IToken)input.LT(1);
                                    Match(input, LBRACK, FOLLOW_LBRACK_in_postfixExpression4047); if (failed) return retval;
                                    if (backtracking == 0) stream_LBRACK.Add(LBRACK387);

                                    PushFollow(FOLLOW_expression_in_postfixExpression4049);
                                    expression388 = expression();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) stream_expression.Add(expression388.Tree);
                                    RBRACK389 = (IToken)input.LT(1);
                                    Match(input, RBRACK, FOLLOW_RBRACK_in_postfixExpression4051); if (failed) return retval;
                                    if (backtracking == 0) stream_RBRACK.Add(RBRACK389);


                                    // AST REWRITE
                                    // elements:          postfixExpression, expression
                                    // token labels:      
                                    // rule labels:       retval
                                    // token list labels: 
                                    // rule list labels:  
                                    if (backtracking == 0)
                                    {
                                        retval.tree = root_0;
                                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                        root_0 = (CommonTree)adaptor.GetNilNode();
                                        // 906:30: -> ^( ARRAY_ACC $postfixExpression expression )
                                        {
                                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:906:33: ^( ARRAY_ACC $postfixExpression expression )
                                            {
                                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(ARRAY_ACC, "ARRAY_ACC"), root_1);

                                                adaptor.AddChild(root_1, stream_retval.Next());
                                                adaptor.AddChild(root_1, stream_expression.Next());

                                                adaptor.AddChild(root_0, root_1);
                                            }

                                        }

                                    }

                                }
                                break;
                            case 4:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:907:5: E4X_DESC e4xExpression
                                {
                                    E4X_DESC390 = (IToken)input.LT(1);
                                    Match(input, E4X_DESC, FOLLOW_E4X_DESC_in_postfixExpression4068); if (failed) return retval;
                                    if (backtracking == 0) stream_E4X_DESC.Add(E4X_DESC390);

                                    PushFollow(FOLLOW_e4xExpression_in_postfixExpression4070);
                                    e4xExpression391 = e4xExpression();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) stream_e4xExpression.Add(e4xExpression391.Tree);

                                }
                                break;
                            case 5:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:908:5: arguments
                                {
                                    PushFollow(FOLLOW_arguments_in_postfixExpression4076);
                                    arguments392 = arguments();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) stream_arguments.Add(arguments392.Tree);

                                    // AST REWRITE
                                    // elements:          postfixExpression, arguments
                                    // token labels:      
                                    // rule labels:       retval
                                    // token list labels: 
                                    // rule list labels:  
                                    if (backtracking == 0)
                                    {
                                        retval.tree = root_0;
                                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                        root_0 = (CommonTree)adaptor.GetNilNode();
                                        // 908:15: -> ^( METHOD_CALL $postfixExpression arguments )
                                        {
                                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:908:18: ^( METHOD_CALL $postfixExpression arguments )
                                            {
                                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(METHOD_CALL, "METHOD_CALL"), root_1);

                                                adaptor.AddChild(root_1, stream_retval.Next());
                                                adaptor.AddChild(root_1, stream_arguments.Next());

                                                adaptor.AddChild(root_0, root_1);
                                            }

                                        }

                                    }

                                }
                                break;

                            default:
                                goto loop98;
                        }
                    } while (true);

                loop98:
                    ;	// Stops C# compiler whinging that label 'loop98' has no statements

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:911:3: (iin= INC -> ^( POST_INC[$iin] $postfixExpression) | dde= DEC -> ^( POST_DEC[$dde] $postfixExpression) )?
                    int alt99 = 3;
                    int LA99_0 = input.LA(1);

                    if ((LA99_0 == INC))
                    {
                        switch (input.LA(2))
                        {
                            case INC:
                                {
                                    int LA99_84 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case DEC:
                                {
                                    int LA99_85 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case MINUS:
                                {
                                    int LA99_86 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case PLUS:
                                {
                                    int LA99_87 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case DELETE:
                                {
                                    int LA99_88 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case 180:
                                {
                                    int LA99_89 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case TYPEOF:
                                {
                                    int LA99_90 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case LNOT:
                                {
                                    int LA99_91 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case BNOT:
                                {
                                    int LA99_92 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case UNDEFINED:
                                {
                                    int LA99_93 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case LT:
                                {
                                    int LA99_94 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case DIV:
                                {
                                    int LA99_95 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case HEX_LITERAL:
                            case DECIMAL_LITERAL:
                            case OCTAL_LITERAL:
                            case FLOAT_LITERAL:
                                {
                                    int LA99_96 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case STRING_LITERAL:
                                {
                                    int LA99_97 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case TRUE:
                                {
                                    int LA99_98 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case FALSE:
                                {
                                    int LA99_99 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case NULL:
                                {
                                    int LA99_100 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case LBRACK:
                                {
                                    int LA99_101 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case LCURLY:
                                {
                                    int LA99_102 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case FUNCTION:
                                {
                                    int LA99_103 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case NEW:
                                {
                                    int LA99_104 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case LPAREN:
                                {
                                    int LA99_105 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case E4X_ATTRI:
                                {
                                    int LA99_106 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case IDENT:
                                {
                                    int LA99_107 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case PUBLIC:
                            case PRIVATE:
                            case PROTECTED:
                            case INTERNAL:
                                {
                                    int LA99_108 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case USE:
                                {
                                    int LA99_109 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case XML:
                                {
                                    int LA99_110 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case DYNAMIC:
                                {
                                    int LA99_111 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case NAMESPACE:
                                {
                                    int LA99_112 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case IS:
                                {
                                    int LA99_113 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case AS:
                                {
                                    int LA99_114 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case GET:
                                {
                                    int LA99_115 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case SET:
                                {
                                    int LA99_116 = input.LA(3);

                                    if ((synpred179()))
                                    {
                                        alt99 = 1;
                                    }
                                }
                                break;
                            case EOF:
                            case RCURLY:
                            case SEMI:
                            case IMPORT:
                            case CLASS:
                            case INTERFACE:
                            case COMMA:
                            case INCLUDE_DIRECTIVE:
                            case VAR:
                            case CONST:
                            case ASSIGN:
                            case RPAREN:
                            case IF:
                            case ELSE:
                            case RETURN:
                            case CONTINUE:
                            case BREAK:
                            case SWITCH:
                            case CASE:
                            case COLON:
                            case DEFAULT:
                            case FOR:
                            case IN:
                            case WHILE:
                            case DO:
                            case WITH:
                            case STAR:
                            case RBRACK:
                            case STATIC:
                            case STAR_ASSIGN:
                            case DIV_ASSIGN:
                            case MOD_ASSIGN:
                            case PLUS_ASSIGN:
                            case MINUS_ASSIGN:
                            case SL_ASSIGN:
                            case SR_ASSIGN:
                            case BSR_ASSIGN:
                            case BAND_ASSIGN:
                            case BXOR_ASSIGN:
                            case BOR_ASSIGN:
                            case LAND_ASSIGN:
                            case LOR_ASSIGN:
                            case QUESTION:
                            case LOR:
                            case LAND:
                            case BOR:
                            case BXOR:
                            case BAND:
                            case STRICT_EQUAL:
                            case STRICT_NOT_EQUAL:
                            case NOT_EQUAL:
                            case EQUAL:
                            case GT:
                            case LE:
                            case GE:
                            case INSTANCEOF:
                            case SL:
                            case SR:
                            case BSR:
                            case MOD:
                            case SL_COMMENT:
                            case ML_COMMENT:
                            case 175:
                            case 176:
                            case 177:
                            case 181:
                            case 182:
                            case 183:
                            case 184:
                            case 185:
                            case 186:
                            case 187:
                                {
                                    alt99 = 1;
                                }
                                break;
                        }

                    }
                    else if ((LA99_0 == DEC))
                    {
                        switch (input.LA(2))
                        {
                            case INC:
                                {
                                    int LA99_167 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case DEC:
                                {
                                    int LA99_168 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case MINUS:
                                {
                                    int LA99_169 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case PLUS:
                                {
                                    int LA99_170 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case DELETE:
                                {
                                    int LA99_171 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case 180:
                                {
                                    int LA99_172 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case TYPEOF:
                                {
                                    int LA99_173 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case LNOT:
                                {
                                    int LA99_174 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case BNOT:
                                {
                                    int LA99_175 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case UNDEFINED:
                                {
                                    int LA99_176 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case LT:
                                {
                                    int LA99_177 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case DIV:
                                {
                                    int LA99_178 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case HEX_LITERAL:
                            case DECIMAL_LITERAL:
                            case OCTAL_LITERAL:
                            case FLOAT_LITERAL:
                                {
                                    int LA99_179 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case STRING_LITERAL:
                                {
                                    int LA99_180 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case TRUE:
                                {
                                    int LA99_181 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case FALSE:
                                {
                                    int LA99_182 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case NULL:
                                {
                                    int LA99_183 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case LBRACK:
                                {
                                    int LA99_184 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case LCURLY:
                                {
                                    int LA99_185 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case FUNCTION:
                                {
                                    int LA99_186 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case NEW:
                                {
                                    int LA99_187 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case LPAREN:
                                {
                                    int LA99_188 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case E4X_ATTRI:
                                {
                                    int LA99_189 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case IDENT:
                                {
                                    int LA99_190 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case PUBLIC:
                            case PRIVATE:
                            case PROTECTED:
                            case INTERNAL:
                                {
                                    int LA99_191 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case USE:
                                {
                                    int LA99_192 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case XML:
                                {
                                    int LA99_193 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case DYNAMIC:
                                {
                                    int LA99_194 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case NAMESPACE:
                                {
                                    int LA99_195 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case IS:
                                {
                                    int LA99_196 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case AS:
                                {
                                    int LA99_197 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case GET:
                                {
                                    int LA99_198 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case SET:
                                {
                                    int LA99_199 = input.LA(3);

                                    if ((synpred180()))
                                    {
                                        alt99 = 2;
                                    }
                                }
                                break;
                            case EOF:
                            case RCURLY:
                            case SEMI:
                            case IMPORT:
                            case CLASS:
                            case INTERFACE:
                            case COMMA:
                            case INCLUDE_DIRECTIVE:
                            case VAR:
                            case CONST:
                            case ASSIGN:
                            case RPAREN:
                            case IF:
                            case ELSE:
                            case RETURN:
                            case CONTINUE:
                            case BREAK:
                            case SWITCH:
                            case CASE:
                            case COLON:
                            case DEFAULT:
                            case FOR:
                            case IN:
                            case WHILE:
                            case DO:
                            case WITH:
                            case STAR:
                            case RBRACK:
                            case STATIC:
                            case STAR_ASSIGN:
                            case DIV_ASSIGN:
                            case MOD_ASSIGN:
                            case PLUS_ASSIGN:
                            case MINUS_ASSIGN:
                            case SL_ASSIGN:
                            case SR_ASSIGN:
                            case BSR_ASSIGN:
                            case BAND_ASSIGN:
                            case BXOR_ASSIGN:
                            case BOR_ASSIGN:
                            case LAND_ASSIGN:
                            case LOR_ASSIGN:
                            case QUESTION:
                            case LOR:
                            case LAND:
                            case BOR:
                            case BXOR:
                            case BAND:
                            case STRICT_EQUAL:
                            case STRICT_NOT_EQUAL:
                            case NOT_EQUAL:
                            case EQUAL:
                            case GT:
                            case LE:
                            case GE:
                            case INSTANCEOF:
                            case SL:
                            case SR:
                            case BSR:
                            case MOD:
                            case SL_COMMENT:
                            case ML_COMMENT:
                            case 175:
                            case 176:
                            case 177:
                            case 181:
                            case 182:
                            case 183:
                            case 184:
                            case 185:
                            case 186:
                            case 187:
                                {
                                    alt99 = 2;
                                }
                                break;
                        }

                    }
                    switch (alt99)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:911:6: iin= INC
                            {
                                iin = (IToken)input.LT(1);
                                Match(input, INC, FOLLOW_INC_in_postfixExpression4102); if (failed) return retval;
                                if (backtracking == 0) stream_INC.Add(iin);


                                // AST REWRITE
                                // elements:          postfixExpression
                                // token labels:      
                                // rule labels:       retval
                                // token list labels: 
                                // rule list labels:  
                                if (backtracking == 0)
                                {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                    root_0 = (CommonTree)adaptor.GetNilNode();
                                    // 911:14: -> ^( POST_INC[$iin] $postfixExpression)
                                    {
                                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:911:17: ^( POST_INC[$iin] $postfixExpression)
                                        {
                                            CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                            root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(POST_INC, iin), root_1);

                                            adaptor.AddChild(root_1, stream_retval.Next());

                                            adaptor.AddChild(root_0, root_1);
                                        }

                                    }

                                }

                            }
                            break;
                        case 2:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:912:6: dde= DEC
                            {
                                dde = (IToken)input.LT(1);
                                Match(input, DEC, FOLLOW_DEC_in_postfixExpression4121); if (failed) return retval;
                                if (backtracking == 0) stream_DEC.Add(dde);


                                // AST REWRITE
                                // elements:          postfixExpression
                                // token labels:      
                                // rule labels:       retval
                                // token list labels: 
                                // rule list labels:  
                                if (backtracking == 0)
                                {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                    root_0 = (CommonTree)adaptor.GetNilNode();
                                    // 912:14: -> ^( POST_DEC[$dde] $postfixExpression)
                                    {
                                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:912:17: ^( POST_DEC[$dde] $postfixExpression)
                                        {
                                            CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                            root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(POST_DEC, dde), root_1);

                                            adaptor.AddChild(root_1, stream_retval.Next());

                                            adaptor.AddChild(root_0, root_1);
                                        }

                                    }

                                }

                            }
                            break;

                    }


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 117, postfixExpression_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end postfixExpression

        public class e4xExpression_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start e4xExpression
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:916:1: e4xExpression : ( STAR | e4xAttributeIdentifier | e4xFilterPredicate );
        public e4xExpression_return e4xExpression() // throws RecognitionException [1]
        {
            e4xExpression_return retval = new e4xExpression_return();
            retval.start = input.LT(1);
            int e4xExpression_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken STAR393 = null;
            e4xAttributeIdentifier_return e4xAttributeIdentifier394 = null;

            e4xFilterPredicate_return e4xFilterPredicate395 = null;


            CommonTree STAR393_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 118))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:917:4: ( STAR | e4xAttributeIdentifier | e4xFilterPredicate )
                int alt100 = 3;
                switch (input.LA(1))
                {
                    case STAR:
                        {
                            alt100 = 1;
                        }
                        break;
                    case E4X_ATTRI:
                        {
                            alt100 = 2;
                        }
                        break;
                    case LPAREN:
                        {
                            alt100 = 3;
                        }
                        break;
                    default:
                        if (backtracking > 0) { failed = true; return retval; }
                        NoViableAltException nvae_d100s0 =
                            new NoViableAltException("916:1: e4xExpression : ( STAR | e4xAttributeIdentifier | e4xFilterPredicate );", 100, 0, input);

                        throw nvae_d100s0;
                }

                switch (alt100)
                {
                    case 1:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:917:4: STAR
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            STAR393 = (IToken)input.LT(1);
                            Match(input, STAR, FOLLOW_STAR_in_e4xExpression4148); if (failed) return retval;
                            if (backtracking == 0)
                            {
                                STAR393_tree = (CommonTree)adaptor.Create(STAR393);
                                root_0 = (CommonTree)adaptor.BecomeRoot(STAR393_tree, root_0);
                            }

                        }
                        break;
                    case 2:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:918:4: e4xAttributeIdentifier
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_e4xAttributeIdentifier_in_e4xExpression4154);
                            e4xAttributeIdentifier394 = e4xAttributeIdentifier();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, e4xAttributeIdentifier394.Tree);

                        }
                        break;
                    case 3:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:919:4: e4xFilterPredicate
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_e4xFilterPredicate_in_e4xExpression4159);
                            e4xFilterPredicate395 = e4xFilterPredicate();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, e4xFilterPredicate395.Tree);

                        }
                        break;

                }
                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 118, e4xExpression_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end e4xExpression

        public class e4xAttributeIdentifier_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start e4xAttributeIdentifier
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:922:1: e4xAttributeIdentifier : E4X_ATTRI ( qualifiedIdent | STAR | LBRACK expression RBRACK ) ;
        public e4xAttributeIdentifier_return e4xAttributeIdentifier() // throws RecognitionException [1]
        {
            e4xAttributeIdentifier_return retval = new e4xAttributeIdentifier_return();
            retval.start = input.LT(1);
            int e4xAttributeIdentifier_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken E4X_ATTRI396 = null;
            IToken STAR398 = null;
            IToken LBRACK399 = null;
            IToken RBRACK401 = null;
            qualifiedIdent_return qualifiedIdent397 = null;

            expression_return expression400 = null;


            CommonTree E4X_ATTRI396_tree = null;
            CommonTree STAR398_tree = null;
            CommonTree LBRACK399_tree = null;
            CommonTree RBRACK401_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 119))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:923:4: ( E4X_ATTRI ( qualifiedIdent | STAR | LBRACK expression RBRACK ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:923:4: E4X_ATTRI ( qualifiedIdent | STAR | LBRACK expression RBRACK )
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    E4X_ATTRI396 = (IToken)input.LT(1);
                    Match(input, E4X_ATTRI, FOLLOW_E4X_ATTRI_in_e4xAttributeIdentifier4170); if (failed) return retval;
                    if (backtracking == 0)
                    {
                        E4X_ATTRI396_tree = (CommonTree)adaptor.Create(E4X_ATTRI396);
                        adaptor.AddChild(root_0, E4X_ATTRI396_tree);
                    }
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:924:3: ( qualifiedIdent | STAR | LBRACK expression RBRACK )
                    int alt101 = 3;
                    switch (input.LA(1))
                    {
                        case GET:
                        case SET:
                        case NAMESPACE:
                        case USE:
                        case XML:
                        case IDENT:
                        case PUBLIC:
                        case PRIVATE:
                        case PROTECTED:
                        case INTERNAL:
                        case DYNAMIC:
                        case IS:
                        case AS:
                            {
                                alt101 = 1;
                            }
                            break;
                        case STAR:
                            {
                                alt101 = 2;
                            }
                            break;
                        case LBRACK:
                            {
                                alt101 = 3;
                            }
                            break;
                        default:
                            if (backtracking > 0) { failed = true; return retval; }
                            NoViableAltException nvae_d101s0 =
                                new NoViableAltException("924:3: ( qualifiedIdent | STAR | LBRACK expression RBRACK )", 101, 0, input);

                            throw nvae_d101s0;
                    }

                    switch (alt101)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:924:5: qualifiedIdent
                            {
                                PushFollow(FOLLOW_qualifiedIdent_in_e4xAttributeIdentifier4176);
                                qualifiedIdent397 = qualifiedIdent();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) adaptor.AddChild(root_0, qualifiedIdent397.Tree);

                            }
                            break;
                        case 2:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:925:5: STAR
                            {
                                STAR398 = (IToken)input.LT(1);
                                Match(input, STAR, FOLLOW_STAR_in_e4xAttributeIdentifier4182); if (failed) return retval;
                                if (backtracking == 0)
                                {
                                    STAR398_tree = (CommonTree)adaptor.Create(STAR398);
                                    adaptor.AddChild(root_0, STAR398_tree);
                                }

                            }
                            break;
                        case 3:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:926:5: LBRACK expression RBRACK
                            {
                                LBRACK399 = (IToken)input.LT(1);
                                Match(input, LBRACK, FOLLOW_LBRACK_in_e4xAttributeIdentifier4188); if (failed) return retval;
                                if (backtracking == 0)
                                {
                                    LBRACK399_tree = (CommonTree)adaptor.Create(LBRACK399);
                                    adaptor.AddChild(root_0, LBRACK399_tree);
                                }
                                PushFollow(FOLLOW_expression_in_e4xAttributeIdentifier4190);
                                expression400 = expression();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) adaptor.AddChild(root_0, expression400.Tree);
                                RBRACK401 = (IToken)input.LT(1);
                                Match(input, RBRACK, FOLLOW_RBRACK_in_e4xAttributeIdentifier4192); if (failed) return retval;
                                if (backtracking == 0)
                                {
                                    RBRACK401_tree = (CommonTree)adaptor.Create(RBRACK401);
                                    adaptor.AddChild(root_0, RBRACK401_tree);
                                }

                            }
                            break;

                    }


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 119, e4xAttributeIdentifier_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end e4xAttributeIdentifier

        public class e4xFilterPredicate_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start e4xFilterPredicate
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:930:1: e4xFilterPredicate : LPAREN expression RPAREN ;
        public e4xFilterPredicate_return e4xFilterPredicate() // throws RecognitionException [1]
        {
            e4xFilterPredicate_return retval = new e4xFilterPredicate_return();
            retval.start = input.LT(1);
            int e4xFilterPredicate_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken LPAREN402 = null;
            IToken RPAREN404 = null;
            expression_return expression403 = null;


            CommonTree LPAREN402_tree = null;
            CommonTree RPAREN404_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 120))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:931:4: ( LPAREN expression RPAREN )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:931:4: LPAREN expression RPAREN
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    LPAREN402 = (IToken)input.LT(1);
                    Match(input, LPAREN, FOLLOW_LPAREN_in_e4xFilterPredicate4207); if (failed) return retval;
                    PushFollow(FOLLOW_expression_in_e4xFilterPredicate4212);
                    expression403 = expression();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, expression403.Tree);
                    RPAREN404 = (IToken)input.LT(1);
                    Match(input, RPAREN, FOLLOW_RPAREN_in_e4xFilterPredicate4216); if (failed) return retval;

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 120, e4xFilterPredicate_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end e4xFilterPredicate

        public class primaryExpression_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start primaryExpression
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:936:1: primaryExpression : ( UNDEFINED | constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | newShortExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );
        public primaryExpression_return primaryExpression() // throws RecognitionException [1]
        {
            primaryExpression_return retval = new primaryExpression_return();
            retval.start = input.LT(1);
            int primaryExpression_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken UNDEFINED405 = null;
            constant_return constant406 = null;

            arrayLiteral_return arrayLiteral407 = null;

            objectLiteral_return objectLiteral408 = null;

            functionDefinition_return functionDefinition409 = null;

            newFullExpression_return newFullExpression410 = null;

            newShortExpression_return newShortExpression411 = null;

            encapsulatedExpression_return encapsulatedExpression412 = null;

            e4xAttributeIdentifier_return e4xAttributeIdentifier413 = null;

            qualifiedIdent_return qualifiedIdent414 = null;


            CommonTree UNDEFINED405_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 121))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:937:4: ( UNDEFINED | constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | newShortExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent )
                int alt102 = 10;
                switch (input.LA(1))
                {
                    case UNDEFINED:
                        {
                            alt102 = 1;
                        }
                        break;
                    case STRING_LITERAL:
                    case LT:
                    case DIV:
                    case TRUE:
                    case FALSE:
                    case NULL:
                    case HEX_LITERAL:
                    case DECIMAL_LITERAL:
                    case OCTAL_LITERAL:
                    case FLOAT_LITERAL:
                        {
                            alt102 = 2;
                        }
                        break;
                    case LBRACK:
                        {
                            alt102 = 3;
                        }
                        break;
                    case LCURLY:
                        {
                            alt102 = 4;
                        }
                        break;
                    case FUNCTION:
                        {
                            alt102 = 5;
                        }
                        break;
                    case NEW:
                        {
                            switch (input.LA(2))
                            {
                                case UNDEFINED:
                                    {
                                        int LA102_25 = input.LA(3);

                                        if ((synpred190()))
                                        {
                                            alt102 = 6;
                                        }
                                        else if ((synpred191()))
                                        {
                                            alt102 = 7;
                                        }
                                        else
                                        {
                                            if (backtracking > 0) { failed = true; return retval; }
                                            NoViableAltException nvae_d102s25 =
                                                new NoViableAltException("936:1: primaryExpression : ( UNDEFINED | constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | newShortExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );", 102, 25, input);

                                            throw nvae_d102s25;
                                        }
                                    }
                                    break;
                                case LT:
                                    {
                                        int LA102_26 = input.LA(3);

                                        if ((synpred190()))
                                        {
                                            alt102 = 6;
                                        }
                                        else if ((synpred191()))
                                        {
                                            alt102 = 7;
                                        }
                                        else
                                        {
                                            if (backtracking > 0) { failed = true; return retval; }
                                            NoViableAltException nvae_d102s26 =
                                                new NoViableAltException("936:1: primaryExpression : ( UNDEFINED | constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | newShortExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );", 102, 26, input);

                                            throw nvae_d102s26;
                                        }
                                    }
                                    break;
                                case DIV:
                                    {
                                        int LA102_27 = input.LA(3);

                                        if ((synpred190()))
                                        {
                                            alt102 = 6;
                                        }
                                        else if ((synpred191()))
                                        {
                                            alt102 = 7;
                                        }
                                        else
                                        {
                                            if (backtracking > 0) { failed = true; return retval; }
                                            NoViableAltException nvae_d102s27 =
                                                new NoViableAltException("936:1: primaryExpression : ( UNDEFINED | constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | newShortExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );", 102, 27, input);

                                            throw nvae_d102s27;
                                        }
                                    }
                                    break;
                                case HEX_LITERAL:
                                case DECIMAL_LITERAL:
                                case OCTAL_LITERAL:
                                case FLOAT_LITERAL:
                                    {
                                        int LA102_28 = input.LA(3);

                                        if ((synpred190()))
                                        {
                                            alt102 = 6;
                                        }
                                        else if ((synpred191()))
                                        {
                                            alt102 = 7;
                                        }
                                        else
                                        {
                                            if (backtracking > 0) { failed = true; return retval; }
                                            NoViableAltException nvae_d102s28 =
                                                new NoViableAltException("936:1: primaryExpression : ( UNDEFINED | constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | newShortExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );", 102, 28, input);

                                            throw nvae_d102s28;
                                        }
                                    }
                                    break;
                                case STRING_LITERAL:
                                    {
                                        int LA102_29 = input.LA(3);

                                        if ((synpred190()))
                                        {
                                            alt102 = 6;
                                        }
                                        else if ((synpred191()))
                                        {
                                            alt102 = 7;
                                        }
                                        else
                                        {
                                            if (backtracking > 0) { failed = true; return retval; }
                                            NoViableAltException nvae_d102s29 =
                                                new NoViableAltException("936:1: primaryExpression : ( UNDEFINED | constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | newShortExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );", 102, 29, input);

                                            throw nvae_d102s29;
                                        }
                                    }
                                    break;
                                case TRUE:
                                    {
                                        int LA102_30 = input.LA(3);

                                        if ((synpred190()))
                                        {
                                            alt102 = 6;
                                        }
                                        else if ((synpred191()))
                                        {
                                            alt102 = 7;
                                        }
                                        else
                                        {
                                            if (backtracking > 0) { failed = true; return retval; }
                                            NoViableAltException nvae_d102s30 =
                                                new NoViableAltException("936:1: primaryExpression : ( UNDEFINED | constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | newShortExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );", 102, 30, input);

                                            throw nvae_d102s30;
                                        }
                                    }
                                    break;
                                case FALSE:
                                    {
                                        int LA102_31 = input.LA(3);

                                        if ((synpred190()))
                                        {
                                            alt102 = 6;
                                        }
                                        else if ((synpred191()))
                                        {
                                            alt102 = 7;
                                        }
                                        else
                                        {
                                            if (backtracking > 0) { failed = true; return retval; }
                                            NoViableAltException nvae_d102s31 =
                                                new NoViableAltException("936:1: primaryExpression : ( UNDEFINED | constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | newShortExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );", 102, 31, input);

                                            throw nvae_d102s31;
                                        }
                                    }
                                    break;
                                case NULL:
                                    {
                                        int LA102_32 = input.LA(3);

                                        if ((synpred190()))
                                        {
                                            alt102 = 6;
                                        }
                                        else if ((synpred191()))
                                        {
                                            alt102 = 7;
                                        }
                                        else
                                        {
                                            if (backtracking > 0) { failed = true; return retval; }
                                            NoViableAltException nvae_d102s32 =
                                                new NoViableAltException("936:1: primaryExpression : ( UNDEFINED | constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | newShortExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );", 102, 32, input);

                                            throw nvae_d102s32;
                                        }
                                    }
                                    break;
                                case LBRACK:
                                    {
                                        int LA102_33 = input.LA(3);

                                        if ((synpred190()))
                                        {
                                            alt102 = 6;
                                        }
                                        else if ((synpred191()))
                                        {
                                            alt102 = 7;
                                        }
                                        else
                                        {
                                            if (backtracking > 0) { failed = true; return retval; }
                                            NoViableAltException nvae_d102s33 =
                                                new NoViableAltException("936:1: primaryExpression : ( UNDEFINED | constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | newShortExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );", 102, 33, input);

                                            throw nvae_d102s33;
                                        }
                                    }
                                    break;
                                case LCURLY:
                                    {
                                        int LA102_34 = input.LA(3);

                                        if ((synpred190()))
                                        {
                                            alt102 = 6;
                                        }
                                        else if ((synpred191()))
                                        {
                                            alt102 = 7;
                                        }
                                        else
                                        {
                                            if (backtracking > 0) { failed = true; return retval; }
                                            NoViableAltException nvae_d102s34 =
                                                new NoViableAltException("936:1: primaryExpression : ( UNDEFINED | constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | newShortExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );", 102, 34, input);

                                            throw nvae_d102s34;
                                        }
                                    }
                                    break;
                                case FUNCTION:
                                    {
                                        int LA102_35 = input.LA(3);

                                        if ((synpred190()))
                                        {
                                            alt102 = 6;
                                        }
                                        else if ((synpred191()))
                                        {
                                            alt102 = 7;
                                        }
                                        else
                                        {
                                            if (backtracking > 0) { failed = true; return retval; }
                                            NoViableAltException nvae_d102s35 =
                                                new NoViableAltException("936:1: primaryExpression : ( UNDEFINED | constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | newShortExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );", 102, 35, input);

                                            throw nvae_d102s35;
                                        }
                                    }
                                    break;
                                case NEW:
                                    {
                                        int LA102_36 = input.LA(3);

                                        if ((synpred190()))
                                        {
                                            alt102 = 6;
                                        }
                                        else if ((synpred191()))
                                        {
                                            alt102 = 7;
                                        }
                                        else
                                        {
                                            if (backtracking > 0) { failed = true; return retval; }
                                            NoViableAltException nvae_d102s36 =
                                                new NoViableAltException("936:1: primaryExpression : ( UNDEFINED | constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | newShortExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );", 102, 36, input);

                                            throw nvae_d102s36;
                                        }
                                    }
                                    break;
                                case LPAREN:
                                    {
                                        int LA102_37 = input.LA(3);

                                        if ((synpred190()))
                                        {
                                            alt102 = 6;
                                        }
                                        else if ((synpred191()))
                                        {
                                            alt102 = 7;
                                        }
                                        else
                                        {
                                            if (backtracking > 0) { failed = true; return retval; }
                                            NoViableAltException nvae_d102s37 =
                                                new NoViableAltException("936:1: primaryExpression : ( UNDEFINED | constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | newShortExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );", 102, 37, input);

                                            throw nvae_d102s37;
                                        }
                                    }
                                    break;
                                case E4X_ATTRI:
                                    {
                                        int LA102_38 = input.LA(3);

                                        if ((synpred190()))
                                        {
                                            alt102 = 6;
                                        }
                                        else if ((synpred191()))
                                        {
                                            alt102 = 7;
                                        }
                                        else
                                        {
                                            if (backtracking > 0) { failed = true; return retval; }
                                            NoViableAltException nvae_d102s38 =
                                                new NoViableAltException("936:1: primaryExpression : ( UNDEFINED | constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | newShortExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );", 102, 38, input);

                                            throw nvae_d102s38;
                                        }
                                    }
                                    break;
                                case IDENT:
                                    {
                                        int LA102_39 = input.LA(3);

                                        if ((synpred190()))
                                        {
                                            alt102 = 6;
                                        }
                                        else if ((synpred191()))
                                        {
                                            alt102 = 7;
                                        }
                                        else
                                        {
                                            if (backtracking > 0) { failed = true; return retval; }
                                            NoViableAltException nvae_d102s39 =
                                                new NoViableAltException("936:1: primaryExpression : ( UNDEFINED | constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | newShortExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );", 102, 39, input);

                                            throw nvae_d102s39;
                                        }
                                    }
                                    break;
                                case PUBLIC:
                                case PRIVATE:
                                case PROTECTED:
                                case INTERNAL:
                                    {
                                        int LA102_40 = input.LA(3);

                                        if ((synpred190()))
                                        {
                                            alt102 = 6;
                                        }
                                        else if ((synpred191()))
                                        {
                                            alt102 = 7;
                                        }
                                        else
                                        {
                                            if (backtracking > 0) { failed = true; return retval; }
                                            NoViableAltException nvae_d102s40 =
                                                new NoViableAltException("936:1: primaryExpression : ( UNDEFINED | constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | newShortExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );", 102, 40, input);

                                            throw nvae_d102s40;
                                        }
                                    }
                                    break;
                                case USE:
                                    {
                                        int LA102_41 = input.LA(3);

                                        if ((synpred190()))
                                        {
                                            alt102 = 6;
                                        }
                                        else if ((synpred191()))
                                        {
                                            alt102 = 7;
                                        }
                                        else
                                        {
                                            if (backtracking > 0) { failed = true; return retval; }
                                            NoViableAltException nvae_d102s41 =
                                                new NoViableAltException("936:1: primaryExpression : ( UNDEFINED | constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | newShortExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );", 102, 41, input);

                                            throw nvae_d102s41;
                                        }
                                    }
                                    break;
                                case XML:
                                    {
                                        int LA102_42 = input.LA(3);

                                        if ((synpred190()))
                                        {
                                            alt102 = 6;
                                        }
                                        else if ((synpred191()))
                                        {
                                            alt102 = 7;
                                        }
                                        else
                                        {
                                            if (backtracking > 0) { failed = true; return retval; }
                                            NoViableAltException nvae_d102s42 =
                                                new NoViableAltException("936:1: primaryExpression : ( UNDEFINED | constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | newShortExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );", 102, 42, input);

                                            throw nvae_d102s42;
                                        }
                                    }
                                    break;
                                case DYNAMIC:
                                    {
                                        int LA102_43 = input.LA(3);

                                        if ((synpred190()))
                                        {
                                            alt102 = 6;
                                        }
                                        else if ((synpred191()))
                                        {
                                            alt102 = 7;
                                        }
                                        else
                                        {
                                            if (backtracking > 0) { failed = true; return retval; }
                                            NoViableAltException nvae_d102s43 =
                                                new NoViableAltException("936:1: primaryExpression : ( UNDEFINED | constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | newShortExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );", 102, 43, input);

                                            throw nvae_d102s43;
                                        }
                                    }
                                    break;
                                case NAMESPACE:
                                    {
                                        int LA102_44 = input.LA(3);

                                        if ((synpred190()))
                                        {
                                            alt102 = 6;
                                        }
                                        else if ((synpred191()))
                                        {
                                            alt102 = 7;
                                        }
                                        else
                                        {
                                            if (backtracking > 0) { failed = true; return retval; }
                                            NoViableAltException nvae_d102s44 =
                                                new NoViableAltException("936:1: primaryExpression : ( UNDEFINED | constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | newShortExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );", 102, 44, input);

                                            throw nvae_d102s44;
                                        }
                                    }
                                    break;
                                case IS:
                                    {
                                        int LA102_45 = input.LA(3);

                                        if ((synpred190()))
                                        {
                                            alt102 = 6;
                                        }
                                        else if ((synpred191()))
                                        {
                                            alt102 = 7;
                                        }
                                        else
                                        {
                                            if (backtracking > 0) { failed = true; return retval; }
                                            NoViableAltException nvae_d102s45 =
                                                new NoViableAltException("936:1: primaryExpression : ( UNDEFINED | constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | newShortExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );", 102, 45, input);

                                            throw nvae_d102s45;
                                        }
                                    }
                                    break;
                                case AS:
                                    {
                                        int LA102_46 = input.LA(3);

                                        if ((synpred190()))
                                        {
                                            alt102 = 6;
                                        }
                                        else if ((synpred191()))
                                        {
                                            alt102 = 7;
                                        }
                                        else
                                        {
                                            if (backtracking > 0) { failed = true; return retval; }
                                            NoViableAltException nvae_d102s46 =
                                                new NoViableAltException("936:1: primaryExpression : ( UNDEFINED | constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | newShortExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );", 102, 46, input);

                                            throw nvae_d102s46;
                                        }
                                    }
                                    break;
                                case GET:
                                    {
                                        int LA102_47 = input.LA(3);

                                        if ((synpred190()))
                                        {
                                            alt102 = 6;
                                        }
                                        else if ((synpred191()))
                                        {
                                            alt102 = 7;
                                        }
                                        else
                                        {
                                            if (backtracking > 0) { failed = true; return retval; }
                                            NoViableAltException nvae_d102s47 =
                                                new NoViableAltException("936:1: primaryExpression : ( UNDEFINED | constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | newShortExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );", 102, 47, input);

                                            throw nvae_d102s47;
                                        }
                                    }
                                    break;
                                case SET:
                                    {
                                        int LA102_48 = input.LA(3);

                                        if ((synpred190()))
                                        {
                                            alt102 = 6;
                                        }
                                        else if ((synpred191()))
                                        {
                                            alt102 = 7;
                                        }
                                        else
                                        {
                                            if (backtracking > 0) { failed = true; return retval; }
                                            NoViableAltException nvae_d102s48 =
                                                new NoViableAltException("936:1: primaryExpression : ( UNDEFINED | constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | newShortExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );", 102, 48, input);

                                            throw nvae_d102s48;
                                        }
                                    }
                                    break;
                                default:
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d102s12 =
                                        new NoViableAltException("936:1: primaryExpression : ( UNDEFINED | constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | newShortExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );", 102, 12, input);

                                    throw nvae_d102s12;
                            }

                        }
                        break;
                    case LPAREN:
                        {
                            alt102 = 8;
                        }
                        break;
                    case E4X_ATTRI:
                        {
                            alt102 = 9;
                        }
                        break;
                    case GET:
                    case SET:
                    case NAMESPACE:
                    case USE:
                    case XML:
                    case IDENT:
                    case PUBLIC:
                    case PRIVATE:
                    case PROTECTED:
                    case INTERNAL:
                    case DYNAMIC:
                    case IS:
                    case AS:
                        {
                            alt102 = 10;
                        }
                        break;
                    default:
                        if (backtracking > 0) { failed = true; return retval; }
                        NoViableAltException nvae_d102s0 =
                            new NoViableAltException("936:1: primaryExpression : ( UNDEFINED | constant | arrayLiteral | objectLiteral | functionDefinition | newFullExpression | newShortExpression | encapsulatedExpression | e4xAttributeIdentifier | qualifiedIdent );", 102, 0, input);

                        throw nvae_d102s0;
                }

                switch (alt102)
                {
                    case 1:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:937:4: UNDEFINED
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            UNDEFINED405 = (IToken)input.LT(1);
                            Match(input, UNDEFINED, FOLLOW_UNDEFINED_in_primaryExpression4228); if (failed) return retval;
                            if (backtracking == 0)
                            {
                                UNDEFINED405_tree = (CommonTree)adaptor.Create(UNDEFINED405);
                                adaptor.AddChild(root_0, UNDEFINED405_tree);
                            }

                        }
                        break;
                    case 2:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:938:4: constant
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_constant_in_primaryExpression4233);
                            constant406 = constant();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, constant406.Tree);

                        }
                        break;
                    case 3:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:939:4: arrayLiteral
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_arrayLiteral_in_primaryExpression4238);
                            arrayLiteral407 = arrayLiteral();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, arrayLiteral407.Tree);

                        }
                        break;
                    case 4:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:940:4: objectLiteral
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_objectLiteral_in_primaryExpression4243);
                            objectLiteral408 = objectLiteral();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, objectLiteral408.Tree);

                        }
                        break;
                    case 5:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:941:4: functionDefinition
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_functionDefinition_in_primaryExpression4248);
                            functionDefinition409 = functionDefinition();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, functionDefinition409.Tree);

                        }
                        break;
                    case 6:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:942:4: newFullExpression
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_newFullExpression_in_primaryExpression4253);
                            newFullExpression410 = newFullExpression();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, newFullExpression410.Tree);

                        }
                        break;
                    case 7:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:943:4: newShortExpression
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_newShortExpression_in_primaryExpression4258);
                            newShortExpression411 = newShortExpression();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, newShortExpression411.Tree);

                        }
                        break;
                    case 8:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:944:4: encapsulatedExpression
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_encapsulatedExpression_in_primaryExpression4263);
                            encapsulatedExpression412 = encapsulatedExpression();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, encapsulatedExpression412.Tree);

                        }
                        break;
                    case 9:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:945:4: e4xAttributeIdentifier
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_e4xAttributeIdentifier_in_primaryExpression4268);
                            e4xAttributeIdentifier413 = e4xAttributeIdentifier();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, e4xAttributeIdentifier413.Tree);

                        }
                        break;
                    case 10:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:946:4: qualifiedIdent
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_qualifiedIdent_in_primaryExpression4273);
                            qualifiedIdent414 = qualifiedIdent();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, qualifiedIdent414.Tree);

                        }
                        break;

                }
                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 121, primaryExpression_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end primaryExpression

        public class propOrIdent_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start propOrIdent
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:950:1: propOrIdent[CommonTree identPrimary, IToken startToken] : DOT propId= qualifiedIdent -> ^( PROPERTY_OR_IDENTIFIER $propId) ;
        public propOrIdent_return propOrIdent(CommonTree identPrimary, IToken startToken) // throws RecognitionException [1]
        {
            propOrIdent_return retval = new propOrIdent_return();
            retval.start = input.LT(1);
            int propOrIdent_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken DOT415 = null;
            qualifiedIdent_return propId = null;


            CommonTree DOT415_tree = null;
            RewriteRuleTokenStream stream_DOT = new RewriteRuleTokenStream(adaptor, "token DOT");
            RewriteRuleSubtreeStream stream_qualifiedIdent = new RewriteRuleSubtreeStream(adaptor, "rule qualifiedIdent");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 122))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:952:3: ( DOT propId= qualifiedIdent -> ^( PROPERTY_OR_IDENTIFIER $propId) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:952:3: DOT propId= qualifiedIdent
                {
                    if (backtracking == 0)
                    {
                        retval.start = startToken;
                    }
                    DOT415 = (IToken)input.LT(1);
                    Match(input, DOT, FOLLOW_DOT_in_propOrIdent4293); if (failed) return retval;
                    if (backtracking == 0) stream_DOT.Add(DOT415);

                    PushFollow(FOLLOW_qualifiedIdent_in_propOrIdent4297);
                    propId = qualifiedIdent();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_qualifiedIdent.Add(propId.Tree);

                    // AST REWRITE
                    // elements:          propId
                    // token labels:      
                    // rule labels:       propId, retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_propId = new RewriteRuleSubtreeStream(adaptor, "token propId", (propId != null ? propId.Tree : null));
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 959:3: -> ^( PROPERTY_OR_IDENTIFIER $propId)
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:959:6: ^( PROPERTY_OR_IDENTIFIER $propId)
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(PROPERTY_OR_IDENTIFIER, "PROPERTY_OR_IDENTIFIER"), root_1);

                                adaptor.AddChild(root_1, identPrimary);
                                adaptor.AddChild(root_1, stream_propId.Next());

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 122, propOrIdent_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end propOrIdent

        public class constant_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start constant
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:962:1: constant : ( xmlLiteral | regexpLiteral | number | STRING_LITERAL | TRUE | FALSE | NULL );
        public constant_return constant() // throws RecognitionException [1]
        {
            constant_return retval = new constant_return();
            retval.start = input.LT(1);
            int constant_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken STRING_LITERAL419 = null;
            IToken TRUE420 = null;
            IToken FALSE421 = null;
            IToken NULL422 = null;
            xmlLiteral_return xmlLiteral416 = null;

            regexpLiteral_return regexpLiteral417 = null;

            number_return number418 = null;


            CommonTree STRING_LITERAL419_tree = null;
            CommonTree TRUE420_tree = null;
            CommonTree FALSE421_tree = null;
            CommonTree NULL422_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 123))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:963:4: ( xmlLiteral | regexpLiteral | number | STRING_LITERAL | TRUE | FALSE | NULL )
                int alt103 = 7;
                switch (input.LA(1))
                {
                    case LT:
                        {
                            alt103 = 1;
                        }
                        break;
                    case DIV:
                        {
                            alt103 = 2;
                        }
                        break;
                    case HEX_LITERAL:
                    case DECIMAL_LITERAL:
                    case OCTAL_LITERAL:
                    case FLOAT_LITERAL:
                        {
                            alt103 = 3;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                            alt103 = 4;
                        }
                        break;
                    case TRUE:
                        {
                            alt103 = 5;
                        }
                        break;
                    case FALSE:
                        {
                            alt103 = 6;
                        }
                        break;
                    case NULL:
                        {
                            alt103 = 7;
                        }
                        break;
                    default:
                        if (backtracking > 0) { failed = true; return retval; }
                        NoViableAltException nvae_d103s0 =
                            new NoViableAltException("962:1: constant : ( xmlLiteral | regexpLiteral | number | STRING_LITERAL | TRUE | FALSE | NULL );", 103, 0, input);

                        throw nvae_d103s0;
                }

                switch (alt103)
                {
                    case 1:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:963:4: xmlLiteral
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_xmlLiteral_in_constant4325);
                            xmlLiteral416 = xmlLiteral();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, xmlLiteral416.Tree);

                        }
                        break;
                    case 2:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:964:4: regexpLiteral
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_regexpLiteral_in_constant4330);
                            regexpLiteral417 = regexpLiteral();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, regexpLiteral417.Tree);

                        }
                        break;
                    case 3:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:965:4: number
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_number_in_constant4335);
                            number418 = number();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, number418.Tree);

                        }
                        break;
                    case 4:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:966:4: STRING_LITERAL
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            STRING_LITERAL419 = (IToken)input.LT(1);
                            Match(input, STRING_LITERAL, FOLLOW_STRING_LITERAL_in_constant4340); if (failed) return retval;
                            if (backtracking == 0)
                            {
                                STRING_LITERAL419_tree = (CommonTree)adaptor.Create(STRING_LITERAL419);
                                adaptor.AddChild(root_0, STRING_LITERAL419_tree);
                            }

                        }
                        break;
                    case 5:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:967:4: TRUE
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            TRUE420 = (IToken)input.LT(1);
                            Match(input, TRUE, FOLLOW_TRUE_in_constant4345); if (failed) return retval;
                            if (backtracking == 0)
                            {
                                TRUE420_tree = (CommonTree)adaptor.Create(TRUE420);
                                adaptor.AddChild(root_0, TRUE420_tree);
                            }

                        }
                        break;
                    case 6:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:968:4: FALSE
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            FALSE421 = (IToken)input.LT(1);
                            Match(input, FALSE, FOLLOW_FALSE_in_constant4350); if (failed) return retval;
                            if (backtracking == 0)
                            {
                                FALSE421_tree = (CommonTree)adaptor.Create(FALSE421);
                                adaptor.AddChild(root_0, FALSE421_tree);
                            }

                        }
                        break;
                    case 7:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:969:4: NULL
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            NULL422 = (IToken)input.LT(1);
                            Match(input, NULL, FOLLOW_NULL_in_constant4355); if (failed) return retval;
                            if (backtracking == 0)
                            {
                                NULL422_tree = (CommonTree)adaptor.Create(NULL422);
                                adaptor.AddChild(root_0, NULL422_tree);
                            }

                        }
                        break;

                }
                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 123, constant_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end constant

        public class number_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start number
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:972:1: number : ( HEX_LITERAL | DECIMAL_LITERAL | OCTAL_LITERAL | FLOAT_LITERAL );
        public number_return number() // throws RecognitionException [1]
        {
            number_return retval = new number_return();
            retval.start = input.LT(1);
            int number_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken set423 = null;

            CommonTree set423_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 124))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:972:10: ( HEX_LITERAL | DECIMAL_LITERAL | OCTAL_LITERAL | FLOAT_LITERAL )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    set423 = (IToken)input.LT(1);
                    if ((input.LA(1) >= HEX_LITERAL && input.LA(1) <= FLOAT_LITERAL))
                    {
                        input.Consume();
                        if (backtracking == 0) adaptor.AddChild(root_0, adaptor.Create(set423));
                        errorRecovery = false; failed = false;
                    }
                    else
                    {
                        if (backtracking > 0) { failed = true; return retval; }
                        MismatchedSetException mse =
                            new MismatchedSetException(null, input);
                        RecoverFromMismatchedSet(input, mse, FOLLOW_set_in_number0); throw mse;
                    }


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 124, number_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end number

        public class xmlLiteral_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start xmlLiteral
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:979:1: xmlLiteral : LT ->;
        public xmlLiteral_return xmlLiteral() // throws RecognitionException [1]
        {
            xmlLiteral_return retval = new xmlLiteral_return();
            retval.start = input.LT(1);
            int xmlLiteral_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken LT424 = null;

            CommonTree LT424_tree = null;
            RewriteRuleTokenStream stream_LT = new RewriteRuleTokenStream(adaptor, "token LT");


            CommonTree xml = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 125))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:986:3: ( LT ->)
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:986:3: LT
                {
                    LT424 = (IToken)input.LT(1);
                    Match(input, LT, FOLLOW_LT_in_xmlLiteral4408); if (failed) return retval;
                    if (backtracking == 0) stream_LT.Add(LT424);

                    if (backtracking == 0)
                    {
                        /*xml=parseXMLLiteral();*/
                    }

                    // AST REWRITE
                    // elements:          
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 988:3: ->
                        {
                            adaptor.AddChild(root_0, xml);

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 125, xmlLiteral_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end xmlLiteral

        public class regexpLiteral_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start regexpLiteral
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:992:1: regexpLiteral : s= DIV -> ^() ;
        public regexpLiteral_return regexpLiteral() // throws RecognitionException [1]
        {
            regexpLiteral_return retval = new regexpLiteral_return();
            retval.start = input.LT(1);
            int regexpLiteral_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken s = null;

            CommonTree s_tree = null;
            RewriteRuleTokenStream stream_DIV = new RewriteRuleTokenStream(adaptor, "token DIV");


            CommonTree regexp = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 126))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:996:4: (s= DIV -> ^() )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:996:4: s= DIV
                {
                    s = (IToken)input.LT(1);
                    Match(input, DIV, FOLLOW_DIV_in_regexpLiteral4438); if (failed) return retval;
                    if (backtracking == 0) stream_DIV.Add(s);

                    if (backtracking == 0)
                    {
                        /*regexp=parseRegexpLiteral((LinkedListToken)s);*/
                    }

                    // AST REWRITE
                    // elements:          
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 997:3: -> ^()
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:997:6: ^()
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(regexp, root_1);

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 126, regexpLiteral_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end regexpLiteral

        public class newFullExpression_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start newFullExpression
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1000:1: newFullExpression : NEW fullNewSubexpression arguments ;
        public newFullExpression_return newFullExpression() // throws RecognitionException [1]
        {
            newFullExpression_return retval = new newFullExpression_return();
            retval.start = input.LT(1);
            int newFullExpression_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken NEW425 = null;
            fullNewSubexpression_return fullNewSubexpression426 = null;

            arguments_return arguments427 = null;


            CommonTree NEW425_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 127))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1001:4: ( NEW fullNewSubexpression arguments )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1001:4: NEW fullNewSubexpression arguments
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    NEW425 = (IToken)input.LT(1);
                    Match(input, NEW, FOLLOW_NEW_in_newFullExpression4459); if (failed) return retval;
                    if (backtracking == 0)
                    {
                        NEW425_tree = (CommonTree)adaptor.Create(NEW425);
                        root_0 = (CommonTree)adaptor.BecomeRoot(NEW425_tree, root_0);
                    }
                    PushFollow(FOLLOW_fullNewSubexpression_in_newFullExpression4462);
                    fullNewSubexpression426 = fullNewSubexpression();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, fullNewSubexpression426.Tree);
                    PushFollow(FOLLOW_arguments_in_newFullExpression4464);
                    arguments427 = arguments();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, arguments427.Tree);

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 127, newFullExpression_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end newFullExpression

        public class fullNewSubexpression_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start fullNewSubexpression
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1004:1: fullNewSubexpression : ( primaryExpression -> primaryExpression ) ( DOT qualifiedIdent -> ^( DOT $fullNewSubexpression qualifiedIdent ) | brackets -> ^( ARRAY_ACC $fullNewSubexpression brackets ) )* ;
        public fullNewSubexpression_return fullNewSubexpression() // throws RecognitionException [1]
        {
            fullNewSubexpression_return retval = new fullNewSubexpression_return();
            retval.start = input.LT(1);
            int fullNewSubexpression_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken DOT429 = null;
            primaryExpression_return primaryExpression428 = null;

            qualifiedIdent_return qualifiedIdent430 = null;

            brackets_return brackets431 = null;


            CommonTree DOT429_tree = null;
            RewriteRuleTokenStream stream_DOT = new RewriteRuleTokenStream(adaptor, "token DOT");
            RewriteRuleSubtreeStream stream_primaryExpression = new RewriteRuleSubtreeStream(adaptor, "rule primaryExpression");
            RewriteRuleSubtreeStream stream_brackets = new RewriteRuleSubtreeStream(adaptor, "rule brackets");
            RewriteRuleSubtreeStream stream_qualifiedIdent = new RewriteRuleSubtreeStream(adaptor, "rule qualifiedIdent");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 128))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1005:4: ( ( primaryExpression -> primaryExpression ) ( DOT qualifiedIdent -> ^( DOT $fullNewSubexpression qualifiedIdent ) | brackets -> ^( ARRAY_ACC $fullNewSubexpression brackets ) )* )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1005:4: ( primaryExpression -> primaryExpression ) ( DOT qualifiedIdent -> ^( DOT $fullNewSubexpression qualifiedIdent ) | brackets -> ^( ARRAY_ACC $fullNewSubexpression brackets ) )*
                {
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1005:4: ( primaryExpression -> primaryExpression )
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1005:6: primaryExpression
                    {
                        PushFollow(FOLLOW_primaryExpression_in_fullNewSubexpression4477);
                        primaryExpression428 = primaryExpression();
                        followingStackPointer_--;
                        if (failed) return retval;
                        if (backtracking == 0) stream_primaryExpression.Add(primaryExpression428.Tree);

                        // AST REWRITE
                        // elements:          primaryExpression
                        // token labels:      
                        // rule labels:       retval
                        // token list labels: 
                        // rule list labels:  
                        if (backtracking == 0)
                        {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                            root_0 = (CommonTree)adaptor.GetNilNode();
                            // 1005:24: -> primaryExpression
                            {
                                adaptor.AddChild(root_0, stream_primaryExpression.Next());

                            }

                        }

                    }

                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1007:3: ( DOT qualifiedIdent -> ^( DOT $fullNewSubexpression qualifiedIdent ) | brackets -> ^( ARRAY_ACC $fullNewSubexpression brackets ) )*
                    do
                    {
                        int alt104 = 3;
                        int LA104_0 = input.LA(1);

                        if ((LA104_0 == DOT))
                        {
                            int LA104_2 = input.LA(2);

                            if ((synpred203()))
                            {
                                alt104 = 1;
                            }


                        }
                        else if ((LA104_0 == LBRACK))
                        {
                            int LA104_3 = input.LA(2);

                            if ((synpred204()))
                            {
                                alt104 = 2;
                            }


                        }


                        switch (alt104)
                        {
                            case 1:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1007:5: DOT qualifiedIdent
                                {
                                    DOT429 = (IToken)input.LT(1);
                                    Match(input, DOT, FOLLOW_DOT_in_fullNewSubexpression4491); if (failed) return retval;
                                    if (backtracking == 0) stream_DOT.Add(DOT429);

                                    PushFollow(FOLLOW_qualifiedIdent_in_fullNewSubexpression4493);
                                    qualifiedIdent430 = qualifiedIdent();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) stream_qualifiedIdent.Add(qualifiedIdent430.Tree);

                                    // AST REWRITE
                                    // elements:          fullNewSubexpression, qualifiedIdent, DOT
                                    // token labels:      
                                    // rule labels:       retval
                                    // token list labels: 
                                    // rule list labels:  
                                    if (backtracking == 0)
                                    {
                                        retval.tree = root_0;
                                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                        root_0 = (CommonTree)adaptor.GetNilNode();
                                        // 1007:24: -> ^( DOT $fullNewSubexpression qualifiedIdent )
                                        {
                                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1007:27: ^( DOT $fullNewSubexpression qualifiedIdent )
                                            {
                                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                                root_1 = (CommonTree)adaptor.BecomeRoot(stream_DOT.Next(), root_1);

                                                adaptor.AddChild(root_1, stream_retval.Next());
                                                adaptor.AddChild(root_1, stream_qualifiedIdent.Next());

                                                adaptor.AddChild(root_0, root_1);
                                            }

                                        }

                                    }

                                }
                                break;
                            case 2:
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1008:5: brackets
                                {
                                    PushFollow(FOLLOW_brackets_in_fullNewSubexpression4510);
                                    brackets431 = brackets();
                                    followingStackPointer_--;
                                    if (failed) return retval;
                                    if (backtracking == 0) stream_brackets.Add(brackets431.Tree);

                                    // AST REWRITE
                                    // elements:          fullNewSubexpression, brackets
                                    // token labels:      
                                    // rule labels:       retval
                                    // token list labels: 
                                    // rule list labels:  
                                    if (backtracking == 0)
                                    {
                                        retval.tree = root_0;
                                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                        root_0 = (CommonTree)adaptor.GetNilNode();
                                        // 1008:14: -> ^( ARRAY_ACC $fullNewSubexpression brackets )
                                        {
                                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1008:17: ^( ARRAY_ACC $fullNewSubexpression brackets )
                                            {
                                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(ARRAY_ACC, "ARRAY_ACC"), root_1);

                                                adaptor.AddChild(root_1, stream_retval.Next());
                                                adaptor.AddChild(root_1, stream_brackets.Next());

                                                adaptor.AddChild(root_0, root_1);
                                            }

                                        }

                                    }

                                }
                                break;

                            default:
                                goto loop104;
                        }
                    } while (true);

                loop104:
                    ;	// Stops C# compiler whinging that label 'loop104' has no statements


                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 128, fullNewSubexpression_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end fullNewSubexpression

        public class newShortExpression_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start newShortExpression
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1012:1: newShortExpression : NEW shortNewSubexpression ;
        public newShortExpression_return newShortExpression() // throws RecognitionException [1]
        {
            newShortExpression_return retval = new newShortExpression_return();
            retval.start = input.LT(1);
            int newShortExpression_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken NEW432 = null;
            shortNewSubexpression_return shortNewSubexpression433 = null;


            CommonTree NEW432_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 129))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1013:4: ( NEW shortNewSubexpression )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1013:4: NEW shortNewSubexpression
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    NEW432 = (IToken)input.LT(1);
                    Match(input, NEW, FOLLOW_NEW_in_newShortExpression4538); if (failed) return retval;
                    if (backtracking == 0)
                    {
                        NEW432_tree = (CommonTree)adaptor.Create(NEW432);
                        root_0 = (CommonTree)adaptor.BecomeRoot(NEW432_tree, root_0);
                    }
                    PushFollow(FOLLOW_shortNewSubexpression_in_newShortExpression4541);
                    shortNewSubexpression433 = shortNewSubexpression();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, shortNewSubexpression433.Tree);

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 129, newShortExpression_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end newShortExpression

        public class shortNewSubexpression_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start shortNewSubexpression
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1016:1: shortNewSubexpression : ( fullNewSubexpression | newShortExpression );
        public shortNewSubexpression_return shortNewSubexpression() // throws RecognitionException [1]
        {
            shortNewSubexpression_return retval = new shortNewSubexpression_return();
            retval.start = input.LT(1);
            int shortNewSubexpression_StartIndex = input.Index();
            CommonTree root_0 = null;

            fullNewSubexpression_return fullNewSubexpression434 = null;

            newShortExpression_return newShortExpression435 = null;



            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 130))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1017:4: ( fullNewSubexpression | newShortExpression )
                int alt105 = 2;
                int LA105_0 = input.LA(1);

                if ((LA105_0 == LCURLY || (LA105_0 >= STRING_LITERAL && LA105_0 <= USE) || LA105_0 == LPAREN || LA105_0 == XML || (LA105_0 >= IDENT && LA105_0 <= LBRACK) || LA105_0 == DYNAMIC || LA105_0 == LT || (LA105_0 >= IS && LA105_0 <= AS) || LA105_0 == DIV || (LA105_0 >= E4X_ATTRI && LA105_0 <= FLOAT_LITERAL)))
                {
                    alt105 = 1;
                }
                else if ((LA105_0 == NEW))
                {
                    switch (input.LA(2))
                    {
                        case UNDEFINED:
                            {
                                int LA105_25 = input.LA(3);

                                if ((synpred205()))
                                {
                                    alt105 = 1;
                                }
                                else if ((true))
                                {
                                    alt105 = 2;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d105s25 =
                                        new NoViableAltException("1016:1: shortNewSubexpression : ( fullNewSubexpression | newShortExpression );", 105, 25, input);

                                    throw nvae_d105s25;
                                }
                            }
                            break;
                        case LT:
                            {
                                int LA105_26 = input.LA(3);

                                if ((synpred205()))
                                {
                                    alt105 = 1;
                                }
                                else if ((true))
                                {
                                    alt105 = 2;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d105s26 =
                                        new NoViableAltException("1016:1: shortNewSubexpression : ( fullNewSubexpression | newShortExpression );", 105, 26, input);

                                    throw nvae_d105s26;
                                }
                            }
                            break;
                        case DIV:
                            {
                                int LA105_27 = input.LA(3);

                                if ((synpred205()))
                                {
                                    alt105 = 1;
                                }
                                else if ((true))
                                {
                                    alt105 = 2;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d105s27 =
                                        new NoViableAltException("1016:1: shortNewSubexpression : ( fullNewSubexpression | newShortExpression );", 105, 27, input);

                                    throw nvae_d105s27;
                                }
                            }
                            break;
                        case HEX_LITERAL:
                        case DECIMAL_LITERAL:
                        case OCTAL_LITERAL:
                        case FLOAT_LITERAL:
                            {
                                int LA105_28 = input.LA(3);

                                if ((synpred205()))
                                {
                                    alt105 = 1;
                                }
                                else if ((true))
                                {
                                    alt105 = 2;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d105s28 =
                                        new NoViableAltException("1016:1: shortNewSubexpression : ( fullNewSubexpression | newShortExpression );", 105, 28, input);

                                    throw nvae_d105s28;
                                }
                            }
                            break;
                        case STRING_LITERAL:
                            {
                                int LA105_29 = input.LA(3);

                                if ((synpred205()))
                                {
                                    alt105 = 1;
                                }
                                else if ((true))
                                {
                                    alt105 = 2;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d105s29 =
                                        new NoViableAltException("1016:1: shortNewSubexpression : ( fullNewSubexpression | newShortExpression );", 105, 29, input);

                                    throw nvae_d105s29;
                                }
                            }
                            break;
                        case TRUE:
                            {
                                int LA105_30 = input.LA(3);

                                if ((synpred205()))
                                {
                                    alt105 = 1;
                                }
                                else if ((true))
                                {
                                    alt105 = 2;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d105s30 =
                                        new NoViableAltException("1016:1: shortNewSubexpression : ( fullNewSubexpression | newShortExpression );", 105, 30, input);

                                    throw nvae_d105s30;
                                }
                            }
                            break;
                        case FALSE:
                            {
                                int LA105_31 = input.LA(3);

                                if ((synpred205()))
                                {
                                    alt105 = 1;
                                }
                                else if ((true))
                                {
                                    alt105 = 2;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d105s31 =
                                        new NoViableAltException("1016:1: shortNewSubexpression : ( fullNewSubexpression | newShortExpression );", 105, 31, input);

                                    throw nvae_d105s31;
                                }
                            }
                            break;
                        case NULL:
                            {
                                int LA105_32 = input.LA(3);

                                if ((synpred205()))
                                {
                                    alt105 = 1;
                                }
                                else if ((true))
                                {
                                    alt105 = 2;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d105s32 =
                                        new NoViableAltException("1016:1: shortNewSubexpression : ( fullNewSubexpression | newShortExpression );", 105, 32, input);

                                    throw nvae_d105s32;
                                }
                            }
                            break;
                        case LBRACK:
                            {
                                int LA105_33 = input.LA(3);

                                if ((synpred205()))
                                {
                                    alt105 = 1;
                                }
                                else if ((true))
                                {
                                    alt105 = 2;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d105s33 =
                                        new NoViableAltException("1016:1: shortNewSubexpression : ( fullNewSubexpression | newShortExpression );", 105, 33, input);

                                    throw nvae_d105s33;
                                }
                            }
                            break;
                        case LCURLY:
                            {
                                int LA105_34 = input.LA(3);

                                if ((synpred205()))
                                {
                                    alt105 = 1;
                                }
                                else if ((true))
                                {
                                    alt105 = 2;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d105s34 =
                                        new NoViableAltException("1016:1: shortNewSubexpression : ( fullNewSubexpression | newShortExpression );", 105, 34, input);

                                    throw nvae_d105s34;
                                }
                            }
                            break;
                        case FUNCTION:
                            {
                                int LA105_35 = input.LA(3);

                                if ((synpred205()))
                                {
                                    alt105 = 1;
                                }
                                else if ((true))
                                {
                                    alt105 = 2;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d105s35 =
                                        new NoViableAltException("1016:1: shortNewSubexpression : ( fullNewSubexpression | newShortExpression );", 105, 35, input);

                                    throw nvae_d105s35;
                                }
                            }
                            break;
                        case NEW:
                            {
                                int LA105_36 = input.LA(3);

                                if ((synpred205()))
                                {
                                    alt105 = 1;
                                }
                                else if ((true))
                                {
                                    alt105 = 2;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d105s36 =
                                        new NoViableAltException("1016:1: shortNewSubexpression : ( fullNewSubexpression | newShortExpression );", 105, 36, input);

                                    throw nvae_d105s36;
                                }
                            }
                            break;
                        case LPAREN:
                            {
                                int LA105_37 = input.LA(3);

                                if ((synpred205()))
                                {
                                    alt105 = 1;
                                }
                                else if ((true))
                                {
                                    alt105 = 2;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d105s37 =
                                        new NoViableAltException("1016:1: shortNewSubexpression : ( fullNewSubexpression | newShortExpression );", 105, 37, input);

                                    throw nvae_d105s37;
                                }
                            }
                            break;
                        case E4X_ATTRI:
                            {
                                int LA105_38 = input.LA(3);

                                if ((synpred205()))
                                {
                                    alt105 = 1;
                                }
                                else if ((true))
                                {
                                    alt105 = 2;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d105s38 =
                                        new NoViableAltException("1016:1: shortNewSubexpression : ( fullNewSubexpression | newShortExpression );", 105, 38, input);

                                    throw nvae_d105s38;
                                }
                            }
                            break;
                        case IDENT:
                            {
                                int LA105_39 = input.LA(3);

                                if ((synpred205()))
                                {
                                    alt105 = 1;
                                }
                                else if ((true))
                                {
                                    alt105 = 2;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d105s39 =
                                        new NoViableAltException("1016:1: shortNewSubexpression : ( fullNewSubexpression | newShortExpression );", 105, 39, input);

                                    throw nvae_d105s39;
                                }
                            }
                            break;
                        case PUBLIC:
                        case PRIVATE:
                        case PROTECTED:
                        case INTERNAL:
                            {
                                int LA105_40 = input.LA(3);

                                if ((synpred205()))
                                {
                                    alt105 = 1;
                                }
                                else if ((true))
                                {
                                    alt105 = 2;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d105s40 =
                                        new NoViableAltException("1016:1: shortNewSubexpression : ( fullNewSubexpression | newShortExpression );", 105, 40, input);

                                    throw nvae_d105s40;
                                }
                            }
                            break;
                        case USE:
                            {
                                int LA105_41 = input.LA(3);

                                if ((synpred205()))
                                {
                                    alt105 = 1;
                                }
                                else if ((true))
                                {
                                    alt105 = 2;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d105s41 =
                                        new NoViableAltException("1016:1: shortNewSubexpression : ( fullNewSubexpression | newShortExpression );", 105, 41, input);

                                    throw nvae_d105s41;
                                }
                            }
                            break;
                        case XML:
                            {
                                int LA105_42 = input.LA(3);

                                if ((synpred205()))
                                {
                                    alt105 = 1;
                                }
                                else if ((true))
                                {
                                    alt105 = 2;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d105s42 =
                                        new NoViableAltException("1016:1: shortNewSubexpression : ( fullNewSubexpression | newShortExpression );", 105, 42, input);

                                    throw nvae_d105s42;
                                }
                            }
                            break;
                        case DYNAMIC:
                            {
                                int LA105_43 = input.LA(3);

                                if ((synpred205()))
                                {
                                    alt105 = 1;
                                }
                                else if ((true))
                                {
                                    alt105 = 2;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d105s43 =
                                        new NoViableAltException("1016:1: shortNewSubexpression : ( fullNewSubexpression | newShortExpression );", 105, 43, input);

                                    throw nvae_d105s43;
                                }
                            }
                            break;
                        case NAMESPACE:
                            {
                                int LA105_44 = input.LA(3);

                                if ((synpred205()))
                                {
                                    alt105 = 1;
                                }
                                else if ((true))
                                {
                                    alt105 = 2;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d105s44 =
                                        new NoViableAltException("1016:1: shortNewSubexpression : ( fullNewSubexpression | newShortExpression );", 105, 44, input);

                                    throw nvae_d105s44;
                                }
                            }
                            break;
                        case IS:
                            {
                                int LA105_45 = input.LA(3);

                                if ((synpred205()))
                                {
                                    alt105 = 1;
                                }
                                else if ((true))
                                {
                                    alt105 = 2;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d105s45 =
                                        new NoViableAltException("1016:1: shortNewSubexpression : ( fullNewSubexpression | newShortExpression );", 105, 45, input);

                                    throw nvae_d105s45;
                                }
                            }
                            break;
                        case AS:
                            {
                                int LA105_46 = input.LA(3);

                                if ((synpred205()))
                                {
                                    alt105 = 1;
                                }
                                else if ((true))
                                {
                                    alt105 = 2;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d105s46 =
                                        new NoViableAltException("1016:1: shortNewSubexpression : ( fullNewSubexpression | newShortExpression );", 105, 46, input);

                                    throw nvae_d105s46;
                                }
                            }
                            break;
                        case GET:
                            {
                                int LA105_47 = input.LA(3);

                                if ((synpred205()))
                                {
                                    alt105 = 1;
                                }
                                else if ((true))
                                {
                                    alt105 = 2;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d105s47 =
                                        new NoViableAltException("1016:1: shortNewSubexpression : ( fullNewSubexpression | newShortExpression );", 105, 47, input);

                                    throw nvae_d105s47;
                                }
                            }
                            break;
                        case SET:
                            {
                                int LA105_48 = input.LA(3);

                                if ((synpred205()))
                                {
                                    alt105 = 1;
                                }
                                else if ((true))
                                {
                                    alt105 = 2;
                                }
                                else
                                {
                                    if (backtracking > 0) { failed = true; return retval; }
                                    NoViableAltException nvae_d105s48 =
                                        new NoViableAltException("1016:1: shortNewSubexpression : ( fullNewSubexpression | newShortExpression );", 105, 48, input);

                                    throw nvae_d105s48;
                                }
                            }
                            break;
                        default:
                            if (backtracking > 0) { failed = true; return retval; }
                            NoViableAltException nvae_d105s12 =
                                new NoViableAltException("1016:1: shortNewSubexpression : ( fullNewSubexpression | newShortExpression );", 105, 12, input);

                            throw nvae_d105s12;
                    }

                }
                else
                {
                    if (backtracking > 0) { failed = true; return retval; }
                    NoViableAltException nvae_d105s0 =
                        new NoViableAltException("1016:1: shortNewSubexpression : ( fullNewSubexpression | newShortExpression );", 105, 0, input);

                    throw nvae_d105s0;
                }
                switch (alt105)
                {
                    case 1:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1017:4: fullNewSubexpression
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_fullNewSubexpression_in_shortNewSubexpression4554);
                            fullNewSubexpression434 = fullNewSubexpression();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, fullNewSubexpression434.Tree);

                        }
                        break;
                    case 2:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1018:4: newShortExpression
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_newShortExpression_in_shortNewSubexpression4559);
                            newShortExpression435 = newShortExpression();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, newShortExpression435.Tree);

                        }
                        break;

                }
                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 130, shortNewSubexpression_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end shortNewSubexpression

        public class propertyOperator_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start propertyOperator
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1021:1: propertyOperator : ( DOT qualifiedIdent | brackets );
        public propertyOperator_return propertyOperator() // throws RecognitionException [1]
        {
            propertyOperator_return retval = new propertyOperator_return();
            retval.start = input.LT(1);
            int propertyOperator_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken DOT436 = null;
            qualifiedIdent_return qualifiedIdent437 = null;

            brackets_return brackets438 = null;


            CommonTree DOT436_tree = null;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 131))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1022:4: ( DOT qualifiedIdent | brackets )
                int alt106 = 2;
                int LA106_0 = input.LA(1);

                if ((LA106_0 == DOT))
                {
                    alt106 = 1;
                }
                else if ((LA106_0 == LBRACK))
                {
                    alt106 = 2;
                }
                else
                {
                    if (backtracking > 0) { failed = true; return retval; }
                    NoViableAltException nvae_d106s0 =
                        new NoViableAltException("1021:1: propertyOperator : ( DOT qualifiedIdent | brackets );", 106, 0, input);

                    throw nvae_d106s0;
                }
                switch (alt106)
                {
                    case 1:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1022:4: DOT qualifiedIdent
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            DOT436 = (IToken)input.LT(1);
                            Match(input, DOT, FOLLOW_DOT_in_propertyOperator4571); if (failed) return retval;
                            if (backtracking == 0)
                            {
                                DOT436_tree = (CommonTree)adaptor.Create(DOT436);
                                root_0 = (CommonTree)adaptor.BecomeRoot(DOT436_tree, root_0);
                            }
                            PushFollow(FOLLOW_qualifiedIdent_in_propertyOperator4574);
                            qualifiedIdent437 = qualifiedIdent();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, qualifiedIdent437.Tree);

                        }
                        break;
                    case 2:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1023:4: brackets
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            PushFollow(FOLLOW_brackets_in_propertyOperator4579);
                            brackets438 = brackets();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) adaptor.AddChild(root_0, brackets438.Tree);

                        }
                        break;

                }
                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 131, propertyOperator_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end propertyOperator

        public class commentExpression_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start commentExpression
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1027:1: commentExpression : comment -> ^( COMMENT_LIST comment ) ;
        public commentExpression_return commentExpression() // throws RecognitionException [1]
        {
            commentExpression_return retval = new commentExpression_return();
            retval.start = input.LT(1);
            int commentExpression_StartIndex = input.Index();
            CommonTree root_0 = null;

            comment_return comment439 = null;


            RewriteRuleSubtreeStream stream_comment = new RewriteRuleSubtreeStream(adaptor, "rule comment");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 132))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1028:4: ( comment -> ^( COMMENT_LIST comment ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1028:4: comment
                {
                    PushFollow(FOLLOW_comment_in_commentExpression4591);
                    comment439 = comment();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_comment.Add(comment439.Tree);

                    // AST REWRITE
                    // elements:          comment
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 1028:12: -> ^( COMMENT_LIST comment )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1028:15: ^( COMMENT_LIST comment )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(COMMENT_LIST, "COMMENT_LIST"), root_1);

                                adaptor.AddChild(root_1, stream_comment.Next());

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 132, commentExpression_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end commentExpression

        public class comment_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start comment
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1031:1: comment : ( singleLineComment ( comment )* -> ^( COMMENT_ENTRY singleLineComment ( comment )* ) | multilineComment ( comment )* -> ^( COMMENT_ENTRY multilineComment ( comment )* ) );
        public comment_return comment() // throws RecognitionException [1]
        {
            comment_return retval = new comment_return();
            retval.start = input.LT(1);
            int comment_StartIndex = input.Index();
            CommonTree root_0 = null;

            singleLineComment_return singleLineComment440 = null;

            comment_return comment441 = null;

            multilineComment_return multilineComment442 = null;

            comment_return comment443 = null;


            RewriteRuleSubtreeStream stream_multilineComment = new RewriteRuleSubtreeStream(adaptor, "rule multilineComment");
            RewriteRuleSubtreeStream stream_singleLineComment = new RewriteRuleSubtreeStream(adaptor, "rule singleLineComment");
            RewriteRuleSubtreeStream stream_comment = new RewriteRuleSubtreeStream(adaptor, "rule comment");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 133))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1032:4: ( singleLineComment ( comment )* -> ^( COMMENT_ENTRY singleLineComment ( comment )* ) | multilineComment ( comment )* -> ^( COMMENT_ENTRY multilineComment ( comment )* ) )
                int alt109 = 2;
                int LA109_0 = input.LA(1);

                if ((LA109_0 == SL_COMMENT))
                {
                    alt109 = 1;
                }
                else if ((LA109_0 == ML_COMMENT))
                {
                    alt109 = 2;
                }
                else
                {
                    if (backtracking > 0) { failed = true; return retval; }
                    NoViableAltException nvae_d109s0 =
                        new NoViableAltException("1031:1: comment : ( singleLineComment ( comment )* -> ^( COMMENT_ENTRY singleLineComment ( comment )* ) | multilineComment ( comment )* -> ^( COMMENT_ENTRY multilineComment ( comment )* ) );", 109, 0, input);

                    throw nvae_d109s0;
                }
                switch (alt109)
                {
                    case 1:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1032:4: singleLineComment ( comment )*
                        {
                            PushFollow(FOLLOW_singleLineComment_in_comment4610);
                            singleLineComment440 = singleLineComment();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) stream_singleLineComment.Add(singleLineComment440.Tree);
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1032:22: ( comment )*
                            do
                            {
                                int alt107 = 2;
                                int LA107_0 = input.LA(1);

                                if ((LA107_0 == SL_COMMENT))
                                {
                                    int LA107_4 = input.LA(2);

                                    if ((synpred207()))
                                    {
                                        alt107 = 1;
                                    }


                                }
                                else if ((LA107_0 == ML_COMMENT))
                                {
                                    int LA107_5 = input.LA(2);

                                    if ((synpred207()))
                                    {
                                        alt107 = 1;
                                    }


                                }


                                switch (alt107)
                                {
                                    case 1:
                                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: comment
                                        {
                                            PushFollow(FOLLOW_comment_in_comment4612);
                                            comment441 = comment();
                                            followingStackPointer_--;
                                            if (failed) return retval;
                                            if (backtracking == 0) stream_comment.Add(comment441.Tree);

                                        }
                                        break;

                                    default:
                                        goto loop107;
                                }
                            } while (true);

                        loop107:
                            ;	// Stops C# compiler whinging that label 'loop107' has no statements


                            // AST REWRITE
                            // elements:          comment, singleLineComment
                            // token labels:      
                            // rule labels:       retval
                            // token list labels: 
                            // rule list labels:  
                            if (backtracking == 0)
                            {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                root_0 = (CommonTree)adaptor.GetNilNode();
                                // 1032:31: -> ^( COMMENT_ENTRY singleLineComment ( comment )* )
                                {
                                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1032:34: ^( COMMENT_ENTRY singleLineComment ( comment )* )
                                    {
                                        CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                        root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(COMMENT_ENTRY, "COMMENT_ENTRY"), root_1);

                                        adaptor.AddChild(root_1, stream_singleLineComment.Next());
                                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1032:68: ( comment )*
                                        while (stream_comment.HasNext())
                                        {
                                            adaptor.AddChild(root_1, stream_comment.Next());

                                        }
                                        stream_comment.Reset();

                                        adaptor.AddChild(root_0, root_1);
                                    }

                                }

                            }

                        }
                        break;
                    case 2:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1033:4: multilineComment ( comment )*
                        {
                            PushFollow(FOLLOW_multilineComment_in_comment4629);
                            multilineComment442 = multilineComment();
                            followingStackPointer_--;
                            if (failed) return retval;
                            if (backtracking == 0) stream_multilineComment.Add(multilineComment442.Tree);
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1033:21: ( comment )*
                            do
                            {
                                int alt108 = 2;
                                int LA108_0 = input.LA(1);

                                if ((LA108_0 == SL_COMMENT))
                                {
                                    int LA108_4 = input.LA(2);

                                    if ((synpred209()))
                                    {
                                        alt108 = 1;
                                    }


                                }
                                else if ((LA108_0 == ML_COMMENT))
                                {
                                    int LA108_5 = input.LA(2);

                                    if ((synpred209()))
                                    {
                                        alt108 = 1;
                                    }


                                }


                                switch (alt108)
                                {
                                    case 1:
                                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: comment
                                        {
                                            PushFollow(FOLLOW_comment_in_comment4631);
                                            comment443 = comment();
                                            followingStackPointer_--;
                                            if (failed) return retval;
                                            if (backtracking == 0) stream_comment.Add(comment443.Tree);

                                        }
                                        break;

                                    default:
                                        goto loop108;
                                }
                            } while (true);

                        loop108:
                            ;	// Stops C# compiler whinging that label 'loop108' has no statements


                            // AST REWRITE
                            // elements:          comment, multilineComment
                            // token labels:      
                            // rule labels:       retval
                            // token list labels: 
                            // rule list labels:  
                            if (backtracking == 0)
                            {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                root_0 = (CommonTree)adaptor.GetNilNode();
                                // 1033:30: -> ^( COMMENT_ENTRY multilineComment ( comment )* )
                                {
                                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1033:33: ^( COMMENT_ENTRY multilineComment ( comment )* )
                                    {
                                        CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                        root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(COMMENT_ENTRY, "COMMENT_ENTRY"), root_1);

                                        adaptor.AddChild(root_1, stream_multilineComment.Next());
                                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1033:66: ( comment )*
                                        while (stream_comment.HasNext())
                                        {
                                            adaptor.AddChild(root_1, stream_comment.Next());

                                        }
                                        stream_comment.Reset();

                                        adaptor.AddChild(root_0, root_1);
                                    }

                                }

                            }

                        }
                        break;

                }
                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 133, comment_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end comment

        public class singleLineComment_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start singleLineComment
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1036:1: singleLineComment : SL_COMMENT -> ^( SINGLELINE_COMMENT SL_COMMENT ) ;
        public singleLineComment_return singleLineComment() // throws RecognitionException [1]
        {
            singleLineComment_return retval = new singleLineComment_return();
            retval.start = input.LT(1);
            int singleLineComment_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken SL_COMMENT444 = null;

            CommonTree SL_COMMENT444_tree = null;
            RewriteRuleTokenStream stream_SL_COMMENT = new RewriteRuleTokenStream(adaptor, "token SL_COMMENT");

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 134))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1037:4: ( SL_COMMENT -> ^( SINGLELINE_COMMENT SL_COMMENT ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1037:4: SL_COMMENT
                {
                    SL_COMMENT444 = (IToken)input.LT(1);
                    Match(input, SL_COMMENT, FOLLOW_SL_COMMENT_in_singleLineComment4654); if (failed) return retval;
                    if (backtracking == 0) stream_SL_COMMENT.Add(SL_COMMENT444);


                    // AST REWRITE
                    // elements:          SL_COMMENT
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 1037:15: -> ^( SINGLELINE_COMMENT SL_COMMENT )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1037:18: ^( SINGLELINE_COMMENT SL_COMMENT )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(SINGLELINE_COMMENT, "SINGLELINE_COMMENT"), root_1);

                                adaptor.AddChild(root_1, stream_SL_COMMENT.Next());

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 134, singleLineComment_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end singleLineComment

        public class multilineComment_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start multilineComment
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1040:1: multilineComment : ML_COMMENT -> ^( MULTILINE_COMMENT ML_COMMENT ) ;
        public multilineComment_return multilineComment() // throws RecognitionException [1]
        {
            multilineComment_return retval = new multilineComment_return();
            retval.start = input.LT(1);
            int multilineComment_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken ML_COMMENT445 = null;

            CommonTree ML_COMMENT445_tree = null;
            RewriteRuleTokenStream stream_ML_COMMENT = new RewriteRuleTokenStream(adaptor, "token ML_COMMENT");

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 135))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1041:4: ( ML_COMMENT -> ^( MULTILINE_COMMENT ML_COMMENT ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1041:4: ML_COMMENT
                {
                    ML_COMMENT445 = (IToken)input.LT(1);
                    Match(input, ML_COMMENT, FOLLOW_ML_COMMENT_in_multilineComment4674); if (failed) return retval;
                    if (backtracking == 0) stream_ML_COMMENT.Add(ML_COMMENT445);


                    // AST REWRITE
                    // elements:          ML_COMMENT
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 1041:15: -> ^( MULTILINE_COMMENT ML_COMMENT )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1041:18: ^( MULTILINE_COMMENT ML_COMMENT )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(MULTILINE_COMMENT, "MULTILINE_COMMENT"), root_1);

                                adaptor.AddChild(root_1, stream_ML_COMMENT.Next());

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 135, multilineComment_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end multilineComment

        public class brackets_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start brackets
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1045:1: brackets : LBRACK expressionList RBRACK ;
        public brackets_return brackets() // throws RecognitionException [1]
        {
            brackets_return retval = new brackets_return();
            retval.start = input.LT(1);
            int brackets_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken LBRACK446 = null;
            IToken RBRACK448 = null;
            expressionList_return expressionList447 = null;


            CommonTree LBRACK446_tree = null;
            CommonTree RBRACK448_tree = null;


            ((InOperator_scope)InOperator_stack.Peek()).allowed = true;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 136))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1049:4: ( LBRACK expressionList RBRACK )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1049:4: LBRACK expressionList RBRACK
                {
                    root_0 = (CommonTree)adaptor.GetNilNode();

                    LBRACK446 = (IToken)input.LT(1);
                    Match(input, LBRACK, FOLLOW_LBRACK_in_brackets4699); if (failed) return retval;
                    if (backtracking == 0)
                    {
                        LBRACK446_tree = (CommonTree)adaptor.Create(LBRACK446);
                        adaptor.AddChild(root_0, LBRACK446_tree);
                    }
                    PushFollow(FOLLOW_expressionList_in_brackets4701);
                    expressionList447 = expressionList();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) adaptor.AddChild(root_0, expressionList447.Tree);
                    RBRACK448 = (IToken)input.LT(1);
                    Match(input, RBRACK, FOLLOW_RBRACK_in_brackets4703); if (failed) return retval;
                    if (backtracking == 0)
                    {
                        RBRACK448_tree = (CommonTree)adaptor.Create(RBRACK448);
                        adaptor.AddChild(root_0, RBRACK448_tree);
                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 136, brackets_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end brackets

        public class encapsulatedExpression_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start encapsulatedExpression
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1052:1: encapsulatedExpression : LPAREN assignmentExpression RPAREN -> ^( ENCPS_EXPR assignmentExpression ) ;
        public encapsulatedExpression_return encapsulatedExpression() // throws RecognitionException [1]
        {
            InOperator_stack.Push(new InOperator_scope());

            encapsulatedExpression_return retval = new encapsulatedExpression_return();
            retval.start = input.LT(1);
            int encapsulatedExpression_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken LPAREN449 = null;
            IToken RPAREN451 = null;
            assignmentExpression_return assignmentExpression450 = null;


            CommonTree LPAREN449_tree = null;
            CommonTree RPAREN451_tree = null;
            RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor, "token RPAREN");
            RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor, "token LPAREN");
            RewriteRuleSubtreeStream stream_assignmentExpression = new RewriteRuleSubtreeStream(adaptor, "rule assignmentExpression");

            ((InOperator_scope)InOperator_stack.Peek()).allowed = true;

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 137))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1057:4: ( LPAREN assignmentExpression RPAREN -> ^( ENCPS_EXPR assignmentExpression ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1057:4: LPAREN assignmentExpression RPAREN
                {
                    LPAREN449 = (IToken)input.LT(1);
                    Match(input, LPAREN, FOLLOW_LPAREN_in_encapsulatedExpression4724); if (failed) return retval;
                    if (backtracking == 0) stream_LPAREN.Add(LPAREN449);

                    PushFollow(FOLLOW_assignmentExpression_in_encapsulatedExpression4726);
                    assignmentExpression450 = assignmentExpression();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_assignmentExpression.Add(assignmentExpression450.Tree);
                    RPAREN451 = (IToken)input.LT(1);
                    Match(input, RPAREN, FOLLOW_RPAREN_in_encapsulatedExpression4728); if (failed) return retval;
                    if (backtracking == 0) stream_RPAREN.Add(RPAREN451);


                    // AST REWRITE
                    // elements:          assignmentExpression
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 1058:3: -> ^( ENCPS_EXPR assignmentExpression )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1058:6: ^( ENCPS_EXPR assignmentExpression )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(ENCPS_EXPR, "ENCPS_EXPR"), root_1);

                                adaptor.AddChild(root_1, stream_assignmentExpression.Next());

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 137, encapsulatedExpression_StartIndex);
                }
                InOperator_stack.Pop();

            }
            return retval;
        }
        // $ANTLR end encapsulatedExpression

        public class functionDefinition_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start functionDefinition
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1064:1: functionDefinition : FUNCTION parameterDeclarationList ( typeExpression )? block -> ^( FUNC_DEF parameterDeclarationList ( typeExpression )? block ) ;
        public functionDefinition_return functionDefinition() // throws RecognitionException [1]
        {
            functionDefinition_return retval = new functionDefinition_return();
            retval.start = input.LT(1);
            int functionDefinition_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken FUNCTION452 = null;
            parameterDeclarationList_return parameterDeclarationList453 = null;

            typeExpression_return typeExpression454 = null;

            block_return block455 = null;


            CommonTree FUNCTION452_tree = null;
            RewriteRuleTokenStream stream_FUNCTION = new RewriteRuleTokenStream(adaptor, "token FUNCTION");
            RewriteRuleSubtreeStream stream_parameterDeclarationList = new RewriteRuleSubtreeStream(adaptor, "rule parameterDeclarationList");
            RewriteRuleSubtreeStream stream_block = new RewriteRuleSubtreeStream(adaptor, "rule block");
            RewriteRuleSubtreeStream stream_typeExpression = new RewriteRuleSubtreeStream(adaptor, "rule typeExpression");
            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 138))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1065:4: ( FUNCTION parameterDeclarationList ( typeExpression )? block -> ^( FUNC_DEF parameterDeclarationList ( typeExpression )? block ) )
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1065:4: FUNCTION parameterDeclarationList ( typeExpression )? block
                {
                    FUNCTION452 = (IToken)input.LT(1);
                    Match(input, FUNCTION, FOLLOW_FUNCTION_in_functionDefinition4752); if (failed) return retval;
                    if (backtracking == 0) stream_FUNCTION.Add(FUNCTION452);

                    PushFollow(FOLLOW_parameterDeclarationList_in_functionDefinition4754);
                    parameterDeclarationList453 = parameterDeclarationList();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_parameterDeclarationList.Add(parameterDeclarationList453.Tree);
                    // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1065:38: ( typeExpression )?
                    int alt110 = 2;
                    int LA110_0 = input.LA(1);

                    if ((LA110_0 == COLON))
                    {
                        alt110 = 1;
                    }
                    switch (alt110)
                    {
                        case 1:
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:0:0: typeExpression
                            {
                                PushFollow(FOLLOW_typeExpression_in_functionDefinition4756);
                                typeExpression454 = typeExpression();
                                followingStackPointer_--;
                                if (failed) return retval;
                                if (backtracking == 0) stream_typeExpression.Add(typeExpression454.Tree);

                            }
                            break;

                    }

                    PushFollow(FOLLOW_block_in_functionDefinition4759);
                    block455 = block();
                    followingStackPointer_--;
                    if (failed) return retval;
                    if (backtracking == 0) stream_block.Add(block455.Tree);

                    // AST REWRITE
                    // elements:          typeExpression, parameterDeclarationList, block
                    // token labels:      
                    // rule labels:       retval
                    // token list labels: 
                    // rule list labels:  
                    if (backtracking == 0)
                    {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                        root_0 = (CommonTree)adaptor.GetNilNode();
                        // 1066:3: -> ^( FUNC_DEF parameterDeclarationList ( typeExpression )? block )
                        {
                            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1066:6: ^( FUNC_DEF parameterDeclarationList ( typeExpression )? block )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.GetNilNode();
                                root_1 = (CommonTree)adaptor.BecomeRoot(adaptor.Create(FUNC_DEF, "FUNC_DEF"), root_1);

                                adaptor.AddChild(root_1, stream_parameterDeclarationList.Next());
                                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1066:42: ( typeExpression )?
                                if (stream_typeExpression.HasNext())
                                {
                                    adaptor.AddChild(root_1, stream_typeExpression.Next());

                                }
                                stream_typeExpression.Reset();
                                adaptor.AddChild(root_1, stream_block.Next());

                                adaptor.AddChild(root_0, root_1);
                            }

                        }

                    }

                }

                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 138, functionDefinition_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end functionDefinition

        public class ident_return : ParserRuleReturnScope
        {
            internal CommonTree tree;
            override public object Tree
            {
                get { return tree; }
            }
        };

        // $ANTLR start ident
        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1070:1: ident : ( IDENT | i= USE -> IDENT[$i] | i= XML -> IDENT[$i] | i= DYNAMIC -> IDENT[$i] | i= NAMESPACE -> IDENT[$i] | i= IS -> IDENT[$i] | i= AS -> IDENT[$i] | i= GET -> IDENT[$i] | i= SET -> IDENT[$i] );
        public ident_return ident() // throws RecognitionException [1]
        {
            ident_return retval = new ident_return();
            retval.start = input.LT(1);
            int ident_StartIndex = input.Index();
            CommonTree root_0 = null;

            IToken i = null;
            IToken IDENT456 = null;

            CommonTree i_tree = null;
            CommonTree IDENT456_tree = null;
            RewriteRuleTokenStream stream_GET = new RewriteRuleTokenStream(adaptor, "token GET");
            RewriteRuleTokenStream stream_XML = new RewriteRuleTokenStream(adaptor, "token XML");
            RewriteRuleTokenStream stream_AS = new RewriteRuleTokenStream(adaptor, "token AS");
            RewriteRuleTokenStream stream_DYNAMIC = new RewriteRuleTokenStream(adaptor, "token DYNAMIC");
            RewriteRuleTokenStream stream_NAMESPACE = new RewriteRuleTokenStream(adaptor, "token NAMESPACE");
            RewriteRuleTokenStream stream_SET = new RewriteRuleTokenStream(adaptor, "token SET");
            RewriteRuleTokenStream stream_IS = new RewriteRuleTokenStream(adaptor, "token IS");
            RewriteRuleTokenStream stream_USE = new RewriteRuleTokenStream(adaptor, "token USE");

            try
            {
                if ((backtracking > 0) && AlreadyParsedRule(input, 139))
                {
                    return retval;
                }
                // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1071:4: ( IDENT | i= USE -> IDENT[$i] | i= XML -> IDENT[$i] | i= DYNAMIC -> IDENT[$i] | i= NAMESPACE -> IDENT[$i] | i= IS -> IDENT[$i] | i= AS -> IDENT[$i] | i= GET -> IDENT[$i] | i= SET -> IDENT[$i] )
                int alt111 = 9;
                switch (input.LA(1))
                {
                    case IDENT:
                        {
                            alt111 = 1;
                        }
                        break;
                    case USE:
                        {
                            alt111 = 2;
                        }
                        break;
                    case XML:
                        {
                            alt111 = 3;
                        }
                        break;
                    case DYNAMIC:
                        {
                            alt111 = 4;
                        }
                        break;
                    case NAMESPACE:
                        {
                            alt111 = 5;
                        }
                        break;
                    case IS:
                        {
                            alt111 = 6;
                        }
                        break;
                    case AS:
                        {
                            alt111 = 7;
                        }
                        break;
                    case GET:
                        {
                            alt111 = 8;
                        }
                        break;
                    case SET:
                        {
                            alt111 = 9;
                        }
                        break;
                    default:
                        if (backtracking > 0) { failed = true; return retval; }
                        NoViableAltException nvae_d111s0 =
                            new NoViableAltException("1070:1: ident : ( IDENT | i= USE -> IDENT[$i] | i= XML -> IDENT[$i] | i= DYNAMIC -> IDENT[$i] | i= NAMESPACE -> IDENT[$i] | i= IS -> IDENT[$i] | i= AS -> IDENT[$i] | i= GET -> IDENT[$i] | i= SET -> IDENT[$i] );", 111, 0, input);

                        throw nvae_d111s0;
                }

                switch (alt111)
                {
                    case 1:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1071:4: IDENT
                        {
                            root_0 = (CommonTree)adaptor.GetNilNode();

                            IDENT456 = (IToken)input.LT(1);
                            Match(input, IDENT, FOLLOW_IDENT_in_ident4786); if (failed) return retval;
                            if (backtracking == 0)
                            {
                                IDENT456_tree = (CommonTree)adaptor.Create(IDENT456);
                                adaptor.AddChild(root_0, IDENT456_tree);
                            }

                        }
                        break;
                    case 2:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1072:4: i= USE
                        {
                            i = (IToken)input.LT(1);
                            Match(input, USE, FOLLOW_USE_in_ident4793); if (failed) return retval;
                            if (backtracking == 0) stream_USE.Add(i);


                            // AST REWRITE
                            // elements:          
                            // token labels:      
                            // rule labels:       retval
                            // token list labels: 
                            // rule list labels:  
                            if (backtracking == 0)
                            {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                root_0 = (CommonTree)adaptor.GetNilNode();
                                // 1072:10: -> IDENT[$i]
                                {
                                    adaptor.AddChild(root_0, adaptor.Create(IDENT, i));

                                }

                            }

                        }
                        break;
                    case 3:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1073:4: i= XML
                        {
                            i = (IToken)input.LT(1);
                            Match(input, XML, FOLLOW_XML_in_ident4805); if (failed) return retval;
                            if (backtracking == 0) stream_XML.Add(i);


                            // AST REWRITE
                            // elements:          
                            // token labels:      
                            // rule labels:       retval
                            // token list labels: 
                            // rule list labels:  
                            if (backtracking == 0)
                            {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                root_0 = (CommonTree)adaptor.GetNilNode();
                                // 1073:10: -> IDENT[$i]
                                {
                                    adaptor.AddChild(root_0, adaptor.Create(IDENT, i));

                                }

                            }

                        }
                        break;
                    case 4:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1074:4: i= DYNAMIC
                        {
                            i = (IToken)input.LT(1);
                            Match(input, DYNAMIC, FOLLOW_DYNAMIC_in_ident4817); if (failed) return retval;
                            if (backtracking == 0) stream_DYNAMIC.Add(i);


                            // AST REWRITE
                            // elements:          
                            // token labels:      
                            // rule labels:       retval
                            // token list labels: 
                            // rule list labels:  
                            if (backtracking == 0)
                            {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                root_0 = (CommonTree)adaptor.GetNilNode();
                                // 1074:14: -> IDENT[$i]
                                {
                                    adaptor.AddChild(root_0, adaptor.Create(IDENT, i));

                                }

                            }

                        }
                        break;
                    case 5:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1075:4: i= NAMESPACE
                        {
                            i = (IToken)input.LT(1);
                            Match(input, NAMESPACE, FOLLOW_NAMESPACE_in_ident4829); if (failed) return retval;
                            if (backtracking == 0) stream_NAMESPACE.Add(i);


                            // AST REWRITE
                            // elements:          
                            // token labels:      
                            // rule labels:       retval
                            // token list labels: 
                            // rule list labels:  
                            if (backtracking == 0)
                            {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                root_0 = (CommonTree)adaptor.GetNilNode();
                                // 1075:16: -> IDENT[$i]
                                {
                                    adaptor.AddChild(root_0, adaptor.Create(IDENT, i));

                                }

                            }

                        }
                        break;
                    case 6:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1076:4: i= IS
                        {
                            i = (IToken)input.LT(1);
                            Match(input, IS, FOLLOW_IS_in_ident4841); if (failed) return retval;
                            if (backtracking == 0) stream_IS.Add(i);


                            // AST REWRITE
                            // elements:          
                            // token labels:      
                            // rule labels:       retval
                            // token list labels: 
                            // rule list labels:  
                            if (backtracking == 0)
                            {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                root_0 = (CommonTree)adaptor.GetNilNode();
                                // 1076:9: -> IDENT[$i]
                                {
                                    adaptor.AddChild(root_0, adaptor.Create(IDENT, i));

                                }

                            }

                        }
                        break;
                    case 7:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1077:4: i= AS
                        {
                            i = (IToken)input.LT(1);
                            Match(input, AS, FOLLOW_AS_in_ident4853); if (failed) return retval;
                            if (backtracking == 0) stream_AS.Add(i);


                            // AST REWRITE
                            // elements:          
                            // token labels:      
                            // rule labels:       retval
                            // token list labels: 
                            // rule list labels:  
                            if (backtracking == 0)
                            {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                root_0 = (CommonTree)adaptor.GetNilNode();
                                // 1077:9: -> IDENT[$i]
                                {
                                    adaptor.AddChild(root_0, adaptor.Create(IDENT, i));

                                }

                            }

                        }
                        break;
                    case 8:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1078:4: i= GET
                        {
                            i = (IToken)input.LT(1);
                            Match(input, GET, FOLLOW_GET_in_ident4865); if (failed) return retval;
                            if (backtracking == 0) stream_GET.Add(i);


                            // AST REWRITE
                            // elements:          
                            // token labels:      
                            // rule labels:       retval
                            // token list labels: 
                            // rule list labels:  
                            if (backtracking == 0)
                            {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                root_0 = (CommonTree)adaptor.GetNilNode();
                                // 1078:10: -> IDENT[$i]
                                {
                                    adaptor.AddChild(root_0, adaptor.Create(IDENT, i));

                                }

                            }

                        }
                        break;
                    case 9:
                        // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1079:4: i= SET
                        {
                            i = (IToken)input.LT(1);
                            Match(input, SET, FOLLOW_SET_in_ident4877); if (failed) return retval;
                            if (backtracking == 0) stream_SET.Add(i);


                            // AST REWRITE
                            // elements:          
                            // token labels:      
                            // rule labels:       retval
                            // token list labels: 
                            // rule list labels:  
                            if (backtracking == 0)
                            {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(adaptor, "token retval", (retval != null ? retval.Tree : null));

                                root_0 = (CommonTree)adaptor.GetNilNode();
                                // 1079:10: -> IDENT[$i]
                                {
                                    adaptor.AddChild(root_0, adaptor.Create(IDENT, i));

                                }

                            }

                        }
                        break;

                }
                retval.stop = input.LT(-1);

                if (backtracking == 0)
                {
                    retval.tree = (CommonTree)adaptor.RulePostProcessing(root_0);
                    adaptor.SetTokenBoundaries(retval.Tree, retval.start, retval.stop);
                }
            }
            finally
            {
                if (backtracking > 0)
                {
                    Memoize(input, 139, ident_StartIndex);
                }
            }
            return retval;
        }
        // $ANTLR end ident

        // $ANTLR start synpred1
        public void synpred1_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:101:6: ( as2CompilationUnit )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:101:6: as2CompilationUnit
            {
                PushFollow(FOLLOW_as2CompilationUnit_in_synpred1348);
                as2CompilationUnit();
                followingStackPointer_--;
                if (failed) return;

            }
        }
        // $ANTLR end synpred1

        // $ANTLR start synpred2
        public void synpred2_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:107:4: ( commentExpression )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:107:4: commentExpression
            {
                PushFollow(FOLLOW_commentExpression_in_synpred2382);
                commentExpression();
                followingStackPointer_--;
                if (failed) return;

            }
        }
        // $ANTLR end synpred2

        // $ANTLR start synpred20
        public void synpred20_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:164:4: ( SEMI )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:164:4: SEMI
            {
                Match(input, SEMI, FOLLOW_SEMI_in_synpred20648); if (failed) return;

            }
        }
        // $ANTLR end synpred20

        // $ANTLR start synpred49
        public void synpred49_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:354:4: ( LCURLY )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:354:5: LCURLY
            {
                Match(input, LCURLY, FOLLOW_LCURLY_in_synpred491569); if (failed) return;

            }
        }
        // $ANTLR end synpred49

        // $ANTLR start synpred51
        public void synpred51_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:356:4: ( expressionStatement )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:356:4: expressionStatement
            {
                PushFollow(FOLLOW_expressionStatement_in_synpred511583);
                expressionStatement();
                followingStackPointer_--;
                if (failed) return;

            }
        }
        // $ANTLR end synpred51

        // $ANTLR start synpred66
        public void synpred66_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:417:18: ( commentExpression )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:417:18: commentExpression
            {
                PushFollow(FOLLOW_commentExpression_in_synpred661776);
                commentExpression();
                followingStackPointer_--;
                if (failed) return;

            }
        }
        // $ANTLR end synpred66

        // $ANTLR start synpred67
        public void synpred67_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:417:47: ( commentExpression )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:417:47: commentExpression
            {
                PushFollow(FOLLOW_commentExpression_in_synpred671781);
                commentExpression();
                followingStackPointer_--;
                if (failed) return;

            }
        }
        // $ANTLR end synpred67

        // $ANTLR start synpred68
        public void synpred68_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:418:4: ( ELSE )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:418:5: ELSE
            {
                Match(input, ELSE, FOLLOW_ELSE_in_synpred681788); if (failed) return;

            }
        }
        // $ANTLR end synpred68

        // $ANTLR start synpred69
        public void synpred69_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:422:10: ( commentExpression )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:422:10: commentExpression
            {
                PushFollow(FOLLOW_commentExpression_in_synpred691807);
                commentExpression();
                followingStackPointer_--;
                if (failed) return;

            }
        }
        // $ANTLR end synpred69

        // $ANTLR start synpred73
        public void synpred73_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:446:12: ( expression )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:446:12: expression
            {
                PushFollow(FOLLOW_expression_in_synpred731904);
                expression();
                followingStackPointer_--;
                if (failed) return;

            }
        }
        // $ANTLR end synpred73

        // $ANTLR start synpred78
        public void synpred78_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:498:5: ( forInClauseDecl IN )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:498:6: forInClauseDecl IN
            {
                PushFollow(FOLLOW_forInClauseDecl_in_synpred782143);
                forInClauseDecl();
                followingStackPointer_--;
                if (failed) return;
                Match(input, IN, FOLLOW_IN_in_synpred782145); if (failed) return;

            }
        }
        // $ANTLR end synpred78

        // $ANTLR start synpred84
        public void synpred84_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:562:22: ( commentExpression )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:562:22: commentExpression
            {
                PushFollow(FOLLOW_commentExpression_in_synpred842420);
                commentExpression();
                followingStackPointer_--;
                if (failed) return;

            }
        }
        // $ANTLR end synpred84

        // $ANTLR start synpred85
        public void synpred85_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:566:8: ( commentExpression )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:566:8: commentExpression
            {
                PushFollow(FOLLOW_commentExpression_in_synpred852438);
                commentExpression();
                followingStackPointer_--;
                if (failed) return;

            }
        }
        // $ANTLR end synpred85

        // $ANTLR start synpred86
        public void synpred86_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:566:55: ( commentExpression )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:566:55: commentExpression
            {
                PushFollow(FOLLOW_commentExpression_in_synpred862449);
                commentExpression();
                followingStackPointer_--;
                if (failed) return;

            }
        }
        // $ANTLR end synpred86

        // $ANTLR start synpred87
        public void synpred87_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:570:21: ( commentExpression )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:570:21: commentExpression
            {
                PushFollow(FOLLOW_commentExpression_in_synpred872470);
                commentExpression();
                followingStackPointer_--;
                if (failed) return;

            }
        }
        // $ANTLR end synpred87

        // $ANTLR start synpred98
        public void synpred98_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:619:6: ( annotation )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:619:6: annotation
            {
                PushFollow(FOLLOW_annotation_in_synpred982739);
                annotation();
                followingStackPointer_--;
                if (failed) return;

            }
        }
        // $ANTLR end synpred98

        // $ANTLR start synpred99
        public void synpred99_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:620:5: ( includeDirective )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:620:5: includeDirective
            {
                PushFollow(FOLLOW_includeDirective_in_synpred992745);
                includeDirective();
                followingStackPointer_--;
                if (failed) return;

            }
        }
        // $ANTLR end synpred99

        // $ANTLR start synpred117
        public void synpred117_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:713:26: ( COMMA assignmentExpression )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:713:26: COMMA assignmentExpression
            {
                Match(input, COMMA, FOLLOW_COMMA_in_synpred1173119); if (failed) return;
                PushFollow(FOLLOW_assignmentExpression_in_synpred1173121);
                assignmentExpression();
                followingStackPointer_--;
                if (failed) return;

            }
        }
        // $ANTLR end synpred117

        // $ANTLR start synpred123
        public void synpred123_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:753:4: ( assignmentOperator )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:753:5: assignmentOperator
            {
                PushFollow(FOLLOW_assignmentOperator_in_synpred1233294);
                assignmentOperator();
                followingStackPointer_--;
                if (failed) return;

            }
        }
        // $ANTLR end synpred123

        // $ANTLR start synpred149
        public void synpred149_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:843:4: ( relationalOperator )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:843:5: relationalOperator
            {
                PushFollow(FOLLOW_relationalOperator_in_synpred1493659);
                relationalOperator();
                followingStackPointer_--;
                if (failed) return;

            }
        }
        // $ANTLR end synpred149

        // $ANTLR start synpred160
        public void synpred160_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:864:4: ( additiveOperator multiplicativeExpression )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:864:4: additiveOperator multiplicativeExpression
            {
                PushFollow(FOLLOW_additiveOperator_in_synpred1603768);
                additiveOperator();
                followingStackPointer_--;
                if (failed) return;
                PushFollow(FOLLOW_multiplicativeExpression_in_synpred1603771);
                multiplicativeExpression();
                followingStackPointer_--;
                if (failed) return;

            }
        }
        // $ANTLR end synpred160

        // $ANTLR start synpred162
        public void synpred162_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:874:5: ( multiplicativeOperator unaryExpression )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:874:5: multiplicativeOperator unaryExpression
            {
                PushFollow(FOLLOW_multiplicativeOperator_in_synpred1623807);
                multiplicativeOperator();
                followingStackPointer_--;
                if (failed) return;
                PushFollow(FOLLOW_unaryExpression_in_synpred1623813);
                unaryExpression();
                followingStackPointer_--;
                if (failed) return;

            }
        }
        // $ANTLR end synpred162

        // $ANTLR start synpred176
        public void synpred176_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:906:5: ( LBRACK expression RBRACK )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:906:5: LBRACK expression RBRACK
            {
                Match(input, LBRACK, FOLLOW_LBRACK_in_synpred1764047); if (failed) return;
                PushFollow(FOLLOW_expression_in_synpred1764049);
                expression();
                followingStackPointer_--;
                if (failed) return;
                Match(input, RBRACK, FOLLOW_RBRACK_in_synpred1764051); if (failed) return;

            }
        }
        // $ANTLR end synpred176

        // $ANTLR start synpred178
        public void synpred178_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:908:5: ( arguments )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:908:5: arguments
            {
                PushFollow(FOLLOW_arguments_in_synpred1784076);
                arguments();
                followingStackPointer_--;
                if (failed) return;

            }
        }
        // $ANTLR end synpred178

        // $ANTLR start synpred179
        public void synpred179_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:911:6: ( INC )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:911:6: INC
            {
                Match(input, INC, FOLLOW_INC_in_synpred1794102); if (failed) return;

            }
        }
        // $ANTLR end synpred179

        // $ANTLR start synpred180
        public void synpred180_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:912:6: ( DEC )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:912:6: DEC
            {
                Match(input, DEC, FOLLOW_DEC_in_synpred1804121); if (failed) return;

            }
        }
        // $ANTLR end synpred180

        // $ANTLR start synpred190
        public void synpred190_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:942:4: ( newFullExpression )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:942:4: newFullExpression
            {
                PushFollow(FOLLOW_newFullExpression_in_synpred1904253);
                newFullExpression();
                followingStackPointer_--;
                if (failed) return;

            }
        }
        // $ANTLR end synpred190

        // $ANTLR start synpred191
        public void synpred191_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:943:4: ( newShortExpression )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:943:4: newShortExpression
            {
                PushFollow(FOLLOW_newShortExpression_in_synpred1914258);
                newShortExpression();
                followingStackPointer_--;
                if (failed) return;

            }
        }
        // $ANTLR end synpred191

        // $ANTLR start synpred203
        public void synpred203_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1007:5: ( DOT qualifiedIdent )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1007:5: DOT qualifiedIdent
            {
                Match(input, DOT, FOLLOW_DOT_in_synpred2034491); if (failed) return;
                PushFollow(FOLLOW_qualifiedIdent_in_synpred2034493);
                qualifiedIdent();
                followingStackPointer_--;
                if (failed) return;

            }
        }
        // $ANTLR end synpred203

        // $ANTLR start synpred204
        public void synpred204_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1008:5: ( brackets )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1008:5: brackets
            {
                PushFollow(FOLLOW_brackets_in_synpred2044510);
                brackets();
                followingStackPointer_--;
                if (failed) return;

            }
        }
        // $ANTLR end synpred204

        // $ANTLR start synpred205
        public void synpred205_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1017:4: ( fullNewSubexpression )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1017:4: fullNewSubexpression
            {
                PushFollow(FOLLOW_fullNewSubexpression_in_synpred2054554);
                fullNewSubexpression();
                followingStackPointer_--;
                if (failed) return;

            }
        }
        // $ANTLR end synpred205

        // $ANTLR start synpred207
        public void synpred207_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1032:22: ( comment )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1032:22: comment
            {
                PushFollow(FOLLOW_comment_in_synpred2074612);
                comment();
                followingStackPointer_--;
                if (failed) return;

            }
        }
        // $ANTLR end synpred207

        // $ANTLR start synpred209
        public void synpred209_fragment() //throws RecognitionException
        {
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1033:21: ( comment )
            // C:\\Users\\sephiroth\\Documents\\Visual Studio 2005\\Projects\\AS3Parser\\AS3Parser\\AS.g:1033:21: comment
            {
                PushFollow(FOLLOW_comment_in_synpred2094631);
                comment();
                followingStackPointer_--;
                if (failed) return;

            }
        }
        // $ANTLR end synpred209

        public bool synpred205()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred205_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred204()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred204_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred49()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred49_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred2()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred2_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred203()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred203_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred1()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred1_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred78()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred78_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred123()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred123_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred73()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred73_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred180()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred180_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred87()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred87_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred86()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred86_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred85()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred85_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred84()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred84_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred51()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred51_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred20()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred20_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred162()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred162_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred191()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred191_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred160()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred160_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred190()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred190_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred69()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred69_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred149()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred149_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred68()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred68_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred99()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred99_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred179()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred179_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred117()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred117_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred67()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred67_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred98()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred98_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred178()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred178_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred66()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred66_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred176()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred176_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred209()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred209_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }
        public bool synpred207()
        {
            backtracking++;
            int start = input.Mark();
            try
            {
                synpred207_fragment(); // can never throw exception
            }
            catch (RecognitionException re)
            {
                Console.Error.WriteLine("impossible: " + re);
            }
            bool success = !failed;
            input.Rewind(start);
            backtracking--;
            failed = false;
            return success;
        }


        private void InitializeCyclicDFAs()
        {
        }



        public static readonly BitSet FOLLOW_as2CompilationUnit_in_compilationUnit348 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_as3CompilationUnit_in_compilationUnit354 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_commentExpression_in_as2CompilationUnit382 = new BitSet(new ulong[] { 0x7000000000000000UL, 0x000006FC00000000UL, 0x03E0800600000000UL });
        public static readonly BitSet FOLLOW_importDefinition_in_as2CompilationUnit388 = new BitSet(new ulong[] { 0x7000000000000000UL, 0x000006FC00000000UL, 0x03E0800600000000UL });
        public static readonly BitSet FOLLOW_annotations_in_as2CompilationUnit394 = new BitSet(new ulong[] { 0x6000000000000000UL, 0x000006FC00000000UL, 0x03E0800600000000UL });
        public static readonly BitSet FOLLOW_commentExpression_in_as2CompilationUnit398 = new BitSet(new ulong[] { 0x6000000000000000UL, 0x000006FC00000000UL, 0x03E0800600000000UL });
        public static readonly BitSet FOLLOW_as2Type_in_as2CompilationUnit404 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_modifiers_in_as2Type417 = new BitSet(new ulong[] { 0x6000000000000000UL });
        public static readonly BitSet FOLLOW_as2ClassDefinition_in_as2Type423 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_as2InterfaceDefinition_in_as2Type429 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_commentExpression_in_as3CompilationUnit447 = new BitSet(new ulong[] { 0x0100000000000000UL });
        public static readonly BitSet FOLLOW_packageDecl_in_as3CompilationUnit452 = new BitSet(new ulong[] { 0x7800000000000000UL, 0x000006FC00000790UL, 0x03E0800600000000UL });
        public static readonly BitSet FOLLOW_packageBlockEntry_in_as3CompilationUnit456 = new BitSet(new ulong[] { 0x7800000000000000UL, 0x000006FC00000790UL, 0x03E0800600000000UL });
        public static readonly BitSet FOLLOW_EOF_in_as3CompilationUnit461 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_PACKAGE_in_packageDecl473 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x0000047C400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_identifier_in_packageDecl476 = new BitSet(new ulong[] { 0x0200000000000000UL });
        public static readonly BitSet FOLLOW_packageBlock_in_packageDecl481 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_LCURLY_in_packageBlock492 = new BitSet(new ulong[] { 0x7C00000000000000UL, 0x000006FC00000790UL, 0x03E0800600000000UL });
        public static readonly BitSet FOLLOW_packageBlockEntry_in_packageBlock496 = new BitSet(new ulong[] { 0x7C00000000000000UL, 0x000006FC00000790UL, 0x03E0800600000000UL });
        public static readonly BitSet FOLLOW_RCURLY_in_packageBlock501 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_importDefinition_in_packageBlockEntry525 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_annotations_in_packageBlockEntry531 = new BitSet(new ulong[] { 0x6000000000000000UL, 0x0000067C00000790UL, 0x03E0000000000000UL });
        public static readonly BitSet FOLLOW_modifiers_in_packageBlockEntry539 = new BitSet(new ulong[] { 0x6000000000000000UL, 0x0000000000000790UL });
        public static readonly BitSet FOLLOW_classDefinition_in_packageBlockEntry547 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_interfaceDefinition_in_packageBlockEntry555 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_variableDefinition_in_packageBlockEntry563 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_methodDefinition_in_packageBlockEntry571 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_namespaceDefinition_in_packageBlockEntry579 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_useNamespaceDirective_in_packageBlockEntry587 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_SEMI_in_packageBlockEntry598 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_commentExpression_in_packageBlockEntry609 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_EOF_in_endOfFile620 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_IMPORT_in_importDefinition632 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x00000404400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_identifierStar_in_importDefinition635 = new BitSet(new ulong[] { 0x0800000000000002UL });
        public static readonly BitSet FOLLOW_semi_in_importDefinition637 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_SEMI_in_semi648 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_CLASS_in_classDefinition665 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x00000404400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_ident_in_classDefinition667 = new BitSet(new ulong[] { 0x8200000000000000UL, 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_classExtendsClause_in_classDefinition671 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_implementsClause_in_classDefinition675 = new BitSet(new ulong[] { 0x0200000000000000UL });
        public static readonly BitSet FOLLOW_typeBlock_in_classDefinition679 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_CLASS_in_as2ClassDefinition709 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000047C400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_identifier_in_as2ClassDefinition711 = new BitSet(new ulong[] { 0x8200000000000000UL, 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_classExtendsClause_in_as2ClassDefinition715 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_implementsClause_in_as2ClassDefinition719 = new BitSet(new ulong[] { 0x0200000000000000UL });
        public static readonly BitSet FOLLOW_typeBlock_in_as2ClassDefinition723 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_INTERFACE_in_interfaceDefinition758 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x00000404400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_ident_in_interfaceDefinition760 = new BitSet(new ulong[] { 0x8200000000000000UL });
        public static readonly BitSet FOLLOW_interfaceExtendsClause_in_interfaceDefinition764 = new BitSet(new ulong[] { 0x0200000000000000UL });
        public static readonly BitSet FOLLOW_typeBlock_in_interfaceDefinition768 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_INTERFACE_in_as2InterfaceDefinition801 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000047C400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_identifier_in_as2InterfaceDefinition803 = new BitSet(new ulong[] { 0x8200000000000000UL });
        public static readonly BitSet FOLLOW_interfaceExtendsClause_in_as2InterfaceDefinition807 = new BitSet(new ulong[] { 0x0200000000000000UL });
        public static readonly BitSet FOLLOW_typeBlock_in_as2InterfaceDefinition811 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_EXTENDS_in_classExtendsClause839 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000047C400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_identifier_in_classExtendsClause842 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_EXTENDS_in_interfaceExtendsClause855 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000047C400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_identifier_in_interfaceExtendsClause858 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000000001UL });
        public static readonly BitSet FOLLOW_COMMA_in_interfaceExtendsClause862 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000047C400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_identifier_in_interfaceExtendsClause865 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000000001UL });
        public static readonly BitSet FOLLOW_IMPLEMENTS_in_implementsClause880 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000047C400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_identifier_in_implementsClause883 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000000001UL });
        public static readonly BitSet FOLLOW_COMMA_in_implementsClause887 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000047C400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_identifier_in_implementsClause890 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000000001UL });
        public static readonly BitSet FOLLOW_LCURLY_in_typeBlock904 = new BitSet(new ulong[] { 0x1400000000000000UL, 0x000006FC00000614UL, 0x03E0800600000000UL });
        public static readonly BitSet FOLLOW_typeBlockEntry_in_typeBlock908 = new BitSet(new ulong[] { 0x1400000000000000UL, 0x000006FC00000614UL, 0x03E0800600000000UL });
        public static readonly BitSet FOLLOW_RCURLY_in_typeBlock913 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_modifiers_in_typeBlockEntry937 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000000610UL });
        public static readonly BitSet FOLLOW_variableDefinition_in_typeBlockEntry944 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_methodDefinition_in_typeBlockEntry951 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_importDefinition_in_typeBlockEntry961 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_as2IncludeDirective_in_typeBlockEntry966 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_commentExpression_in_typeBlockEntry971 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_annotations_in_typeBlockEntry976 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_INCLUDE_DIRECTIVE_in_as2IncludeDirective987 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000000008UL });
        public static readonly BitSet FOLLOW_STRING_LITERAL_in_as2IncludeDirective989 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_175_in_includeDirective1008 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000000008UL });
        public static readonly BitSet FOLLOW_STRING_LITERAL_in_includeDirective1012 = new BitSet(new ulong[] { 0x0800000000000002UL });
        public static readonly BitSet FOLLOW_semi_in_includeDirective1016 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_FUNCTION_in_methodDefinition1029 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x00000404400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_optionalAccessorRole_in_methodDefinition1035 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x00000404400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_ident_in_methodDefinition1039 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000001000UL });
        public static readonly BitSet FOLLOW_parameterDeclarationList_in_methodDefinition1043 = new BitSet(new ulong[] { 0x0A00000000000002UL, 0x0000000000400000UL });
        public static readonly BitSet FOLLOW_typeExpression_in_methodDefinition1047 = new BitSet(new ulong[] { 0x0A00000000000002UL });
        public static readonly BitSet FOLLOW_block_in_methodDefinition1053 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_semi_in_methodDefinition1055 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_accessorRole_in_optionalAccessorRole1119 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_set_in_accessorRole0 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_NAMESPACE_in_namespaceDefinition1158 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x00000404400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_ident_in_namespaceDefinition1160 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_USE_in_useNamespaceDirective1185 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000000080UL });
        public static readonly BitSet FOLLOW_NAMESPACE_in_useNamespaceDirective1187 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x00000404400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_ident_in_useNamespaceDirective1189 = new BitSet(new ulong[] { 0x0800000000000002UL });
        public static readonly BitSet FOLLOW_semi_in_useNamespaceDirective1191 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_varOrConst_in_variableDefinition1215 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x00000404400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_variableDeclarator_in_variableDefinition1217 = new BitSet(new ulong[] { 0x0800000000000002UL, 0x0000000000000001UL });
        public static readonly BitSet FOLLOW_COMMA_in_variableDefinition1222 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x00000404400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_variableDeclarator_in_variableDefinition1224 = new BitSet(new ulong[] { 0x0800000000000002UL, 0x0000000000000001UL });
        public static readonly BitSet FOLLOW_semi_in_variableDefinition1230 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_set_in_varOrConst0 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_ident_in_variableDeclarator1272 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000400800UL });
        public static readonly BitSet FOLLOW_typeExpression_in_variableDeclarator1275 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000000800UL });
        public static readonly BitSet FOLLOW_variableInitializer_in_variableDeclarator1278 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_varOrConst_in_declaration1289 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x00000404400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_variableDeclarator_in_declaration1292 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000000001UL });
        public static readonly BitSet FOLLOW_declarationTail_in_declaration1296 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_COMMA_in_declarationTail1318 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x00000404400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_variableDeclarator_in_declarationTail1321 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000000001UL });
        public static readonly BitSet FOLLOW_ASSIGN_in_variableInitializer1334 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_assignmentExpression_in_variableInitializer1337 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_LPAREN_in_parameterDeclarationList1350 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x00000404400065E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_parameterDeclaration_in_parameterDeclarationList1356 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000002001UL });
        public static readonly BitSet FOLLOW_COMMA_in_parameterDeclarationList1362 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x00000404400045E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_parameterDeclaration_in_parameterDeclarationList1364 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000002001UL });
        public static readonly BitSet FOLLOW_RPAREN_in_parameterDeclarationList1375 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_basicParameterDeclaration_in_parameterDeclaration1398 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_parameterRestDeclaration_in_parameterDeclaration1402 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_CONST_in_basicParameterDeclaration1413 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x00000404400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_ident_in_basicParameterDeclaration1416 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000400800UL });
        public static readonly BitSet FOLLOW_typeExpression_in_basicParameterDeclaration1418 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000000800UL });
        public static readonly BitSet FOLLOW_parameterDefault_in_basicParameterDeclaration1421 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_ASSIGN_in_parameterDefault1465 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_assignmentExpression_in_parameterDefault1468 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_REST_in_parameterRestDeclaration1479 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x00000404400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_ident_in_parameterRestDeclaration1481 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_LCURLY_in_block1505 = new BitSet(new ulong[] { 0x0E00000000000000UL, 0x000004FC799E97F8UL, 0x00130007FFBF70C4UL });
        public static readonly BitSet FOLLOW_blockEntry_in_block1507 = new BitSet(new ulong[] { 0x0E00000000000000UL, 0x000004FC799E97F8UL, 0x00130007FFBF70C4UL });
        public static readonly BitSet FOLLOW_RCURLY_in_block1510 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_statement_in_blockEntry1532 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_LPAREN_in_condition1543 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_expression_in_condition1545 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000002000UL });
        public static readonly BitSet FOLLOW_RPAREN_in_condition1547 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_block_in_statement1573 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_declarationStatement_in_statement1578 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_expressionStatement_in_statement1583 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_ifStatement_in_statement1588 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_forEachStatement_in_statement1595 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_forStatement_in_statement1600 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_whileStatement_in_statement1608 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_doWhileStatement_in_statement1616 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_withStatement_in_statement1625 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_switchStatement_in_statement1634 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_breakStatement_in_statement1643 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_continueStatement_in_statement1651 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_returnStatement_in_statement1659 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_throwStatement_in_statement1667 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_tryStatement_in_statement1676 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_defaultXMLNamespaceStatement_in_statement1685 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_commentExpression_in_statement1694 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_SEMI_in_statement1702 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_declaration_in_declarationStatement1724 = new BitSet(new ulong[] { 0x0800000000000002UL });
        public static readonly BitSet FOLLOW_semi_in_declarationStatement1726 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_expressionList_in_expressionStatement1747 = new BitSet(new ulong[] { 0x0800000000000002UL });
        public static readonly BitSet FOLLOW_semi_in_expressionStatement1749 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_IF_in_ifStatement1771 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000001000UL });
        public static readonly BitSet FOLLOW_condition_in_ifStatement1774 = new BitSet(new ulong[] { 0x0A00000000000000UL, 0x000004FC799E97F8UL, 0x00130007FFBF70C4UL });
        public static readonly BitSet FOLLOW_commentExpression_in_ifStatement1776 = new BitSet(new ulong[] { 0x0A00000000000000UL, 0x000004FC799E97F8UL, 0x00130007FFBF70C4UL });
        public static readonly BitSet FOLLOW_statement_in_ifStatement1779 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000010000UL, 0x0000000600000000UL });
        public static readonly BitSet FOLLOW_commentExpression_in_ifStatement1781 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000010000UL });
        public static readonly BitSet FOLLOW_elseClause_in_ifStatement1791 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_ELSE_in_elseClause1804 = new BitSet(new ulong[] { 0x0A00000000000000UL, 0x000004FC799E97F8UL, 0x00130007FFBF70C4UL });
        public static readonly BitSet FOLLOW_commentExpression_in_elseClause1807 = new BitSet(new ulong[] { 0x0A00000000000000UL, 0x000004FC799E97F8UL, 0x00130007FFBF70C4UL });
        public static readonly BitSet FOLLOW_statement_in_elseClause1810 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_176_in_throwStatement1821 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_expression_in_throwStatement1824 = new BitSet(new ulong[] { 0x0800000000000002UL });
        public static readonly BitSet FOLLOW_semi_in_throwStatement1826 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_177_in_tryStatement1837 = new BitSet(new ulong[] { 0x0200000000000000UL });
        public static readonly BitSet FOLLOW_block_in_tryStatement1841 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000000000UL, 0x000C000000000000UL });
        public static readonly BitSet FOLLOW_catchBlock_in_tryStatement1845 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000000000UL, 0x000C000000000000UL });
        public static readonly BitSet FOLLOW_finallyBlock_in_tryStatement1850 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_178_in_catchBlock1862 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000001000UL });
        public static readonly BitSet FOLLOW_LPAREN_in_catchBlock1864 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x00000404400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_ident_in_catchBlock1867 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000402000UL });
        public static readonly BitSet FOLLOW_typeExpression_in_catchBlock1869 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000002000UL });
        public static readonly BitSet FOLLOW_RPAREN_in_catchBlock1872 = new BitSet(new ulong[] { 0x0200000000000000UL });
        public static readonly BitSet FOLLOW_block_in_catchBlock1877 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_179_in_finallyBlock1888 = new BitSet(new ulong[] { 0x0200000000000000UL });
        public static readonly BitSet FOLLOW_block_in_finallyBlock1890 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_RETURN_in_returnStatement1901 = new BitSet(new ulong[] { 0x0A00000000000002UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_expression_in_returnStatement1904 = new BitSet(new ulong[] { 0x0800000000000002UL });
        public static readonly BitSet FOLLOW_semi_in_returnStatement1907 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_CONTINUE_in_continueStatement1920 = new BitSet(new ulong[] { 0x0800000000000002UL });
        public static readonly BitSet FOLLOW_semi_in_continueStatement1923 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_BREAK_in_breakStatement1934 = new BitSet(new ulong[] { 0x0800000000000002UL });
        public static readonly BitSet FOLLOW_semi_in_breakStatement1937 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_SWITCH_in_switchStatement1948 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000001000UL });
        public static readonly BitSet FOLLOW_condition_in_switchStatement1952 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x0000000000000000UL, 0x0000000600000000UL });
        public static readonly BitSet FOLLOW_commentExpression_in_switchStatement1954 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x0000000000000000UL, 0x0000000600000000UL });
        public static readonly BitSet FOLLOW_switchBlock_in_switchStatement1960 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_LCURLY_in_switchBlock1971 = new BitSet(new ulong[] { 0x0400000000000000UL, 0x0000000000A00000UL });
        public static readonly BitSet FOLLOW_caseStatement_in_switchBlock1976 = new BitSet(new ulong[] { 0x0400000000000000UL, 0x0000000000A00000UL });
        public static readonly BitSet FOLLOW_defaultStatement_in_switchBlock1983 = new BitSet(new ulong[] { 0x0400000000000000UL });
        public static readonly BitSet FOLLOW_RCURLY_in_switchBlock1989 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_CASE_in_caseStatement2014 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_expression_in_caseStatement2017 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000400000UL });
        public static readonly BitSet FOLLOW_COLON_in_caseStatement2019 = new BitSet(new ulong[] { 0x0A00000000000002UL, 0x000004FC799E97F8UL, 0x00130007FFBF70C4UL });
        public static readonly BitSet FOLLOW_switchStatementList_in_caseStatement2024 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_DEFAULT_in_defaultStatement2036 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000400000UL });
        public static readonly BitSet FOLLOW_COLON_in_defaultStatement2039 = new BitSet(new ulong[] { 0x0A00000000000002UL, 0x000004FC799E97F8UL, 0x00130007FFBF70C4UL });
        public static readonly BitSet FOLLOW_switchStatementList_in_defaultStatement2044 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_statement_in_switchStatementList2055 = new BitSet(new ulong[] { 0x0A00000000000002UL, 0x000004FC799E97F8UL, 0x00130007FFBF70C4UL });
        public static readonly BitSet FOLLOW_FOR_in_forEachStatement2078 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000002000000UL });
        public static readonly BitSet FOLLOW_EACH_in_forEachStatement2080 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000001000UL });
        public static readonly BitSet FOLLOW_LPAREN_in_forEachStatement2084 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x00000404400007E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_forInClause_in_forEachStatement2088 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000002000UL });
        public static readonly BitSet FOLLOW_RPAREN_in_forEachStatement2092 = new BitSet(new ulong[] { 0x0A00000000000000UL, 0x000004FC799E97F8UL, 0x00130007FFBF70C4UL });
        public static readonly BitSet FOLLOW_statement_in_forEachStatement2096 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_FOR_in_forStatement2132 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000001000UL });
        public static readonly BitSet FOLLOW_LPAREN_in_forStatement2136 = new BitSet(new ulong[] { 0x0A00000000000000UL, 0x000004FC400017F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_forInClause_in_forStatement2148 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000002000UL });
        public static readonly BitSet FOLLOW_RPAREN_in_forStatement2150 = new BitSet(new ulong[] { 0x0A00000000000000UL, 0x000004FC799E97F8UL, 0x00130007FFBF70C4UL });
        public static readonly BitSet FOLLOW_statement_in_forStatement2152 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_traditionalForClause_in_forStatement2173 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000002000UL });
        public static readonly BitSet FOLLOW_RPAREN_in_forStatement2175 = new BitSet(new ulong[] { 0x0A00000000000000UL, 0x000004FC799E97F8UL, 0x00130007FFBF70C4UL });
        public static readonly BitSet FOLLOW_statement_in_forStatement2177 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_forInit_in_traditionalForClause2208 = new BitSet(new ulong[] { 0x0800000000000000UL });
        public static readonly BitSet FOLLOW_SEMI_in_traditionalForClause2210 = new BitSet(new ulong[] { 0x0A00000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_forCond_in_traditionalForClause2218 = new BitSet(new ulong[] { 0x0800000000000000UL });
        public static readonly BitSet FOLLOW_SEMI_in_traditionalForClause2220 = new BitSet(new ulong[] { 0x0200000000000002UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_forIter_in_traditionalForClause2228 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_forInClauseDecl_in_forInClause2240 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000004000000UL });
        public static readonly BitSet FOLLOW_IN_in_forInClause2242 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_forInClauseTail_in_forInClause2245 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_declaration_in_forInClauseDecl2266 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_ident_in_forInClauseDecl2270 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_expressionList_in_forInClauseTail2292 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_declaration_in_forInit2316 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_expressionList_in_forInit2320 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_expressionList_in_forCond2358 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_expressionList_in_forIter2391 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_WHILE_in_whileStatement2414 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000001000UL });
        public static readonly BitSet FOLLOW_condition_in_whileStatement2417 = new BitSet(new ulong[] { 0x0A00000000000000UL, 0x000004FC799E97F8UL, 0x00130007FFBF70C4UL });
        public static readonly BitSet FOLLOW_commentExpression_in_whileStatement2420 = new BitSet(new ulong[] { 0x0A00000000000000UL, 0x000004FC799E97F8UL, 0x00130007FFBF70C4UL });
        public static readonly BitSet FOLLOW_statement_in_whileStatement2423 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_DO_in_doWhileStatement2435 = new BitSet(new ulong[] { 0x0A00000000000000UL, 0x000004FC799E97F8UL, 0x00130007FFBF70C4UL });
        public static readonly BitSet FOLLOW_commentExpression_in_doWhileStatement2438 = new BitSet(new ulong[] { 0x0A00000000000000UL, 0x000004FC799E97F8UL, 0x00130007FFBF70C4UL });
        public static readonly BitSet FOLLOW_statement_in_doWhileStatement2441 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000008000000UL });
        public static readonly BitSet FOLLOW_WHILE_in_doWhileStatement2443 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000001000UL });
        public static readonly BitSet FOLLOW_condition_in_doWhileStatement2447 = new BitSet(new ulong[] { 0x0800000000000002UL, 0x0000000000000000UL, 0x0000000600000000UL });
        public static readonly BitSet FOLLOW_commentExpression_in_doWhileStatement2449 = new BitSet(new ulong[] { 0x0800000000000002UL, 0x0000000000000000UL, 0x0000000600000000UL });
        public static readonly BitSet FOLLOW_semi_in_doWhileStatement2453 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_WITH_in_withStatement2464 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000001000UL });
        public static readonly BitSet FOLLOW_condition_in_withStatement2467 = new BitSet(new ulong[] { 0x0A00000000000000UL, 0x000004FC799E97F8UL, 0x00130007FFBF70C4UL });
        public static readonly BitSet FOLLOW_commentExpression_in_withStatement2470 = new BitSet(new ulong[] { 0x0A00000000000000UL, 0x000004FC799E97F8UL, 0x00130007FFBF70C4UL });
        public static readonly BitSet FOLLOW_statement_in_withStatement2473 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_DEFAULT_in_defaultXMLNamespaceStatement2485 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000040000000UL });
        public static readonly BitSet FOLLOW_XML_in_defaultXMLNamespaceStatement2487 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000000080UL });
        public static readonly BitSet FOLLOW_NAMESPACE_in_defaultXMLNamespaceStatement2489 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000000800UL });
        public static readonly BitSet FOLLOW_ASSIGN_in_defaultXMLNamespaceStatement2491 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_expression_in_defaultXMLNamespaceStatement2493 = new BitSet(new ulong[] { 0x0800000000000002UL });
        public static readonly BitSet FOLLOW_semi_in_defaultXMLNamespaceStatement2495 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_COLON_in_typeExpression2518 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000047CC00001E0UL, 0x00100000000000C0UL });
        public static readonly BitSet FOLLOW_identifier_in_typeExpression2526 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_180_in_typeExpression2530 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_STAR_in_typeExpression2534 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_qualifiedIdent_in_identifier2566 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000100000000UL });
        public static readonly BitSet FOLLOW_DOT_in_identifier2584 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000047C400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_qualifiedIdent_in_identifier2586 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000100000000UL });
        public static readonly BitSet FOLLOW_namespaceName_in_qualifiedIdent2614 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000200000000UL });
        public static readonly BitSet FOLLOW_DBL_COLON_in_qualifiedIdent2616 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x00000404400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_ident_in_qualifiedIdent2620 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_IDENT_in_namespaceName2632 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_reservedNamespace_in_namespaceName2636 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_set_in_reservedNamespace0 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_ident_in_identifierStar2673 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000100000000UL });
        public static readonly BitSet FOLLOW_DOT_in_identifierStar2690 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x00000404400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_ident_in_identifierStar2692 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000100000000UL });
        public static readonly BitSet FOLLOW_DOT_in_identifierStar2704 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000080000000UL });
        public static readonly BitSet FOLLOW_STAR_in_identifierStar2706 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_annotation_in_annotations2739 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000008000000000UL, 0x0000800000000000UL });
        public static readonly BitSet FOLLOW_includeDirective_in_annotations2745 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000008000000000UL, 0x0000800000000000UL });
        public static readonly BitSet FOLLOW_LBRACK_in_annotation2772 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x00000404400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_ident_in_annotation2776 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000010000001000UL });
        public static readonly BitSet FOLLOW_annotationParamList_in_annotation2780 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000010000000000UL });
        public static readonly BitSet FOLLOW_RBRACK_in_annotation2785 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_LPAREN_in_annotationParamList2811 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x00000404400021E8UL, 0x00000000FE0040C4UL });
        public static readonly BitSet FOLLOW_annotationParam_in_annotationParamList2817 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000002001UL });
        public static readonly BitSet FOLLOW_COMMA_in_annotationParamList2823 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x00000404400001E8UL, 0x00000000FE0040C4UL });
        public static readonly BitSet FOLLOW_annotationParam_in_annotationParamList2825 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000002001UL });
        public static readonly BitSet FOLLOW_RPAREN_in_annotationParamList2836 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_ident_in_annotationParam2863 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000000800UL });
        public static readonly BitSet FOLLOW_ASSIGN_in_annotationParam2865 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000000008UL, 0x00000000FE004004UL });
        public static readonly BitSet FOLLOW_constant_in_annotationParam2867 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_constant_in_annotationParam2882 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_ident_in_annotationParam2891 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_modifier_in_modifiers2906 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000067C00000000UL, 0x03E0000000000000UL });
        public static readonly BitSet FOLLOW_namespaceName_in_modifier2929 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_STATIC_in_modifier2934 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_181_in_modifier2939 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_182_in_modifier2944 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_183_in_modifier2949 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_184_in_modifier2954 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_DYNAMIC_in_modifier2959 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_185_in_modifier2964 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_LPAREN_in_arguments2985 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_expressionList_in_arguments2987 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000002000UL });
        public static readonly BitSet FOLLOW_RPAREN_in_arguments2989 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_LPAREN_in_arguments3004 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000002000UL });
        public static readonly BitSet FOLLOW_RPAREN_in_arguments3006 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_assignmentExpression_in_element3036 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_LBRACK_in_arrayLiteral3058 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000005FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_elementList_in_arrayLiteral3060 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000010000000000UL });
        public static readonly BitSet FOLLOW_RBRACK_in_arrayLiteral3063 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_nonemptyElementList_in_elementList3085 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000000001UL });
        public static readonly BitSet FOLLOW_COMMA_in_elementList3088 = new BitSet(new ulong[] { 0x0200000000000002UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_nonemptyElementList_in_elementList3091 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000000001UL });
        public static readonly BitSet FOLLOW_assignmentExpression_in_nonemptyElementList3116 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000000001UL });
        public static readonly BitSet FOLLOW_COMMA_in_nonemptyElementList3119 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_assignmentExpression_in_nonemptyElementList3121 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000000001UL });
        public static readonly BitSet FOLLOW_LCURLY_in_objectLiteral3136 = new BitSet(new ulong[] { 0x0400000000000000UL, 0x00000404400001E0UL, 0x00000000F00000C0UL });
        public static readonly BitSet FOLLOW_fieldList_in_objectLiteral3138 = new BitSet(new ulong[] { 0x0400000000000000UL });
        public static readonly BitSet FOLLOW_RCURLY_in_objectLiteral3141 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_literalField_in_fieldList3164 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000000001UL });
        public static readonly BitSet FOLLOW_COMMA_in_fieldList3167 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x00000404400001E0UL, 0x00000000F00000C0UL });
        public static readonly BitSet FOLLOW_literalField_in_fieldList3170 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000000001UL });
        public static readonly BitSet FOLLOW_fieldName_in_literalField3187 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000400000UL });
        public static readonly BitSet FOLLOW_COLON_in_literalField3189 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_element_in_literalField3191 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_ident_in_fieldName3215 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_number_in_fieldName3220 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_assignmentExpression_in_expression3242 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_assignmentExpression_in_expressionList3254 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000000001UL });
        public static readonly BitSet FOLLOW_COMMA_in_expressionList3257 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_assignmentExpression_in_expressionList3259 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000000001UL });
        public static readonly BitSet FOLLOW_conditionalExpression_in_assignmentExpression3288 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x00FFF80000000800UL });
        public static readonly BitSet FOLLOW_assignmentOperator_in_assignmentExpression3298 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_assignmentExpression_in_assignmentExpression3302 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x00FFF80000000800UL });
        public static readonly BitSet FOLLOW_set_in_assignmentOperator0 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_logicalOrExpression_in_conditionalExpression3396 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0100000000000000UL });
        public static readonly BitSet FOLLOW_QUESTION_in_conditionalExpression3410 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_conditionalSubExpression_in_conditionalExpression3415 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_assignmentExpression_in_conditionalSubExpression3444 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000400000UL });
        public static readonly BitSet FOLLOW_COLON_in_conditionalSubExpression3446 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_assignmentExpression_in_conditionalSubExpression3449 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_logicalAndExpression_in_logicalOrExpression3463 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0200000000000000UL, 0x0400000000000000UL });
        public static readonly BitSet FOLLOW_logicalOrOperator_in_logicalOrExpression3468 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_logicalAndExpression_in_logicalOrExpression3471 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0200000000000000UL, 0x0400000000000000UL });
        public static readonly BitSet FOLLOW_set_in_logicalOrOperator0 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_bitwiseOrExpression_in_logicalAndExpression3500 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0400000000000000UL, 0x0800000000000000UL });
        public static readonly BitSet FOLLOW_logicalAndOperator_in_logicalAndExpression3505 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_bitwiseOrExpression_in_logicalAndExpression3508 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0400000000000000UL, 0x0800000000000000UL });
        public static readonly BitSet FOLLOW_set_in_logicalAndOperator0 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_bitwiseXorExpression_in_bitwiseOrExpression3537 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0800000000000000UL });
        public static readonly BitSet FOLLOW_BOR_in_bitwiseOrExpression3542 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_bitwiseXorExpression_in_bitwiseOrExpression3545 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0800000000000000UL });
        public static readonly BitSet FOLLOW_bitwiseAndExpression_in_bitwiseXorExpression3559 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x1000000000000000UL });
        public static readonly BitSet FOLLOW_BXOR_in_bitwiseXorExpression3564 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_bitwiseAndExpression_in_bitwiseXorExpression3567 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x1000000000000000UL });
        public static readonly BitSet FOLLOW_equalityExpression_in_bitwiseAndExpression3581 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x2000000000000000UL });
        public static readonly BitSet FOLLOW_BAND_in_bitwiseAndExpression3586 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_equalityExpression_in_bitwiseAndExpression3589 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x2000000000000000UL });
        public static readonly BitSet FOLLOW_relationalExpression_in_equalityExpression3603 = new BitSet(new ulong[] { 0x0000000000000002UL, 0xC000000000000000UL, 0x0000000000000003UL });
        public static readonly BitSet FOLLOW_equalityOperator_in_equalityExpression3608 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_relationalExpression_in_equalityExpression3613 = new BitSet(new ulong[] { 0x0000000000000002UL, 0xC000000000000000UL, 0x0000000000000003UL });
        public static readonly BitSet FOLLOW_set_in_equalityOperator0 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_shiftExpression_in_relationalExpression3653 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000004000000UL, 0x00000000000001FCUL });
        public static readonly BitSet FOLLOW_relationalOperator_in_relationalExpression3663 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_shiftExpression_in_relationalExpression3666 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000004000000UL, 0x00000000000001FCUL });
        public static readonly BitSet FOLLOW_IN_in_relationalOperator3681 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_LT_in_relationalOperator3686 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_GT_in_relationalOperator3690 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_LE_in_relationalOperator3694 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_GE_in_relationalOperator3698 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_IS_in_relationalOperator3702 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_AS_in_relationalOperator3706 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_INSTANCEOF_in_relationalOperator3710 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_additiveExpression_in_shiftExpression3722 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000000000UL, 0x0000000000000E00UL });
        public static readonly BitSet FOLLOW_shiftOperator_in_shiftExpression3727 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_additiveExpression_in_shiftExpression3730 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000000000UL, 0x0000000000000E00UL });
        public static readonly BitSet FOLLOW_set_in_shiftOperator0 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_multiplicativeExpression_in_additiveExpression3763 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000000000UL, 0x0000000000003000UL });
        public static readonly BitSet FOLLOW_additiveOperator_in_additiveExpression3768 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_multiplicativeExpression_in_additiveExpression3771 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000000000UL, 0x0000000000003000UL });
        public static readonly BitSet FOLLOW_set_in_additiveOperator0 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_unaryExpression_in_multiplicativeExpression3801 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000080000000UL, 0x000000000000C000UL });
        public static readonly BitSet FOLLOW_multiplicativeOperator_in_multiplicativeExpression3807 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_unaryExpression_in_multiplicativeExpression3813 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000080000000UL, 0x000000000000C000UL });
        public static readonly BitSet FOLLOW_set_in_multiplicativeOperator0 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_INC_in_unaryExpression3851 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_unaryExpression_in_unaryExpression3853 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_DEC_in_unaryExpression3869 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_unaryExpression_in_unaryExpression3871 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_MINUS_in_unaryExpression3885 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_unaryExpression_in_unaryExpression3887 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_PLUS_in_unaryExpression3900 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_unaryExpression_in_unaryExpression3902 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression3915 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_DELETE_in_unaryExpressionNotPlusMinus3926 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00000001FF8040C4UL });
        public static readonly BitSet FOLLOW_postfixExpression_in_unaryExpressionNotPlusMinus3928 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_180_in_unaryExpressionNotPlusMinus3941 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus3943 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_TYPEOF_in_unaryExpressionNotPlusMinus3956 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus3958 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_LNOT_in_unaryExpressionNotPlusMinus3971 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus3973 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_BNOT_in_unaryExpressionNotPlusMinus3986 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus3988 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_postfixExpression_in_unaryExpressionNotPlusMinus4001 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_primaryExpression_in_postfixExpression4014 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000008100001000UL, 0x0000000000430000UL });
        public static readonly BitSet FOLLOW_propOrIdent_in_postfixExpression4027 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000008100001000UL, 0x0000000000430000UL });
        public static readonly BitSet FOLLOW_DOT_in_postfixExpression4039 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000080001000UL, 0x0000000000800000UL });
        public static readonly BitSet FOLLOW_e4xExpression_in_postfixExpression4041 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000008100001000UL, 0x0000000000430000UL });
        public static readonly BitSet FOLLOW_LBRACK_in_postfixExpression4047 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_expression_in_postfixExpression4049 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000010000000000UL });
        public static readonly BitSet FOLLOW_RBRACK_in_postfixExpression4051 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000008100001000UL, 0x0000000000430000UL });
        public static readonly BitSet FOLLOW_E4X_DESC_in_postfixExpression4068 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000080001000UL, 0x0000000000800000UL });
        public static readonly BitSet FOLLOW_e4xExpression_in_postfixExpression4070 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000008100001000UL, 0x0000000000430000UL });
        public static readonly BitSet FOLLOW_arguments_in_postfixExpression4076 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000008100001000UL, 0x0000000000430000UL });
        public static readonly BitSet FOLLOW_INC_in_postfixExpression4102 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_DEC_in_postfixExpression4121 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_STAR_in_e4xExpression4148 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_e4xAttributeIdentifier_in_e4xExpression4154 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_e4xFilterPredicate_in_e4xExpression4159 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_E4X_ATTRI_in_e4xAttributeIdentifier4170 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x000004FCC00001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_qualifiedIdent_in_e4xAttributeIdentifier4176 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_STAR_in_e4xAttributeIdentifier4182 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_LBRACK_in_e4xAttributeIdentifier4188 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_expression_in_e4xAttributeIdentifier4190 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000010000000000UL });
        public static readonly BitSet FOLLOW_RBRACK_in_e4xAttributeIdentifier4192 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_LPAREN_in_e4xFilterPredicate4207 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_expression_in_e4xFilterPredicate4212 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000002000UL });
        public static readonly BitSet FOLLOW_RPAREN_in_e4xFilterPredicate4216 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_UNDEFINED_in_primaryExpression4228 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_constant_in_primaryExpression4233 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_arrayLiteral_in_primaryExpression4238 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_objectLiteral_in_primaryExpression4243 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_functionDefinition_in_primaryExpression4248 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_newFullExpression_in_primaryExpression4253 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_newShortExpression_in_primaryExpression4258 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_encapsulatedExpression_in_primaryExpression4263 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_e4xAttributeIdentifier_in_primaryExpression4268 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_qualifiedIdent_in_primaryExpression4273 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_DOT_in_propOrIdent4293 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000047C400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_qualifiedIdent_in_propOrIdent4297 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_xmlLiteral_in_constant4325 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_regexpLiteral_in_constant4330 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_number_in_constant4335 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_STRING_LITERAL_in_constant4340 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_TRUE_in_constant4345 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_FALSE_in_constant4350 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_NULL_in_constant4355 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_set_in_number0 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_LT_in_xmlLiteral4408 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_DIV_in_regexpLiteral4438 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_NEW_in_newFullExpression4459 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00000001FF8040C4UL });
        public static readonly BitSet FOLLOW_fullNewSubexpression_in_newFullExpression4462 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000001000UL });
        public static readonly BitSet FOLLOW_arguments_in_newFullExpression4464 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_primaryExpression_in_fullNewSubexpression4477 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000008100000000UL });
        public static readonly BitSet FOLLOW_DOT_in_fullNewSubexpression4491 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000047C400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_qualifiedIdent_in_fullNewSubexpression4493 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000008100000000UL });
        public static readonly BitSet FOLLOW_brackets_in_fullNewSubexpression4510 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000008100000000UL });
        public static readonly BitSet FOLLOW_NEW_in_newShortExpression4538 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00000001FF8040C4UL });
        public static readonly BitSet FOLLOW_shortNewSubexpression_in_newShortExpression4541 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_fullNewSubexpression_in_shortNewSubexpression4554 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_newShortExpression_in_shortNewSubexpression4559 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_DOT_in_propertyOperator4571 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000047C400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_qualifiedIdent_in_propertyOperator4574 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_brackets_in_propertyOperator4579 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_comment_in_commentExpression4591 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_singleLineComment_in_comment4610 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000000000UL, 0x0000000600000000UL });
        public static readonly BitSet FOLLOW_comment_in_comment4612 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000000000UL, 0x0000000600000000UL });
        public static readonly BitSet FOLLOW_multilineComment_in_comment4629 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000000000UL, 0x0000000600000000UL });
        public static readonly BitSet FOLLOW_comment_in_comment4631 = new BitSet(new ulong[] { 0x0000000000000002UL, 0x0000000000000000UL, 0x0000000600000000UL });
        public static readonly BitSet FOLLOW_SL_COMMENT_in_singleLineComment4654 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_ML_COMMENT_in_multilineComment4674 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_LBRACK_in_brackets4699 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_expressionList_in_brackets4701 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000010000000000UL });
        public static readonly BitSet FOLLOW_RBRACK_in_brackets4703 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_LPAREN_in_encapsulatedExpression4724 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_assignmentExpression_in_encapsulatedExpression4726 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000002000UL });
        public static readonly BitSet FOLLOW_RPAREN_in_encapsulatedExpression4728 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_FUNCTION_in_functionDefinition4752 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000000001000UL });
        public static readonly BitSet FOLLOW_parameterDeclarationList_in_functionDefinition4754 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x0000000000400000UL });
        public static readonly BitSet FOLLOW_typeExpression_in_functionDefinition4756 = new BitSet(new ulong[] { 0x0200000000000000UL });
        public static readonly BitSet FOLLOW_block_in_functionDefinition4759 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_IDENT_in_ident4786 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_USE_in_ident4793 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_XML_in_ident4805 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_DYNAMIC_in_ident4817 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_NAMESPACE_in_ident4829 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_IS_in_ident4841 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_AS_in_ident4853 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_GET_in_ident4865 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_SET_in_ident4877 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_as2CompilationUnit_in_synpred1348 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_commentExpression_in_synpred2382 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_SEMI_in_synpred20648 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_LCURLY_in_synpred491569 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_expressionStatement_in_synpred511583 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_commentExpression_in_synpred661776 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_commentExpression_in_synpred671781 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_ELSE_in_synpred681788 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_commentExpression_in_synpred691807 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_expression_in_synpred731904 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_forInClauseDecl_in_synpred782143 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000000004000000UL });
        public static readonly BitSet FOLLOW_IN_in_synpred782145 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_commentExpression_in_synpred842420 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_commentExpression_in_synpred852438 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_commentExpression_in_synpred862449 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_commentExpression_in_synpred872470 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_annotation_in_synpred982739 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_includeDirective_in_synpred992745 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_COMMA_in_synpred1173119 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_assignmentExpression_in_synpred1173121 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_assignmentOperator_in_synpred1233294 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_relationalOperator_in_synpred1493659 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_additiveOperator_in_synpred1603768 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_multiplicativeExpression_in_synpred1603771 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_multiplicativeOperator_in_synpred1623807 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_unaryExpression_in_synpred1623813 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_LBRACK_in_synpred1764047 = new BitSet(new ulong[] { 0x0200000000000000UL, 0x000004FC400011F8UL, 0x00100001FFBF70C4UL });
        public static readonly BitSet FOLLOW_expression_in_synpred1764049 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000010000000000UL });
        public static readonly BitSet FOLLOW_RBRACK_in_synpred1764051 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_arguments_in_synpred1784076 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_INC_in_synpred1794102 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_DEC_in_synpred1804121 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_newFullExpression_in_synpred1904253 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_newShortExpression_in_synpred1914258 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_DOT_in_synpred2034491 = new BitSet(new ulong[] { 0x0000000000000000UL, 0x0000047C400001E0UL, 0x00000000000000C0UL });
        public static readonly BitSet FOLLOW_qualifiedIdent_in_synpred2034493 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_brackets_in_synpred2044510 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_fullNewSubexpression_in_synpred2054554 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_comment_in_synpred2074612 = new BitSet(new ulong[] { 0x0000000000000002UL });
        public static readonly BitSet FOLLOW_comment_in_synpred2094631 = new BitSet(new ulong[] { 0x0000000000000002UL });

    }
}